"use weex:vue";
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */,
/* 1 */
/*!**************************************************************************!*\
  !*** C:/Users/TG/Documents/HBuilderProjects/livePusherT_android/main.js ***!
  \**************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(__f__) {/* harmony import */ var _dcloudio_uni_stat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dcloudio/uni-stat */ 3);\n/* harmony import */ var _dcloudio_uni_stat__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_dcloudio_uni_stat__WEBPACK_IMPORTED_MODULE_0__);\n\"use strict\";var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 7));\nvar _App = _interopRequireDefault(__webpack_require__(/*! ./App */ 8));\n\nvar _store = _interopRequireDefault(__webpack_require__(/*! ./store */ 14));\n\nvar _GlobalFunction = __webpack_require__(/*! ./lib/js/GlobalFunction.js */ 22);\n\n__webpack_require__(/*! ./lib/socket/index.js */ 25);\n\nvar _GlobalObj = _interopRequireDefault(__webpack_require__(/*! ./lib/js/GlobalObj.js */ 26));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}__f__(\"log\", 'mainjs+ 开始连接', \" at main.js:3\"); //全局对象\n__f__(\"log\", _GlobalObj.default, \" at main.js:11\");\n_vue.default.prototype.GLOBAL = _GlobalObj.default; //添加Global_到Vue的原型对象上\n\n_vue.default.config.productionTip = false;\n\n_vue.default.prototype.$host = 'https://unidemo.dcloud.net.cn/';\n\n\n\n_App.default.mpType = 'app';\n\nvar app = new _vue.default(_objectSpread({},\n_App.default, {\n  store: _store.default, //挂载store\n  Global_: _GlobalObj.default }));\n\napp.$mount();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 2)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUE0QixhQUFhLGtDQUFrQyxtQkFBTyxDQUFDLFlBQUs7QUFDeEYsa0NBQWtDLG1CQUFPLENBQUMsY0FBTzs7QUFFakQsb0NBQW9DLG1CQUFPLENBQUMsaUJBQVM7O0FBRXJELHNCQUFzQixtQkFBTyxDQUFDLG9DQUE0Qjs7QUFFMUQsbUJBQU8sQ0FBQywrQkFBdUI7O0FBRS9CLHdDQUF3QyxtQkFBTyxDQUFDLCtCQUF1QixHQUFHLHNDQUFzQyxzQ0FBc0MsaUJBQWlCLDBDQUEwQywrQkFBK0IsbUNBQW1DLG1EQUFtRCw2REFBNkQsZ0VBQWdFLEVBQUUsZ0NBQWdDLGFBQWEsZ0NBQWdDLGVBQWUsc0JBQXNCLE9BQU8sc0RBQXNELFlBQVksc0RBQXNELDJDQUEyQyxHQUFHLDZDQUE2QywyRUFBMkUsT0FBTyxnREFBZ0Qsa0ZBQWtGLElBQUksZUFBZSwyQ0FBMkMsaUJBQWlCLGlDQUFpQyxxRUFBcUUsR0FBRyxPQUFPLGtCQUFrQixZQUFZLDhDQUE4QztBQUNodkM7QUFDQSxtREFBbUQ7O0FBRW5EOztBQUVBOzs7O0FBSUE7O0FBRUEsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQSwrQkFBK0I7O0FBRS9CLGEiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnQGRjbG91ZGlvL3VuaS1zdGF0JztcInVzZSBzdHJpY3RcIjt2YXIgX3Z1ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInZ1ZVwiKSk7XG52YXIgX0FwcCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQXBwXCIpKTtcblxudmFyIF9zdG9yZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc3RvcmVcIikpO1xuXG52YXIgX0dsb2JhbEZ1bmN0aW9uID0gcmVxdWlyZShcIi4vbGliL2pzL0dsb2JhbEZ1bmN0aW9uLmpzXCIpO1xuXG5yZXF1aXJlKFwiLi9saWIvc29ja2V0L2luZGV4LmpzXCIpO1xuXG52YXIgX0dsb2JhbE9iaiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL2pzL0dsb2JhbE9iai5qc1wiKSk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtyZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTt9ZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7dmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO2lmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7dmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7aWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO30pO2tleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTt9cmV0dXJuIGtleXM7fWZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7Zm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHt2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtpZiAoaSAlIDIpIHtvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTt9KTt9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7T2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTt9IGVsc2Uge293bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO30pO319cmV0dXJuIHRhcmdldDt9ZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge2lmIChrZXkgaW4gb2JqKSB7T2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTt9IGVsc2Uge29ialtrZXldID0gdmFsdWU7fXJldHVybiBvYmo7fV9fZl9fKFwibG9nXCIsICdtYWluanMrIOW8gOWni+i/nuaOpScsIFwiIGF0IG1haW4uanM6M1wiKTsgLy/lhajlsYDlr7nosaFcbl9fZl9fKFwibG9nXCIsIF9HbG9iYWxPYmouZGVmYXVsdCwgXCIgYXQgbWFpbi5qczoxMVwiKTtcbl92dWUuZGVmYXVsdC5wcm90b3R5cGUuR0xPQkFMID0gX0dsb2JhbE9iai5kZWZhdWx0OyAvL+a3u+WKoEdsb2JhbF/liLBWdWXnmoTljp/lnovlr7nosaHkuIpcblxuX3Z1ZS5kZWZhdWx0LmNvbmZpZy5wcm9kdWN0aW9uVGlwID0gZmFsc2U7XG5cbl92dWUuZGVmYXVsdC5wcm90b3R5cGUuJGhvc3QgPSAnaHR0cHM6Ly91bmlkZW1vLmRjbG91ZC5uZXQuY24vJztcblxuXG5cbl9BcHAuZGVmYXVsdC5tcFR5cGUgPSAnYXBwJztcblxudmFyIGFwcCA9IG5ldyBfdnVlLmRlZmF1bHQoX29iamVjdFNwcmVhZCh7fSxcbl9BcHAuZGVmYXVsdCwge1xuICBzdG9yZTogX3N0b3JlLmRlZmF1bHQsIC8v5oyC6L29c3RvcmVcbiAgR2xvYmFsXzogX0dsb2JhbE9iai5kZWZhdWx0IH0pKTtcblxuYXBwLiRtb3VudCgpOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/*!*********************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.log = log;exports.default = formatLog;function typof(v) {
  var s = Object.prototype.toString.call(v);
  return s.substring(8, s.length - 1);
}

function isDebugMode() {
  /* eslint-disable no-undef */
  return typeof __channelId__ === 'string' && __channelId__;
}

function log(type) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  console[type].apply(console, args);
}

function formatLog() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  var type = args.shift();
  if (isDebugMode()) {
    args.push(args.pop().replace('at ', 'uni-app:///'));
    return console[type].apply(console, args);
  }

  var msgs = args.map(function (v) {
    var type = Object.prototype.toString.call(v).toLowerCase();

    if (type === '[object object]' || type === '[object array]') {
      try {
        v = '---BEGIN:JSON---' + JSON.stringify(v) + '---END:JSON---';
      } catch (e) {
        v = '[object object]';
      }
    } else {
      if (v === null) {
        v = '---NULL---';
      } else if (v === undefined) {
        v = '---UNDEFINED---';
      } else {
        var vType = typof(v).toUpperCase();

        if (vType === 'NUMBER' || vType === 'BOOLEAN') {
          v = '---BEGIN:' + vType + '---' + v + '---END:' + vType + '---';
        } else {
          v = String(v);
        }
      }
    }

    return v;
  });
  var msg = '';

  if (msgs.length > 1) {
    var lastMsg = msgs.pop();
    msg = msgs.join('---COMMA---');

    if (lastMsg.indexOf(' at ') === 0) {
      msg += lastMsg;
    } else {
      msg += '---COMMA---' + lastMsg;
    }
  } else {
    msg = msgs[0];
  }

  console[type](msg);
}

/***/ }),
/* 3 */
/*!*******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/dist/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var _package = __webpack_require__(/*! ../package.json */ 4);function _createSuper(Derived) {return function () {var Super = _getPrototypeOf(Derived),result;if (_isNativeReflectConstruct()) {var NewTarget = _getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return _possibleConstructorReturn(this, result);};}function _possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}

var STAT_VERSION = _package.version;
var STAT_URL = 'https://tongji.dcloud.io/uni/stat';
var STAT_H5_URL = 'https://tongji.dcloud.io/uni/stat.gif';
var PAGE_PVER_TIME = 1800;
var APP_PVER_TIME = 300;
var OPERATING_TIME = 10;
var DIFF_TIME = 60 * 1000 * 60 * 24;

var statConfig = __webpack_require__(/*! uni-stat-config */ 5).default || __webpack_require__(/*! uni-stat-config */ 5);
var UUID_KEY = '__DC_STAT_UUID';
var UUID_VALUE = '__DC_UUID_VALUE';

function getUuid() {
  var uuid = '';
  if (getPlatformName() === 'n') {
    try {
      uuid = plus.runtime.getDCloudId();
    } catch (e) {
      uuid = '';
    }
    return uuid;
  }

  try {
    uuid = uni.getStorageSync(UUID_KEY);
  } catch (e) {
    uuid = UUID_VALUE;
  }

  if (!uuid) {
    uuid = Date.now() + '' + Math.floor(Math.random() * 1e7);
    try {
      uni.setStorageSync(UUID_KEY, uuid);
    } catch (e) {
      uni.setStorageSync(UUID_KEY, UUID_VALUE);
    }
  }
  return uuid;
}

var getSgin = function getSgin(statData) {
  var arr = Object.keys(statData);
  var sortArr = arr.sort();
  var sgin = {};
  var sginStr = '';
  for (var i in sortArr) {
    sgin[sortArr[i]] = statData[sortArr[i]];
    sginStr += sortArr[i] + '=' + statData[sortArr[i]] + '&';
  }
  // const options = sginStr.substr(0, sginStr.length - 1)
  // sginStr = sginStr.substr(0, sginStr.length - 1) + '&key=' + STAT_KEY;
  // const si = crypto.createHash('md5').update(sginStr).digest('hex');
  return {
    sign: '',
    options: sginStr.substr(0, sginStr.length - 1) };

};

var getSplicing = function getSplicing(data) {
  var str = '';
  for (var i in data) {
    str += i + '=' + data[i] + '&';
  }
  return str.substr(0, str.length - 1);
};

var getTime = function getTime() {
  return parseInt(new Date().getTime() / 1000);
};

var getPlatformName = function getPlatformName() {
  var platformList = {
    'app-plus': 'n',
    'h5': 'h5',
    'mp-weixin': 'wx',
    'mp-alipay': 'ali',
    'mp-baidu': 'bd',
    'mp-toutiao': 'tt',
    'mp-qq': 'qq' };

  return platformList["app-plus"];
};

var getPackName = function getPackName() {
  var packName = '';
  if (getPlatformName() === 'wx' || getPlatformName() === 'qq') {
    // 兼容微信小程序低版本基础库
    if (uni.canIUse('getAccountInfoSync')) {
      packName = uni.getAccountInfoSync().miniProgram.appId || '';
    }
  }
  return packName;
};

var getVersion = function getVersion() {
  return getPlatformName() === 'n' ? plus.runtime.version : '';
};

var getChannel = function getChannel() {
  var platformName = getPlatformName();
  var channel = '';
  if (platformName === 'n') {
    channel = plus.runtime.channel;
  }
  return channel;
};

var getScene = function getScene(options) {
  var platformName = getPlatformName();
  var scene = '';
  if (options) {
    return options;
  }
  if (platformName === 'wx') {
    scene = uni.getLaunchOptionsSync().scene;
  }
  return scene;
};
var First__Visit__Time__KEY = 'First__Visit__Time';
var Last__Visit__Time__KEY = 'Last__Visit__Time';

var getFirstVisitTime = function getFirstVisitTime() {
  var timeStorge = uni.getStorageSync(First__Visit__Time__KEY);
  var time = 0;
  if (timeStorge) {
    time = timeStorge;
  } else {
    time = getTime();
    uni.setStorageSync(First__Visit__Time__KEY, time);
    uni.removeStorageSync(Last__Visit__Time__KEY);
  }
  return time;
};

var getLastVisitTime = function getLastVisitTime() {
  var timeStorge = uni.getStorageSync(Last__Visit__Time__KEY);
  var time = 0;
  if (timeStorge) {
    time = timeStorge;
  } else {
    time = '';
  }
  uni.setStorageSync(Last__Visit__Time__KEY, getTime());
  return time;
};


var PAGE_RESIDENCE_TIME = '__page__residence__time';
var First_Page_residence_time = 0;
var Last_Page_residence_time = 0;


var setPageResidenceTime = function setPageResidenceTime() {
  First_Page_residence_time = getTime();
  if (getPlatformName() === 'n') {
    uni.setStorageSync(PAGE_RESIDENCE_TIME, getTime());
  }
  return First_Page_residence_time;
};

var getPageResidenceTime = function getPageResidenceTime() {
  Last_Page_residence_time = getTime();
  if (getPlatformName() === 'n') {
    First_Page_residence_time = uni.getStorageSync(PAGE_RESIDENCE_TIME);
  }
  return Last_Page_residence_time - First_Page_residence_time;
};
var TOTAL__VISIT__COUNT = 'Total__Visit__Count';
var getTotalVisitCount = function getTotalVisitCount() {
  var timeStorge = uni.getStorageSync(TOTAL__VISIT__COUNT);
  var count = 1;
  if (timeStorge) {
    count = timeStorge;
    count++;
  }
  uni.setStorageSync(TOTAL__VISIT__COUNT, count);
  return count;
};

var GetEncodeURIComponentOptions = function GetEncodeURIComponentOptions(statData) {
  var data = {};
  for (var prop in statData) {
    data[prop] = encodeURIComponent(statData[prop]);
  }
  return data;
};

var Set__First__Time = 0;
var Set__Last__Time = 0;

var getFirstTime = function getFirstTime() {
  var time = new Date().getTime();
  Set__First__Time = time;
  Set__Last__Time = 0;
  return time;
};


var getLastTime = function getLastTime() {
  var time = new Date().getTime();
  Set__Last__Time = time;
  return time;
};


var getResidenceTime = function getResidenceTime(type) {
  var residenceTime = 0;
  if (Set__First__Time !== 0) {
    residenceTime = Set__Last__Time - Set__First__Time;
  }

  residenceTime = parseInt(residenceTime / 1000);
  residenceTime = residenceTime < 1 ? 1 : residenceTime;
  if (type === 'app') {
    var overtime = residenceTime > APP_PVER_TIME ? true : false;
    return {
      residenceTime: residenceTime,
      overtime: overtime };

  }
  if (type === 'page') {
    var _overtime = residenceTime > PAGE_PVER_TIME ? true : false;
    return {
      residenceTime: residenceTime,
      overtime: _overtime };

  }

  return {
    residenceTime: residenceTime };


};

var getRoute = function getRoute() {
  var pages = getCurrentPages();
  var page = pages[pages.length - 1];
  var _self = page.$vm;

  if (getPlatformName() === 'bd') {
    return _self.$mp && _self.$mp.page.is;
  } else {
    return _self.$scope && _self.$scope.route || _self.$mp && _self.$mp.page.route;
  }
};

var getPageRoute = function getPageRoute(self) {
  var pages = getCurrentPages();
  var page = pages[pages.length - 1];
  var _self = page.$vm;
  var query = self._query;
  var str = query && JSON.stringify(query) !== '{}' ? '?' + JSON.stringify(query) : '';
  // clear
  self._query = '';
  if (getPlatformName() === 'bd') {
    return _self.$mp && _self.$mp.page.is + str;
  } else {
    return _self.$scope && _self.$scope.route + str || _self.$mp && _self.$mp.page.route + str;
  }
};

var getPageTypes = function getPageTypes(self) {
  if (self.mpType === 'page' || self.$mp && self.$mp.mpType === 'page' || self.$options.mpType === 'page') {
    return true;
  }
  return false;
};

var calibration = function calibration(eventName, options) {
  //  login 、 share 、pay_success 、pay_fail 、register 、title
  if (!eventName) {
    console.error("uni.report \u7F3A\u5C11 [eventName] \u53C2\u6570");
    return true;
  }
  if (typeof eventName !== 'string') {
    console.error("uni.report [eventName] \u53C2\u6570\u7C7B\u578B\u9519\u8BEF,\u53EA\u80FD\u4E3A String \u7C7B\u578B");
    return true;
  }
  if (eventName.length > 255) {
    console.error("uni.report [eventName] \u53C2\u6570\u957F\u5EA6\u4E0D\u80FD\u5927\u4E8E 255");
    return true;
  }

  if (typeof options !== 'string' && typeof options !== 'object') {
    console.error("uni.report [options] \u53C2\u6570\u7C7B\u578B\u9519\u8BEF,\u53EA\u80FD\u4E3A String \u6216 Object \u7C7B\u578B");
    return true;
  }

  if (typeof options === 'string' && options.length > 255) {
    console.error("uni.report [options] \u53C2\u6570\u957F\u5EA6\u4E0D\u80FD\u5927\u4E8E 255");
    return true;
  }

  if (eventName === 'title' && typeof options !== 'string') {
    console.error('uni.report [eventName] 参数为 title 时，[options] 参数只能为 String 类型');
    return true;
  }
};

var Report_Data_Time = 'Report_Data_Time';
var Report_Status = 'Report_Status';
var isReportData = function isReportData() {
  return new Promise(function (resolve, reject) {
    var start_time = '';
    var end_time = new Date().getTime();
    var diff_time = DIFF_TIME;
    var report_status = 1;
    try {
      start_time = uni.getStorageSync(Report_Data_Time);
      report_status = uni.getStorageSync(Report_Status);
    } catch (e) {
      start_time = '';
      report_status = 1;
    }

    if (report_status === '') {
      requestData(function (_ref)

      {var enable = _ref.enable;
        uni.setStorageSync(Report_Data_Time, end_time);
        uni.setStorageSync(Report_Status, enable);
        if (enable === 1) {
          resolve();
        }
      });
      return;
    }

    if (report_status === 1) {
      resolve();
    }

    if (!start_time) {
      uni.setStorageSync(Report_Data_Time, end_time);
      start_time = end_time;
    }

    if (end_time - start_time > diff_time) {
      requestData(function (_ref2)

      {var enable = _ref2.enable;
        uni.setStorageSync(Report_Data_Time, end_time);
        uni.setStorageSync(Report_Status, enable);
      });
    }

  });
};

var requestData = function requestData(done) {
  var formData = {
    usv: STAT_VERSION,
    conf: JSON.stringify({
      ak: statConfig.appid }) };


  uni.request({
    url: STAT_URL,
    method: 'GET',
    data: formData,
    success: function success(res) {var

      data =
      res.data;
      if (data.ret === 0) {
        typeof done === 'function' && done({
          enable: data.enable });

      }
    },
    fail: function fail(e) {
      var report_status_code = 1;
      try {
        report_status_code = uni.getStorageSync(Report_Status);
      } catch (e) {
        report_status_code = 1;
      }
      if (report_status_code === '') {
        report_status_code = 1;
      }
      if (report_status_code === 1) {
        typeof done === 'function' && done({
          enable: res.enable });

      }
      // console.error('统计请求错误');
    } });

};

var PagesJson = __webpack_require__(/*! uni-pages?{"type":"style"} */ 6).default;
var statConfig$1 = __webpack_require__(/*! uni-stat-config */ 5).default || __webpack_require__(/*! uni-stat-config */ 5);

var resultOptions = uni.getSystemInfoSync();var

Util = /*#__PURE__*/function () {
  function Util() {_classCallCheck(this, Util);
    this.self = '';
    this._retry = 0;
    this._platform = '';
    this._query = {};
    this._navigationBarTitle = {
      config: '',
      page: '',
      report: '',
      lt: '' };

    this._operatingTime = 0;
    this._reportingRequestData = {
      '1': [],
      '11': [] };

    this.__prevent_triggering = false;

    this.__licationHide = false;
    this.__licationShow = false;
    this._lastPageRoute = '';
    this.statData = {
      uuid: getUuid(),
      ut: getPlatformName(),
      mpn: getPackName(),
      ak: statConfig$1.appid,
      usv: STAT_VERSION,
      v: getVersion(),
      ch: getChannel(),
      cn: '',
      pn: '',
      ct: '',
      t: getTime(),
      tt: '',
      p: resultOptions.platform === 'android' ? 'a' : 'i',
      brand: resultOptions.brand || '',
      md: resultOptions.model,
      sv: resultOptions.system.replace(/(Android|iOS)\s/, ''),
      mpsdk: resultOptions.SDKVersion || '',
      mpv: resultOptions.version || '',
      lang: resultOptions.language,
      pr: resultOptions.pixelRatio,
      ww: resultOptions.windowWidth,
      wh: resultOptions.windowHeight,
      sw: resultOptions.screenWidth,
      sh: resultOptions.screenHeight };


  }_createClass(Util, [{ key: "getIsReportData", value: function getIsReportData()

    {
      return isReportData();
    } }, { key: "_applicationShow", value: function _applicationShow()

    {
      if (this.__licationHide) {
        getLastTime();
        var time = getResidenceTime('app');
        if (time.overtime) {
          var options = {
            path: this._lastPageRoute,
            scene: this.statData.sc };

          this._sendReportRequest(options);
        }
        this.__licationHide = false;
      }
    } }, { key: "_applicationHide", value: function _applicationHide(

    self, type) {

      this.__licationHide = true;
      getLastTime();
      var time = getResidenceTime();
      getFirstTime();
      var route = getPageRoute(this);
      this._sendHideRequest({
        urlref: route,
        urlref_ts: time.residenceTime },
      type);
    } }, { key: "_pageShow", value: function _pageShow()

    {
      var route = getPageRoute(this);
      var routepath = getRoute();
      this._navigationBarTitle.config = PagesJson &&
      PagesJson.pages[routepath] &&
      PagesJson.pages[routepath].titleNView &&
      PagesJson.pages[routepath].titleNView.titleText ||
      PagesJson &&
      PagesJson.pages[routepath] &&
      PagesJson.pages[routepath].navigationBarTitleText || '';

      if (this.__licationShow) {
        getFirstTime();
        this.__licationShow = false;
        // console.log('这是 onLauch 之后执行的第一次 pageShow ，为下次记录时间做准备');
        this._lastPageRoute = route;
        return;
      }

      getLastTime();
      this._lastPageRoute = route;
      var time = getResidenceTime('page');
      if (time.overtime) {
        var options = {
          path: this._lastPageRoute,
          scene: this.statData.sc };

        this._sendReportRequest(options);
      }
      getFirstTime();
    } }, { key: "_pageHide", value: function _pageHide()

    {
      if (!this.__licationHide) {
        getLastTime();
        var time = getResidenceTime('page');
        this._sendPageRequest({
          url: this._lastPageRoute,
          urlref: this._lastPageRoute,
          urlref_ts: time.residenceTime });

        this._navigationBarTitle = {
          config: '',
          page: '',
          report: '',
          lt: '' };

        return;
      }
    } }, { key: "_login", value: function _login()

    {
      this._sendEventRequest({
        key: 'login' },
      0);
    } }, { key: "_share", value: function _share()

    {
      this._sendEventRequest({
        key: 'share' },
      0);
    } }, { key: "_payment", value: function _payment(
    key) {
      this._sendEventRequest({
        key: key },
      0);
    } }, { key: "_sendReportRequest", value: function _sendReportRequest(
    options) {

      this._navigationBarTitle.lt = '1';
      var query = options.query && JSON.stringify(options.query) !== '{}' ? '?' + JSON.stringify(options.query) : '';
      this.statData.lt = '1';
      this.statData.url = options.path + query || '';
      this.statData.t = getTime();
      this.statData.sc = getScene(options.scene);
      this.statData.fvts = getFirstVisitTime();
      this.statData.lvts = getLastVisitTime();
      this.statData.tvc = getTotalVisitCount();
      if (getPlatformName() === 'n') {
        this.getProperty();
      } else {
        this.getNetworkInfo();
      }
    } }, { key: "_sendPageRequest", value: function _sendPageRequest(

    opt) {var

      url =


      opt.url,urlref = opt.urlref,urlref_ts = opt.urlref_ts;
      this._navigationBarTitle.lt = '11';
      var options = {
        ak: this.statData.ak,
        uuid: this.statData.uuid,
        lt: '11',
        ut: this.statData.ut,
        url: url,
        tt: this.statData.tt,
        urlref: urlref,
        urlref_ts: urlref_ts,
        ch: this.statData.ch,
        usv: this.statData.usv,
        t: getTime(),
        p: this.statData.p };

      this.request(options);
    } }, { key: "_sendHideRequest", value: function _sendHideRequest(

    opt, type) {var

      urlref =

      opt.urlref,urlref_ts = opt.urlref_ts;
      var options = {
        ak: this.statData.ak,
        uuid: this.statData.uuid,
        lt: '3',
        ut: this.statData.ut,
        urlref: urlref,
        urlref_ts: urlref_ts,
        ch: this.statData.ch,
        usv: this.statData.usv,
        t: getTime(),
        p: this.statData.p };

      this.request(options, type);
    } }, { key: "_sendEventRequest", value: function _sendEventRequest()



    {var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},_ref3$key = _ref3.key,key = _ref3$key === void 0 ? '' : _ref3$key,_ref3$value = _ref3.value,value = _ref3$value === void 0 ? "" : _ref3$value;
      var route = this._lastPageRoute;
      var options = {
        ak: this.statData.ak,
        uuid: this.statData.uuid,
        lt: '21',
        ut: this.statData.ut,
        url: route,
        ch: this.statData.ch,
        e_n: key,
        e_v: typeof value === 'object' ? JSON.stringify(value) : value.toString(),
        usv: this.statData.usv,
        t: getTime(),
        p: this.statData.p };

      this.request(options);
    } }, { key: "getNetworkInfo", value: function getNetworkInfo()

    {var _this = this;
      uni.getNetworkType({
        success: function success(result) {
          _this.statData.net = result.networkType;
          _this.getLocation();
        } });

    } }, { key: "getProperty", value: function getProperty()

    {var _this2 = this;
      plus.runtime.getProperty(plus.runtime.appid, function (wgtinfo) {
        _this2.statData.v = wgtinfo.version || '';
        _this2.getNetworkInfo();
      });
    } }, { key: "getLocation", value: function getLocation()

    {var _this3 = this;
      if (statConfig$1.getLocation) {
        uni.getLocation({
          type: 'wgs84',
          geocode: true,
          success: function success(result) {
            if (result.address) {
              _this3.statData.cn = result.address.country;
              _this3.statData.pn = result.address.province;
              _this3.statData.ct = result.address.city;
            }

            _this3.statData.lat = result.latitude;
            _this3.statData.lng = result.longitude;
            _this3.request(_this3.statData);
          } });

      } else {
        this.statData.lat = 0;
        this.statData.lng = 0;
        this.request(this.statData);
      }
    } }, { key: "request", value: function request(

    data, type) {var _this4 = this;
      var time = getTime();
      var title = this._navigationBarTitle;
      data.ttn = title.page;
      data.ttpj = title.config;
      data.ttc = title.report;

      var requestData = this._reportingRequestData;
      if (getPlatformName() === 'n') {
        requestData = uni.getStorageSync('__UNI__STAT__DATA') || {};
      }
      if (!requestData[data.lt]) {
        requestData[data.lt] = [];
      }
      requestData[data.lt].push(data);

      if (getPlatformName() === 'n') {
        uni.setStorageSync('__UNI__STAT__DATA', requestData);
      }
      if (getPageResidenceTime() < OPERATING_TIME && !type) {
        return;
      }
      var uniStatData = this._reportingRequestData;
      if (getPlatformName() === 'n') {
        uniStatData = uni.getStorageSync('__UNI__STAT__DATA');
      }
      // 时间超过，重新获取时间戳
      setPageResidenceTime();
      var firstArr = [];
      var contentArr = [];
      var lastArr = [];var _loop = function _loop(

      i) {
        var rd = uniStatData[i];
        rd.forEach(function (elm) {
          var newData = getSplicing(elm);
          if (i === 0) {
            firstArr.push(newData);
          } else if (i === 3) {
            lastArr.push(newData);
          } else {
            contentArr.push(newData);
          }
        });};for (var i in uniStatData) {_loop(i);
      }

      firstArr.push.apply(firstArr, contentArr.concat(lastArr));
      var optionsData = {
        usv: STAT_VERSION, //统计 SDK 版本号
        t: time, //发送请求时的时间戮
        requests: JSON.stringify(firstArr) };


      this._reportingRequestData = {};
      if (getPlatformName() === 'n') {
        uni.removeStorageSync('__UNI__STAT__DATA');
      }

      if (data.ut === 'h5') {
        this.imageRequest(optionsData);
        return;
      }

      if (getPlatformName() === 'n' && this.statData.p === 'a') {
        setTimeout(function () {
          _this4._sendRequest(optionsData);
        }, 200);
        return;
      }
      this._sendRequest(optionsData);
    } }, { key: "_sendRequest", value: function _sendRequest(
    optionsData) {var _this5 = this;
      this.getIsReportData().then(function () {
        uni.request({
          url: STAT_URL,
          method: 'POST',
          // header: {
          //   'content-type': 'application/json' // 默认值
          // },
          data: optionsData,
          success: function success() {
            // if (process.env.NODE_ENV === 'development') {
            //   console.log('stat request success');
            // }
          },
          fail: function fail(e) {
            if (++_this5._retry < 3) {
              setTimeout(function () {
                _this5._sendRequest(optionsData);
              }, 1000);
            }
          } });

      });
    }
    /**
       * h5 请求
       */ }, { key: "imageRequest", value: function imageRequest(
    data) {
      this.getIsReportData().then(function () {
        var image = new Image();
        var options = getSgin(GetEncodeURIComponentOptions(data)).options;
        image.src = STAT_H5_URL + '?' + options;
      });
    } }, { key: "sendEvent", value: function sendEvent(

    key, value) {
      // 校验 type 参数
      if (calibration(key, value)) return;

      if (key === 'title') {
        this._navigationBarTitle.report = value;
        return;
      }
      this._sendEventRequest({
        key: key,
        value: typeof value === 'object' ? JSON.stringify(value) : value },
      1);
    } }]);return Util;}();var



Stat = /*#__PURE__*/function (_Util) {_inherits(Stat, _Util);var _super = _createSuper(Stat);_createClass(Stat, null, [{ key: "getInstance", value: function getInstance()
    {
      if (!this.instance) {
        this.instance = new Stat();
      }
      return this.instance;
    } }]);
  function Stat() {var _this6;_classCallCheck(this, Stat);
    _this6 = _super.call(this);
    _this6.instance = null;
    // 注册拦截器
    if (typeof uni.addInterceptor === 'function' && "development" !== 'development') {
      _this6.addInterceptorInit();
      _this6.interceptLogin();
      _this6.interceptShare(true);
      _this6.interceptRequestPayment();
    }return _this6;
  }_createClass(Stat, [{ key: "addInterceptorInit", value: function addInterceptorInit()

    {
      var self = this;
      uni.addInterceptor('setNavigationBarTitle', {
        invoke: function invoke(args) {
          self._navigationBarTitle.page = args.title;
        } });

    } }, { key: "interceptLogin", value: function interceptLogin()

    {
      var self = this;
      uni.addInterceptor('login', {
        complete: function complete() {
          self._login();
        } });

    } }, { key: "interceptShare", value: function interceptShare(

    type) {
      var self = this;
      if (!type) {
        self._share();
        return;
      }
      uni.addInterceptor('share', {
        success: function success() {
          self._share();
        },
        fail: function fail() {
          self._share();
        } });

    } }, { key: "interceptRequestPayment", value: function interceptRequestPayment()

    {
      var self = this;
      uni.addInterceptor('requestPayment', {
        success: function success() {
          self._payment('pay_success');
        },
        fail: function fail() {
          self._payment('pay_fail');
        } });

    } }, { key: "report", value: function report(

    options, self) {
      this.self = self;
      // if (process.env.NODE_ENV === 'development') {
      //   console.log('report init');
      // }
      setPageResidenceTime();
      this.__licationShow = true;
      this._sendReportRequest(options, true);
    } }, { key: "load", value: function load(

    options, self) {
      if (!self.$scope && !self.$mp) {
        var page = getCurrentPages();
        self.$scope = page[page.length - 1];
      }
      this.self = self;
      this._query = options;
    } }, { key: "show", value: function show(

    self) {
      this.self = self;
      if (getPageTypes(self)) {
        this._pageShow(self);
      } else {
        this._applicationShow(self);
      }
    } }, { key: "ready", value: function ready(

    self) {
      // this.self = self;
      // if (getPageTypes(self)) {
      //   this._pageShow(self);
      // }
    } }, { key: "hide", value: function hide(
    self) {
      this.self = self;
      if (getPageTypes(self)) {
        this._pageHide(self);
      } else {
        this._applicationHide(self, true);
      }
    } }, { key: "error", value: function error(
    em) {
      if (this._platform === 'devtools') {
        if (true) {
          console.info('当前运行环境为开发者工具，不上报数据。');
        }
        // return;
      }
      var emVal = '';
      if (!em.message) {
        emVal = JSON.stringify(em);
      } else {
        emVal = em.stack;
      }
      var options = {
        ak: this.statData.ak,
        uuid: this.statData.uuid,
        lt: '31',
        ut: this.statData.ut,
        ch: this.statData.ch,
        mpsdk: this.statData.mpsdk,
        mpv: this.statData.mpv,
        v: this.statData.v,
        em: emVal,
        usv: this.statData.usv,
        t: getTime(),
        p: this.statData.p };

      this.request(options);
    } }]);return Stat;}(Util);


var stat = Stat.getInstance();
var isHide = false;
var lifecycle = {
  onLaunch: function onLaunch(options) {
    stat.report(options, this);
  },
  onReady: function onReady() {
    stat.ready(this);
  },
  onLoad: function onLoad(options) {
    stat.load(options, this);
    // 重写分享，获取分享上报事件
    if (this.$scope && this.$scope.onShareAppMessage) {
      var oldShareAppMessage = this.$scope.onShareAppMessage;
      this.$scope.onShareAppMessage = function (options) {
        stat.interceptShare(false);
        return oldShareAppMessage.call(this, options);
      };
    }
  },
  onShow: function onShow() {
    isHide = false;
    stat.show(this);
  },
  onHide: function onHide() {
    isHide = true;
    stat.hide(this);
  },
  onUnload: function onUnload() {
    if (isHide) {
      isHide = false;
      return;
    }
    stat.hide(this);
  },
  onError: function onError(e) {
    stat.error(e);
  } };


function main() {
  if (true) {
    uni.report = function (type, options) {};
  } else { var Vue; }
}

main();

/***/ }),
/* 4 */
/*!******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/package.json ***!
  \******************************************************/
/*! exports provided: _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _shasum, _spec, _where, author, bugs, bundleDependencies, deprecated, description, devDependencies, files, gitHead, homepage, license, main, name, repository, scripts, version, default */
/***/ (function(module) {

module.exports = {"_from":"@dcloudio/uni-stat@next","_id":"@dcloudio/uni-stat@2.0.0-27920200618001","_inBundle":false,"_integrity":"sha512-8xzT9YOpxECxNMyDzwCzV3yUrsErTQlECtFp6lRScNoOxZ1XGVcUD7CwXil8WBJ6TaP9WfpZndMhxOixcBXYXA==","_location":"/@dcloudio/uni-stat","_phantomChildren":{},"_requested":{"type":"tag","registry":true,"raw":"@dcloudio/uni-stat@next","name":"@dcloudio/uni-stat","escapedName":"@dcloudio%2funi-stat","scope":"@dcloudio","rawSpec":"next","saveSpec":null,"fetchSpec":"next"},"_requiredBy":["#USER","/","/@dcloudio/vue-cli-plugin-uni"],"_resolved":"https://registry.npmjs.org/@dcloudio/uni-stat/-/uni-stat-2.0.0-27920200618001.tgz","_shasum":"55ed45fa98c529a38a49dce3f11b3fdf198488bc","_spec":"@dcloudio/uni-stat@next","_where":"/Users/guoshengqiang/Documents/dcloud-plugins/release/uniapp-cli","author":"","bugs":{"url":"https://github.com/dcloudio/uni-app/issues"},"bundleDependencies":false,"deprecated":false,"description":"","devDependencies":{"@babel/core":"^7.5.5","@babel/preset-env":"^7.5.5","eslint":"^6.1.0","rollup":"^1.19.3","rollup-plugin-babel":"^4.3.3","rollup-plugin-clear":"^2.0.7","rollup-plugin-commonjs":"^10.0.2","rollup-plugin-copy":"^3.1.0","rollup-plugin-eslint":"^7.0.0","rollup-plugin-json":"^4.0.0","rollup-plugin-node-resolve":"^5.2.0","rollup-plugin-replace":"^2.2.0","rollup-plugin-uglify":"^6.0.2"},"files":["dist","package.json","LICENSE"],"gitHead":"909d2a9616971f0488d727d0a906828ed24856c2","homepage":"https://github.com/dcloudio/uni-app#readme","license":"Apache-2.0","main":"dist/index.js","name":"@dcloudio/uni-stat","repository":{"type":"git","url":"git+https://github.com/dcloudio/uni-app.git","directory":"packages/uni-stat"},"scripts":{"build":"NODE_ENV=production rollup -c rollup.config.js","dev":"NODE_ENV=development rollup -w -c rollup.config.js"},"version":"2.0.0-27920200618001"};

/***/ }),
/* 5 */
/*!*********************************************************************************************!*\
  !*** C:/Users/TG/Documents/HBuilderProjects/livePusherT_android/pages.json?{"type":"stat"} ***!
  \*********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({"appid":"__UNI__07D0DC8"});

/***/ }),
/* 6 */
/*!**********************************************************************************************!*\
  !*** C:/Users/TG/Documents/HBuilderProjects/livePusherT_android/pages.json?{"type":"style"} ***!
  \**********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({"pages":{"pages/startup/startup":{"titleNView":false},"pages/liveroom/liveroom":{"titleNView":false},"pages/news/index":{},"pages/detail/detail":{},"pages/search/search":{},"pages/my/my":{}},"globalStyle":{}});

/***/ }),
/* 7 */
/*!**********************!*\
  !*** external "Vue" ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = Vue;

/***/ }),
/* 8 */
/*!**************************************************************************!*\
  !*** C:/Users/TG/Documents/HBuilderProjects/livePusherT_android/App.vue ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./App.vue?vue&type=script&lang=js& */ 9);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n/* harmony import */ var _D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js */ 13);\nvar render, staticRenderFns, recyclableRender, components\nvar renderjs\n\n\nfunction injectStyles (context) {\n  \n  if(!this.options.style){\n          this.options.style = {}\n      }\n      if(Vue.prototype.__merge_style && Vue.prototype.__$appStyle__){\n        Vue.prototype.__merge_style(Vue.prototype.__$appStyle__, this.options.style)\n      }\n      if(Vue.prototype.__merge_style){\n                Vue.prototype.__merge_style(__webpack_require__(/*! ./App.vue?vue&type=style&index=0&lang=css& */ 11).default, this.options.style)\n            }else{\n                Object.assign(this.options.style,__webpack_require__(/*! ./App.vue?vue&type=style&index=0&lang=css& */ 11).default)\n            }\n\n}\n\n/* normalize component */\n\nvar component = Object(_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\n  _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  \"940c01da\",\n  false,\n  components,\n  renderjs\n)\n\ninjectStyles.call(component)\ncomponent.options.__file = \"App.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUN1RDtBQUNMO0FBQ2xEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLG1CQUFPLENBQUMsb0RBQTRDO0FBQ2hHLGFBQWE7QUFDYixpREFBaUQsbUJBQU8sQ0FBQyxvREFBNEM7QUFDckc7O0FBRUE7O0FBRUE7QUFDd0w7QUFDeEwsZ0JBQWdCLDZMQUFVO0FBQzFCLEVBQUUseUVBQU07QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ2UsZ0YiLCJmaWxlIjoiOC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciByZW5kZXIsIHN0YXRpY1JlbmRlckZucywgcmVjeWNsYWJsZVJlbmRlciwgY29tcG9uZW50c1xudmFyIHJlbmRlcmpzXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmZ1bmN0aW9uIGluamVjdFN0eWxlcyAoY29udGV4dCkge1xuICBcbiAgaWYoIXRoaXMub3B0aW9ucy5zdHlsZSl7XG4gICAgICAgICAgdGhpcy5vcHRpb25zLnN0eWxlID0ge31cbiAgICAgIH1cbiAgICAgIGlmKFZ1ZS5wcm90b3R5cGUuX19tZXJnZV9zdHlsZSAmJiBWdWUucHJvdG90eXBlLl9fJGFwcFN0eWxlX18pe1xuICAgICAgICBWdWUucHJvdG90eXBlLl9fbWVyZ2Vfc3R5bGUoVnVlLnByb3RvdHlwZS5fXyRhcHBTdHlsZV9fLCB0aGlzLm9wdGlvbnMuc3R5bGUpXG4gICAgICB9XG4gICAgICBpZihWdWUucHJvdG90eXBlLl9fbWVyZ2Vfc3R5bGUpe1xuICAgICAgICAgICAgICAgIFZ1ZS5wcm90b3R5cGUuX19tZXJnZV9zdHlsZShyZXF1aXJlKFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1jc3MmXCIpLmRlZmF1bHQsIHRoaXMub3B0aW9ucy5zdHlsZSlcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5vcHRpb25zLnN0eWxlLHJlcXVpcmUoXCIuL0FwcC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPWNzcyZcIikuZGVmYXVsdClcbiAgICAgICAgICAgIH1cblxufVxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIUQ6XFxcXOi9r+S7tlxcXFxIYnVpbGR4XFxcXEhCdWlsZGVyWDIuNy4xNFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcdnVlLWxvYWRlclxcXFxsaWJcXFxccnVudGltZVxcXFxjb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgXCI5NDBjMDFkYVwiLFxuICBmYWxzZSxcbiAgY29tcG9uZW50cyxcbiAgcmVuZGVyanNcbilcblxuaW5qZWN0U3R5bGVzLmNhbGwoY29tcG9uZW50KVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJBcHAudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/*!***************************************************************************************************!*\
  !*** C:/Users/TG/Documents/HBuilderProjects/livePusherT_android/App.vue?vue&type=script&lang=js& ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_ref_4_0_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_4_1_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!./node_modules/babel-loader/lib??ref--4-0!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--4-1!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!./App.vue?vue&type=script&lang=js& */ 10);\n/* harmony import */ var _D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_ref_4_0_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_4_1_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_ref_4_0_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_4_1_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_ref_4_0_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_4_1_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_ref_4_0_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_4_1_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_ref_4_0_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_4_1_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQTBkLENBQWdCLHVmQUFHLEVBQUMiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb2QgZnJvbSBcIi0hRDpcXFxc6L2v5Lu2XFxcXEhidWlsZHhcXFxcSEJ1aWxkZXJYMi43LjE0XFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcYmFiZWwtbG9hZGVyXFxcXGxpYlxcXFxpbmRleC5qcz8/cmVmLS00LTAhRDpcXFxc6L2v5Lu2XFxcXEhidWlsZHhcXFxcSEJ1aWxkZXJYMi43LjE0XFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcQGRjbG91ZGlvXFxcXHZ1ZS1jbGktcGx1Z2luLXVuaVxcXFxwYWNrYWdlc1xcXFx3ZWJwYWNrLXByZXByb2Nlc3MtbG9hZGVyXFxcXGluZGV4LmpzPz9yZWYtLTQtMSFEOlxcXFzova/ku7ZcXFxcSGJ1aWxkeFxcXFxIQnVpbGRlclgyLjcuMTRcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHZ1ZS1sb2FkZXJcXFxcbGliXFxcXGluZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BcHAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIUQ6XFxcXOi9r+S7tlxcXFxIYnVpbGR4XFxcXEhCdWlsZGVyWDIuNy4xNFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXGJhYmVsLWxvYWRlclxcXFxsaWJcXFxcaW5kZXguanM/P3JlZi0tNC0wIUQ6XFxcXOi9r+S7tlxcXFxIYnVpbGR4XFxcXEhCdWlsZGVyWDIuNy4xNFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcd2VicGFjay1wcmVwcm9jZXNzLWxvYWRlclxcXFxpbmRleC5qcz8/cmVmLS00LTEhRDpcXFxc6L2v5Lu2XFxcXEhidWlsZHhcXFxcSEJ1aWxkZXJYMi43LjE0XFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcQGRjbG91ZGlvXFxcXHZ1ZS1jbGktcGx1Z2luLXVuaVxcXFxwYWNrYWdlc1xcXFx2dWUtbG9hZGVyXFxcXGxpYlxcXFxpbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/*!******************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--4-1!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!C:/Users/TG/Documents/HBuilderProjects/livePusherT_android/App.vue?vue&type=script&lang=js& ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default =\n{\n  onLaunch: function onLaunch() {\n    __f__(\"log\", 'App Launch', \" at App.vue:4\");\n    var that = this;\n    uni.getStorage({\n      key: 'storage_state',\n      success: function success(res) {\n        var vuexData = JSON.parse(res.data);\n        Object.keys(vuexData).map(function (item) {\n          that.$store.state[item] = vuexData[item];\n        });\n      } });\n\n\n    plus.screen.lockOrientation('portrait-primary');\n\n    var appid = plus.runtime.appid;\n    if (appid && appid.toLocaleLowerCase() != \"hbuilder\") {\n      uni.request({\n        url: 'https://uniapp.dcloud.io/update', //检查更新的服务器地址\n        data: {\n          appid: plus.runtime.appid,\n          version: plus.runtime.version },\n\n        success: function success(res) {\n          __f__(\"log\", 'success', res, \" at App.vue:27\");\n          if (res.statusCode == 200 && res.data.isUpdate) {\n            var openUrl = plus.os.name === 'iOS' ? res.data.iOS : res.data.Android;\n            // 提醒用户更新\n            uni.showModal({\n              title: '更新提示',\n              content: res.data.note ? res.data.note : '是否选择更新',\n              success: function success(showResult) {\n                if (showResult.confirm) {\n                  plus.runtime.openURL(openUrl);\n                }\n              } });\n\n          }\n        } });\n\n    }\n\n    var domModule = weex.requireModule('dom');\n    domModule.addRule('fontFace', {\n      'fontFamily': \"texticons\",\n      'src': \"url('./static/text-icon.ttf')\" });\n\n\n  },\n  onShow: function onShow() {\n    __f__(\"log\", 'App Show', \" at App.vue:53\");\n  },\n  onHide: function onHide() {\n    __f__(\"log\", 'App Hide', \" at App.vue:56\");\n    uni.setStorage({\n      key: 'storage_state',\n      data: JSON.stringify(this.$store.state),\n      success: function success() {\n      } });\n\n  } };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 2)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vQXBwLnZ1ZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQURBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUZBO0FBR0EsT0FQQTs7O0FBVUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsOENBREEsRUFDQTtBQUNBO0FBQ0EsbUNBREE7QUFFQSx1Q0FGQSxFQUZBOztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQURBO0FBRUEsK0RBRkE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBUEE7O0FBU0E7QUFDQSxTQXJCQTs7QUF1QkE7O0FBRUE7QUFDQTtBQUNBLCtCQURBO0FBRUEsNENBRkE7OztBQUtBLEdBakRBO0FBa0RBO0FBQ0E7QUFDQSxHQXBEQTtBQXFEQTtBQUNBO0FBQ0E7QUFDQSwwQkFEQTtBQUVBLDZDQUZBO0FBR0E7QUFDQSxPQUpBOztBQU1BLEdBN0RBLEUiLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxyXG5cdGV4cG9ydCBkZWZhdWx0IHtcclxuXHRcdG9uTGF1bmNoOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0Y29uc29sZS5sb2coJ0FwcCBMYXVuY2gnKTtcclxuXHRcdFx0dmFyIHRoYXQgPSB0aGlzO1xyXG5cdFx0XHR1bmkuZ2V0U3RvcmFnZSh7XHJcblx0XHRcdFx0a2V5OiAnc3RvcmFnZV9zdGF0ZScsXHJcblx0XHRcdFx0c3VjY2VzczogZnVuY3Rpb24gKHJlcykge1xyXG5cdFx0XHRcdFx0dmFyIHZ1ZXhEYXRhID0gSlNPTi5wYXJzZShyZXMuZGF0YSk7XHJcblx0XHRcdFx0XHRPYmplY3Qua2V5cyh2dWV4RGF0YSkubWFwKGl0ZW0gPT4ge1xyXG5cdFx0XHRcdFx0XHR0aGF0LiRzdG9yZS5zdGF0ZVtpdGVtXSA9IHZ1ZXhEYXRhW2l0ZW1dXHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0XHQvLyAjaWZkZWYgQVBQLU5WVUVcclxuXHRcdFx0cGx1cy5zY3JlZW4ubG9ja09yaWVudGF0aW9uKCdwb3J0cmFpdC1wcmltYXJ5Jyk7XHJcblxyXG5cdFx0XHRsZXQgYXBwaWQgPSBwbHVzLnJ1bnRpbWUuYXBwaWQ7XHJcblx0XHRcdGlmIChhcHBpZCAmJiBhcHBpZC50b0xvY2FsZUxvd2VyQ2FzZSgpICE9IFwiaGJ1aWxkZXJcIikge1xyXG5cdFx0XHRcdHVuaS5yZXF1ZXN0KHtcclxuXHRcdFx0XHRcdHVybDogJ2h0dHBzOi8vdW5pYXBwLmRjbG91ZC5pby91cGRhdGUnLCAvL+ajgOafpeabtOaWsOeahOacjeWKoeWZqOWcsOWdgFxyXG5cdFx0XHRcdFx0ZGF0YToge1xyXG5cdFx0XHRcdFx0XHRhcHBpZDogcGx1cy5ydW50aW1lLmFwcGlkLFxyXG5cdFx0XHRcdFx0XHR2ZXJzaW9uOiBwbHVzLnJ1bnRpbWUudmVyc2lvblxyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdHN1Y2Nlc3M6IChyZXMpID0+IHtcclxuXHRcdFx0XHRcdFx0Y29uc29sZS5sb2coJ3N1Y2Nlc3MnLCByZXMpO1xyXG5cdFx0XHRcdFx0XHRpZiAocmVzLnN0YXR1c0NvZGUgPT0gMjAwICYmIHJlcy5kYXRhLmlzVXBkYXRlKSB7XHJcblx0XHRcdFx0XHRcdFx0bGV0IG9wZW5VcmwgPSBwbHVzLm9zLm5hbWUgPT09ICdpT1MnID8gcmVzLmRhdGEuaU9TIDogcmVzLmRhdGEuQW5kcm9pZDtcclxuXHRcdFx0XHRcdFx0XHQvLyDmj5DphpLnlKjmiLfmm7TmlrBcclxuXHRcdFx0XHRcdFx0XHR1bmkuc2hvd01vZGFsKHtcclxuXHRcdFx0XHRcdFx0XHRcdHRpdGxlOiAn5pu05paw5o+Q56S6JyxcclxuXHRcdFx0XHRcdFx0XHRcdGNvbnRlbnQ6IHJlcy5kYXRhLm5vdGUgPyByZXMuZGF0YS5ub3RlIDogJ+aYr+WQpumAieaLqeabtOaWsCcsXHJcblx0XHRcdFx0XHRcdFx0XHRzdWNjZXNzOiAoc2hvd1Jlc3VsdCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoc2hvd1Jlc3VsdC5jb25maXJtKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0cGx1cy5ydW50aW1lLm9wZW5VUkwob3BlblVybCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSlcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIGRvbU1vZHVsZSA9IHdlZXgucmVxdWlyZU1vZHVsZSgnZG9tJyk7XHJcblx0XHRcdGRvbU1vZHVsZS5hZGRSdWxlKCdmb250RmFjZScsIHtcclxuXHRcdFx0XHQnZm9udEZhbWlseSc6IFwidGV4dGljb25zXCIsXHJcblx0XHRcdFx0J3NyYyc6IFwidXJsKCcuL3N0YXRpYy90ZXh0LWljb24udHRmJylcIlxyXG5cdFx0XHR9KTtcclxuXHRcdFx0Ly8gI2VuZGlmXHJcblx0XHR9LFxyXG5cdFx0b25TaG93OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0Y29uc29sZS5sb2coJ0FwcCBTaG93JylcclxuXHRcdH0sXHJcblx0XHRvbkhpZGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRjb25zb2xlLmxvZygnQXBwIEhpZGUnKVxyXG5cdFx0XHR1bmkuc2V0U3RvcmFnZSh7XHJcblx0XHRcdFx0a2V5OiAnc3RvcmFnZV9zdGF0ZScsXHJcblx0XHRcdFx0ZGF0YTogSlNPTi5zdHJpbmdpZnkodGhpcy4kc3RvcmUuc3RhdGUpLFxyXG5cdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdH1cclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGU+XHJcblx0Lyrmr4/kuKrpobXpnaLlhazlhbFjc3MgKi9cclxuPC9zdHlsZT5cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/*!***********************************************************************************************************!*\
  !*** C:/Users/TG/Documents/HBuilderProjects/livePusherT_android/App.vue?vue&type=style&index=0&lang=css& ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_hbuilderx_packages_webpack_uni_nvue_loader_lib_style_js_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_8_oneOf_0_1_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_postcss_loader_src_index_js_ref_8_oneOf_0_2_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_8_oneOf_0_3_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!./node_modules/@dcloudio/vue-cli-plugin-hbuilderx/packages/webpack-uni-nvue-loader/lib/style.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--8-oneOf-0-1!./node_modules/postcss-loader/src??ref--8-oneOf-0-2!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--8-oneOf-0-3!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!./App.vue?vue&type=style&index=0&lang=css& */ 12);
/* harmony import */ var _D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_hbuilderx_packages_webpack_uni_nvue_loader_lib_style_js_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_8_oneOf_0_1_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_postcss_loader_src_index_js_ref_8_oneOf_0_2_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_8_oneOf_0_3_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_hbuilderx_packages_webpack_uni_nvue_loader_lib_style_js_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_8_oneOf_0_1_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_postcss_loader_src_index_js_ref_8_oneOf_0_2_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_8_oneOf_0_3_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_hbuilderx_packages_webpack_uni_nvue_loader_lib_style_js_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_8_oneOf_0_1_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_postcss_loader_src_index_js_ref_8_oneOf_0_2_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_8_oneOf_0_3_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_hbuilderx_packages_webpack_uni_nvue_loader_lib_style_js_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_8_oneOf_0_1_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_postcss_loader_src_index_js_ref_8_oneOf_0_2_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_8_oneOf_0_3_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));
 /* harmony default export */ __webpack_exports__["default"] = (_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_hbuilderx_packages_webpack_uni_nvue_loader_lib_style_js_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_8_oneOf_0_1_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_postcss_loader_src_index_js_ref_8_oneOf_0_2_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_8_oneOf_0_3_D_Hbuildx_HBuilderX2_7_14_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0___default.a); 

/***/ }),
/* 12 */
/*!*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-hbuilderx/packages/webpack-uni-nvue-loader/lib/style.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--8-oneOf-0-1!./node_modules/postcss-loader/src??ref--8-oneOf-0-2!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--8-oneOf-0-3!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!C:/Users/TG/Documents/HBuilderProjects/livePusherT_android/App.vue?vue&type=style&index=0&lang=css& ***!

/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {}

/***/ }),
/* 13 */
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js ***!
  \**********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode, /* vue-cli only */
  components, // fixed by xxxxxx auto components
  renderjs // fixed by xxxxxx renderjs
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // fixed by xxxxxx auto components
  if (components) {
    if (!options.components) {
      options.components = {}
    }
    var hasOwn = Object.prototype.hasOwnProperty
    for (var name in components) {
      if (hasOwn.call(components, name) && !hasOwn.call(options.components, name)) {
        options.components[name] = components[name]
      }
    }
  }
  // fixed by xxxxxx renderjs
  if (renderjs) {
    (renderjs.beforeCreate || (renderjs.beforeCreate = [])).unshift(function() {
      this[renderjs.__module] = this
    });
    (options.mixins || (options.mixins = [])).push(renderjs)
  }

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),
/* 14 */
/*!*********************************************************************************!*\
  !*** C:/Users/TG/Documents/HBuilderProjects/livePusherT_android/store/index.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 7));\nvar _vuex = _interopRequireDefault(__webpack_require__(/*! vuex */ 15));\nvar _state = _interopRequireDefault(__webpack_require__(/*! ./state.js */ 16));\nvar _getter = _interopRequireDefault(__webpack_require__(/*! ./getter.js */ 17));\nvar _actions = _interopRequireDefault(__webpack_require__(/*! ./actions.js */ 18));\nvar _mutations = _interopRequireDefault(__webpack_require__(/*! ./mutations.js */ 19));\nvar _login = _interopRequireDefault(__webpack_require__(/*! ./model/login.js */ 20));\nvar _liveroom = _interopRequireDefault(__webpack_require__(/*! ./model/liveroom.js */ 21));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n_vue.default.use(_vuex.default);var _default =\nnew _vuex.default.Store({\n  modules: {\n    login: _login.default,\n    liveroom: _liveroom.default },\n\n  state: _state.default,\n  getters: _getter.default,\n  mutations: _mutations.default, //同步\n  actions: _actions.default //异步\n});exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vc3RvcmUvaW5kZXguanMiXSwibmFtZXMiOlsiVnVlIiwidXNlIiwiVnVleCIsIlN0b3JlIiwibW9kdWxlcyIsImxvZ2luIiwibGl2ZXJvb20iLCJzdGF0ZSIsImdldHRlcnMiLCJtdXRhdGlvbnMiLCJhY3Rpb25zIl0sIm1hcHBpbmdzIjoidUZBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyRjtBQUNBQSxhQUFJQyxHQUFKLENBQVFDLGFBQVIsRTtBQUNlLElBQUlBLGNBQUtDLEtBQVQsQ0FBZTtBQUM3QkMsU0FBTyxFQUFDO0FBQ1BDLFNBQUssRUFBTEEsY0FETztBQUVQQyxZQUFRLEVBQVJBLGlCQUZPLEVBRHFCOztBQUs3QkMsT0FBSyxFQUFMQSxjQUw2QjtBQU03QkMsU0FBTyxFQUFQQSxlQU42QjtBQU83QkMsV0FBUyxFQUFUQSxrQkFQNkIsRUFPbkI7QUFDVkMsU0FBTyxFQUFQQSxnQkFSNkIsQ0FRdEI7QUFSc0IsQ0FBZixDIiwiZmlsZSI6IjE0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xyXG5pbXBvcnQgVnVleCBmcm9tICd2dWV4JztcclxuaW1wb3J0IHN0YXRlIGZyb20gJy4vc3RhdGUuanMnXHJcbmltcG9ydCBnZXR0ZXJzIGZyb20gJy4vZ2V0dGVyLmpzJ1xyXG5pbXBvcnQgYWN0aW9ucyBmcm9tICcuL2FjdGlvbnMuanMnXHJcbmltcG9ydCBtdXRhdGlvbnMgZnJvbSAnLi9tdXRhdGlvbnMuanMnXHJcbmltcG9ydCBsb2dpbiBmcm9tICcuL21vZGVsL2xvZ2luLmpzJ1xyXG5pbXBvcnQgbGl2ZXJvb20gZnJvbSAnLi9tb2RlbC9saXZlcm9vbS5qcydcclxuVnVlLnVzZShWdWV4KTtcclxuZXhwb3J0IGRlZmF1bHQgbmV3IFZ1ZXguU3RvcmUoe1xyXG5cdG1vZHVsZXM6e1xyXG5cdFx0bG9naW4sXHJcblx0XHRsaXZlcm9vbVxyXG5cdH0sXHJcblx0c3RhdGUsXHJcblx0Z2V0dGVycyxcclxuXHRtdXRhdGlvbnMsLy/lkIzmraVcclxuXHRhY3Rpb25zLy/lvILmraVcclxufSkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/*!********************************************!*\
  !*** ./node_modules/vuex/dist/vuex.esm.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.install = install;exports.default = exports.createNamespacedHelpers = exports.mapActions = exports.mapGetters = exports.mapMutations = exports.mapState = exports.Store = void 0; /**
                                                                                                                                                                                                                                                                      * vuex v3.0.1
                                                                                                                                                                                                                                                                      * (c) 2017 Evan You
                                                                                                                                                                                                                                                                      * @license MIT
                                                                                                                                                                                                                                                                      */
var applyMixin = function applyMixin(Vue) {
  var version = Number(Vue.version.split('.')[0]);

  if (version >= 2) {
    Vue.mixin({ beforeCreate: vuexInit });
  } else {
    // override init and inject vuex init procedure
    // for 1.x backwards compatibility.
    var _init = Vue.prototype._init;
    Vue.prototype._init = function (options) {
      if (options === void 0) options = {};

      options.init = options.init ?
      [vuexInit].concat(options.init) :
      vuexInit;
      _init.call(this, options);
    };
  }

  /**
     * Vuex init hook, injected into each instances init hooks list.
     */

  function vuexInit() {
    var options = this.$options;
    // store injection
    if (options.store) {
      this.$store = typeof options.store === 'function' ?
      options.store() :
      options.store;
    } else if (options.parent && options.parent.$store) {
      this.$store = options.parent.$store;
    }
  }
};

var devtoolHook =
typeof window !== 'undefined' &&
window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

function devtoolPlugin(store) {
  if (!devtoolHook) {return;}

  store._devtoolHook = devtoolHook;

  devtoolHook.emit('vuex:init', store);

  devtoolHook.on('vuex:travel-to-state', function (targetState) {
    store.replaceState(targetState);
  });

  store.subscribe(function (mutation, state) {
    devtoolHook.emit('vuex:mutation', mutation, state);
  });
}

/**
   * Get the first item that pass the test
   * by second argument function
   *
   * @param {Array} list
   * @param {Function} f
   * @return {*}
   */
/**
       * Deep copy the given object considering circular structure.
       * This function caches all nested objects and its copies.
       * If it detects circular structure, use cached copy to avoid infinite loop.
       *
       * @param {*} obj
       * @param {Array<Object>} cache
       * @return {*}
       */


/**
           * forEach for object
           */
function forEachValue(obj, fn) {
  Object.keys(obj).forEach(function (key) {return fn(obj[key], key);});
}

function isObject(obj) {
  return obj !== null && typeof obj === 'object';
}

function isPromise(val) {
  return val && typeof val.then === 'function';
}

function assert(condition, msg) {
  if (!condition) {throw new Error("[vuex] " + msg);}
}

var Module = function Module(rawModule, runtime) {
  this.runtime = runtime;
  this._children = Object.create(null);
  this._rawModule = rawModule;
  var rawState = rawModule.state;
  this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};
};

var prototypeAccessors$1 = { namespaced: { configurable: true } };

prototypeAccessors$1.namespaced.get = function () {
  return !!this._rawModule.namespaced;
};

Module.prototype.addChild = function addChild(key, module) {
  this._children[key] = module;
};

Module.prototype.removeChild = function removeChild(key) {
  delete this._children[key];
};

Module.prototype.getChild = function getChild(key) {
  return this._children[key];
};

Module.prototype.update = function update(rawModule) {
  this._rawModule.namespaced = rawModule.namespaced;
  if (rawModule.actions) {
    this._rawModule.actions = rawModule.actions;
  }
  if (rawModule.mutations) {
    this._rawModule.mutations = rawModule.mutations;
  }
  if (rawModule.getters) {
    this._rawModule.getters = rawModule.getters;
  }
};

Module.prototype.forEachChild = function forEachChild(fn) {
  forEachValue(this._children, fn);
};

Module.prototype.forEachGetter = function forEachGetter(fn) {
  if (this._rawModule.getters) {
    forEachValue(this._rawModule.getters, fn);
  }
};

Module.prototype.forEachAction = function forEachAction(fn) {
  if (this._rawModule.actions) {
    forEachValue(this._rawModule.actions, fn);
  }
};

Module.prototype.forEachMutation = function forEachMutation(fn) {
  if (this._rawModule.mutations) {
    forEachValue(this._rawModule.mutations, fn);
  }
};

Object.defineProperties(Module.prototype, prototypeAccessors$1);

var ModuleCollection = function ModuleCollection(rawRootModule) {
  // register root module (Vuex.Store options)
  this.register([], rawRootModule, false);
};

ModuleCollection.prototype.get = function get(path) {
  return path.reduce(function (module, key) {
    return module.getChild(key);
  }, this.root);
};

ModuleCollection.prototype.getNamespace = function getNamespace(path) {
  var module = this.root;
  return path.reduce(function (namespace, key) {
    module = module.getChild(key);
    return namespace + (module.namespaced ? key + '/' : '');
  }, '');
};

ModuleCollection.prototype.update = function update$1(rawRootModule) {
  update([], this.root, rawRootModule);
};

ModuleCollection.prototype.register = function register(path, rawModule, runtime) {
  var this$1 = this;
  if (runtime === void 0) runtime = true;

  if (true) {
    assertRawModule(path, rawModule);
  }

  var newModule = new Module(rawModule, runtime);
  if (path.length === 0) {
    this.root = newModule;
  } else {
    var parent = this.get(path.slice(0, -1));
    parent.addChild(path[path.length - 1], newModule);
  }

  // register nested modules
  if (rawModule.modules) {
    forEachValue(rawModule.modules, function (rawChildModule, key) {
      this$1.register(path.concat(key), rawChildModule, runtime);
    });
  }
};

ModuleCollection.prototype.unregister = function unregister(path) {
  var parent = this.get(path.slice(0, -1));
  var key = path[path.length - 1];
  if (!parent.getChild(key).runtime) {return;}

  parent.removeChild(key);
};

function update(path, targetModule, newModule) {
  if (true) {
    assertRawModule(path, newModule);
  }

  // update target module
  targetModule.update(newModule);

  // update nested modules
  if (newModule.modules) {
    for (var key in newModule.modules) {
      if (!targetModule.getChild(key)) {
        if (true) {
          console.warn(
          "[vuex] trying to add a new module '" + key + "' on hot reloading, " +
          'manual reload is needed');

        }
        return;
      }
      update(
      path.concat(key),
      targetModule.getChild(key),
      newModule.modules[key]);

    }
  }
}

var functionAssert = {
  assert: function assert(value) {return typeof value === 'function';},
  expected: 'function' };


var objectAssert = {
  assert: function assert(value) {return typeof value === 'function' ||
    typeof value === 'object' && typeof value.handler === 'function';},
  expected: 'function or object with "handler" function' };


var assertTypes = {
  getters: functionAssert,
  mutations: functionAssert,
  actions: objectAssert };


function assertRawModule(path, rawModule) {
  Object.keys(assertTypes).forEach(function (key) {
    if (!rawModule[key]) {return;}

    var assertOptions = assertTypes[key];

    forEachValue(rawModule[key], function (value, type) {
      assert(
      assertOptions.assert(value),
      makeAssertionMessage(path, key, type, value, assertOptions.expected));

    });
  });
}

function makeAssertionMessage(path, key, type, value, expected) {
  var buf = key + " should be " + expected + " but \"" + key + "." + type + "\"";
  if (path.length > 0) {
    buf += " in module \"" + path.join('.') + "\"";
  }
  buf += " is " + JSON.stringify(value) + ".";
  return buf;
}

var Vue; // bind on install

var Store = function Store(options) {
  var this$1 = this;
  if (options === void 0) options = {};

  // Auto install if it is not done yet and `window` has `Vue`.
  // To allow users to avoid auto-installation in some cases,
  // this code should be placed here. See #731
  if (!Vue && typeof window !== 'undefined' && window.Vue) {
    install(window.Vue);
  }

  if (true) {
    assert(Vue, "must call Vue.use(Vuex) before creating a store instance.");
    assert(typeof Promise !== 'undefined', "vuex requires a Promise polyfill in this browser.");
    assert(this instanceof Store, "Store must be called with the new operator.");
  }

  var plugins = options.plugins;if (plugins === void 0) plugins = [];
  var strict = options.strict;if (strict === void 0) strict = false;

  var state = options.state;if (state === void 0) state = {};
  if (typeof state === 'function') {
    state = state() || {};
  }

  // store internal state
  this._committing = false;
  this._actions = Object.create(null);
  this._actionSubscribers = [];
  this._mutations = Object.create(null);
  this._wrappedGetters = Object.create(null);
  this._modules = new ModuleCollection(options);
  this._modulesNamespaceMap = Object.create(null);
  this._subscribers = [];
  this._watcherVM = new Vue();

  // bind commit and dispatch to self
  var store = this;
  var ref = this;
  var dispatch = ref.dispatch;
  var commit = ref.commit;
  this.dispatch = function boundDispatch(type, payload) {
    return dispatch.call(store, type, payload);
  };
  this.commit = function boundCommit(type, payload, options) {
    return commit.call(store, type, payload, options);
  };

  // strict mode
  this.strict = strict;

  // init root module.
  // this also recursively registers all sub-modules
  // and collects all module getters inside this._wrappedGetters
  installModule(this, state, [], this._modules.root);

  // initialize the store vm, which is responsible for the reactivity
  // (also registers _wrappedGetters as computed properties)
  resetStoreVM(this, state);

  // apply plugins
  plugins.forEach(function (plugin) {return plugin(this$1);});

  if (Vue.config.devtools) {
    devtoolPlugin(this);
  }
};exports.Store = Store;

var prototypeAccessors = { state: { configurable: true } };

prototypeAccessors.state.get = function () {
  return this._vm._data.$$state;
};

prototypeAccessors.state.set = function (v) {
  if (true) {
    assert(false, "Use store.replaceState() to explicit replace store state.");
  }
};

Store.prototype.commit = function commit(_type, _payload, _options) {
  var this$1 = this;

  // check object-style commit
  var ref = unifyObjectStyle(_type, _payload, _options);
  var type = ref.type;
  var payload = ref.payload;
  var options = ref.options;

  var mutation = { type: type, payload: payload };
  var entry = this._mutations[type];
  if (!entry) {
    if (true) {
      console.error("[vuex] unknown mutation type: " + type);
    }
    return;
  }
  this._withCommit(function () {
    entry.forEach(function commitIterator(handler) {
      handler(payload);
    });
  });
  this._subscribers.forEach(function (sub) {return sub(mutation, this$1.state);});

  if (
   true &&
  options && options.silent)
  {
    console.warn(
    "[vuex] mutation type: " + type + ". Silent option has been removed. " +
    'Use the filter functionality in the vue-devtools');

  }
};

Store.prototype.dispatch = function dispatch(_type, _payload) {
  var this$1 = this;

  // check object-style dispatch
  var ref = unifyObjectStyle(_type, _payload);
  var type = ref.type;
  var payload = ref.payload;

  var action = { type: type, payload: payload };
  var entry = this._actions[type];
  if (!entry) {
    if (true) {
      console.error("[vuex] unknown action type: " + type);
    }
    return;
  }

  this._actionSubscribers.forEach(function (sub) {return sub(action, this$1.state);});

  return entry.length > 1 ?
  Promise.all(entry.map(function (handler) {return handler(payload);})) :
  entry[0](payload);
};

Store.prototype.subscribe = function subscribe(fn) {
  return genericSubscribe(fn, this._subscribers);
};

Store.prototype.subscribeAction = function subscribeAction(fn) {
  return genericSubscribe(fn, this._actionSubscribers);
};

Store.prototype.watch = function watch(getter, cb, options) {
  var this$1 = this;

  if (true) {
    assert(typeof getter === 'function', "store.watch only accepts a function.");
  }
  return this._watcherVM.$watch(function () {return getter(this$1.state, this$1.getters);}, cb, options);
};

Store.prototype.replaceState = function replaceState(state) {
  var this$1 = this;

  this._withCommit(function () {
    this$1._vm._data.$$state = state;
  });
};

Store.prototype.registerModule = function registerModule(path, rawModule, options) {
  if (options === void 0) options = {};

  if (typeof path === 'string') {path = [path];}

  if (true) {
    assert(Array.isArray(path), "module path must be a string or an Array.");
    assert(path.length > 0, 'cannot register the root module by using registerModule.');
  }

  this._modules.register(path, rawModule);
  installModule(this, this.state, path, this._modules.get(path), options.preserveState);
  // reset store to update getters...
  resetStoreVM(this, this.state);
};

Store.prototype.unregisterModule = function unregisterModule(path) {
  var this$1 = this;

  if (typeof path === 'string') {path = [path];}

  if (true) {
    assert(Array.isArray(path), "module path must be a string or an Array.");
  }

  this._modules.unregister(path);
  this._withCommit(function () {
    var parentState = getNestedState(this$1.state, path.slice(0, -1));
    Vue.delete(parentState, path[path.length - 1]);
  });
  resetStore(this);
};

Store.prototype.hotUpdate = function hotUpdate(newOptions) {
  this._modules.update(newOptions);
  resetStore(this, true);
};

Store.prototype._withCommit = function _withCommit(fn) {
  var committing = this._committing;
  this._committing = true;
  fn();
  this._committing = committing;
};

Object.defineProperties(Store.prototype, prototypeAccessors);

function genericSubscribe(fn, subs) {
  if (subs.indexOf(fn) < 0) {
    subs.push(fn);
  }
  return function () {
    var i = subs.indexOf(fn);
    if (i > -1) {
      subs.splice(i, 1);
    }
  };
}

function resetStore(store, hot) {
  store._actions = Object.create(null);
  store._mutations = Object.create(null);
  store._wrappedGetters = Object.create(null);
  store._modulesNamespaceMap = Object.create(null);
  var state = store.state;
  // init all modules
  installModule(store, state, [], store._modules.root, true);
  // reset vm
  resetStoreVM(store, state, hot);
}

function resetStoreVM(store, state, hot) {
  var oldVm = store._vm;

  // bind store public getters
  store.getters = {};
  var wrappedGetters = store._wrappedGetters;
  var computed = {};
  forEachValue(wrappedGetters, function (fn, key) {
    // use computed to leverage its lazy-caching mechanism
    computed[key] = function () {return fn(store);};
    Object.defineProperty(store.getters, key, {
      get: function get() {return store._vm[key];},
      enumerable: true // for local getters
    });
  });

  // use a Vue instance to store the state tree
  // suppress warnings just in case the user has added
  // some funky global mixins
  var silent = Vue.config.silent;
  Vue.config.silent = true;
  store._vm = new Vue({
    data: {
      $$state: state },

    computed: computed });

  Vue.config.silent = silent;

  // enable strict mode for new vm
  if (store.strict) {
    enableStrictMode(store);
  }

  if (oldVm) {
    if (hot) {
      // dispatch changes in all subscribed watchers
      // to force getter re-evaluation for hot reloading.
      store._withCommit(function () {
        oldVm._data.$$state = null;
      });
    }
    Vue.nextTick(function () {return oldVm.$destroy();});
  }
}

function installModule(store, rootState, path, module, hot) {
  var isRoot = !path.length;
  var namespace = store._modules.getNamespace(path);

  // register in namespace map
  if (module.namespaced) {
    store._modulesNamespaceMap[namespace] = module;
  }

  // set state
  if (!isRoot && !hot) {
    var parentState = getNestedState(rootState, path.slice(0, -1));
    var moduleName = path[path.length - 1];
    store._withCommit(function () {
      Vue.set(parentState, moduleName, module.state);
    });
  }

  var local = module.context = makeLocalContext(store, namespace, path);

  module.forEachMutation(function (mutation, key) {
    var namespacedType = namespace + key;
    registerMutation(store, namespacedType, mutation, local);
  });

  module.forEachAction(function (action, key) {
    var type = action.root ? key : namespace + key;
    var handler = action.handler || action;
    registerAction(store, type, handler, local);
  });

  module.forEachGetter(function (getter, key) {
    var namespacedType = namespace + key;
    registerGetter(store, namespacedType, getter, local);
  });

  module.forEachChild(function (child, key) {
    installModule(store, rootState, path.concat(key), child, hot);
  });
}

/**
   * make localized dispatch, commit, getters and state
   * if there is no namespace, just use root ones
   */
function makeLocalContext(store, namespace, path) {
  var noNamespace = namespace === '';

  var local = {
    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {
      var args = unifyObjectStyle(_type, _payload, _options);
      var payload = args.payload;
      var options = args.options;
      var type = args.type;

      if (!options || !options.root) {
        type = namespace + type;
        if ( true && !store._actions[type]) {
          console.error("[vuex] unknown local action type: " + args.type + ", global type: " + type);
          return;
        }
      }

      return store.dispatch(type, payload);
    },

    commit: noNamespace ? store.commit : function (_type, _payload, _options) {
      var args = unifyObjectStyle(_type, _payload, _options);
      var payload = args.payload;
      var options = args.options;
      var type = args.type;

      if (!options || !options.root) {
        type = namespace + type;
        if ( true && !store._mutations[type]) {
          console.error("[vuex] unknown local mutation type: " + args.type + ", global type: " + type);
          return;
        }
      }

      store.commit(type, payload, options);
    } };


  // getters and state object must be gotten lazily
  // because they will be changed by vm update
  Object.defineProperties(local, {
    getters: {
      get: noNamespace ?
      function () {return store.getters;} :
      function () {return makeLocalGetters(store, namespace);} },

    state: {
      get: function get() {return getNestedState(store.state, path);} } });



  return local;
}

function makeLocalGetters(store, namespace) {
  var gettersProxy = {};

  var splitPos = namespace.length;
  Object.keys(store.getters).forEach(function (type) {
    // skip if the target getter is not match this namespace
    if (type.slice(0, splitPos) !== namespace) {return;}

    // extract local getter type
    var localType = type.slice(splitPos);

    // Add a port to the getters proxy.
    // Define as getter property because
    // we do not want to evaluate the getters in this time.
    Object.defineProperty(gettersProxy, localType, {
      get: function get() {return store.getters[type];},
      enumerable: true });

  });

  return gettersProxy;
}

function registerMutation(store, type, handler, local) {
  var entry = store._mutations[type] || (store._mutations[type] = []);
  entry.push(function wrappedMutationHandler(payload) {
    handler.call(store, local.state, payload);
  });
}

function registerAction(store, type, handler, local) {
  var entry = store._actions[type] || (store._actions[type] = []);
  entry.push(function wrappedActionHandler(payload, cb) {
    var res = handler.call(store, {
      dispatch: local.dispatch,
      commit: local.commit,
      getters: local.getters,
      state: local.state,
      rootGetters: store.getters,
      rootState: store.state },
    payload, cb);
    if (!isPromise(res)) {
      res = Promise.resolve(res);
    }
    if (store._devtoolHook) {
      return res.catch(function (err) {
        store._devtoolHook.emit('vuex:error', err);
        throw err;
      });
    } else {
      return res;
    }
  });
}

function registerGetter(store, type, rawGetter, local) {
  if (store._wrappedGetters[type]) {
    if (true) {
      console.error("[vuex] duplicate getter key: " + type);
    }
    return;
  }
  store._wrappedGetters[type] = function wrappedGetter(store) {
    return rawGetter(
    local.state, // local state
    local.getters, // local getters
    store.state, // root state
    store.getters // root getters
    );
  };
}

function enableStrictMode(store) {
  store._vm.$watch(function () {return this._data.$$state;}, function () {
    if (true) {
      assert(store._committing, "Do not mutate vuex store state outside mutation handlers.");
    }
  }, { deep: true, sync: true });
}

function getNestedState(state, path) {
  return path.length ?
  path.reduce(function (state, key) {return state[key];}, state) :
  state;
}

function unifyObjectStyle(type, payload, options) {
  if (isObject(type) && type.type) {
    options = payload;
    payload = type;
    type = type.type;
  }

  if (true) {
    assert(typeof type === 'string', "Expects string as the type, but found " + typeof type + ".");
  }

  return { type: type, payload: payload, options: options };
}

function install(_Vue) {
  if (Vue && _Vue === Vue) {
    if (true) {
      console.error(
      '[vuex] already installed. Vue.use(Vuex) should be called only once.');

    }
    return;
  }
  Vue = _Vue;
  applyMixin(Vue);
}

var mapState = normalizeNamespace(function (namespace, states) {
  var res = {};
  normalizeMap(states).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedState() {
      var state = this.$store.state;
      var getters = this.$store.getters;
      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapState', namespace);
        if (!module) {
          return;
        }
        state = module.context.state;
        getters = module.context.getters;
      }
      return typeof val === 'function' ?
      val.call(this, state, getters) :
      state[val];
    };
    // mark vuex getter for devtools
    res[key].vuex = true;
  });
  return res;
});exports.mapState = mapState;

var mapMutations = normalizeNamespace(function (namespace, mutations) {
  var res = {};
  normalizeMap(mutations).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedMutation() {
      var args = [],len = arguments.length;
      while (len--) {args[len] = arguments[len];}

      var commit = this.$store.commit;
      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapMutations', namespace);
        if (!module) {
          return;
        }
        commit = module.context.commit;
      }
      return typeof val === 'function' ?
      val.apply(this, [commit].concat(args)) :
      commit.apply(this.$store, [val].concat(args));
    };
  });
  return res;
});exports.mapMutations = mapMutations;

var mapGetters = normalizeNamespace(function (namespace, getters) {
  var res = {};
  normalizeMap(getters).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    val = namespace + val;
    res[key] = function mappedGetter() {
      if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {
        return;
      }
      if ( true && !(val in this.$store.getters)) {
        console.error("[vuex] unknown getter: " + val);
        return;
      }
      return this.$store.getters[val];
    };
    // mark vuex getter for devtools
    res[key].vuex = true;
  });
  return res;
});exports.mapGetters = mapGetters;

var mapActions = normalizeNamespace(function (namespace, actions) {
  var res = {};
  normalizeMap(actions).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedAction() {
      var args = [],len = arguments.length;
      while (len--) {args[len] = arguments[len];}

      var dispatch = this.$store.dispatch;
      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapActions', namespace);
        if (!module) {
          return;
        }
        dispatch = module.context.dispatch;
      }
      return typeof val === 'function' ?
      val.apply(this, [dispatch].concat(args)) :
      dispatch.apply(this.$store, [val].concat(args));
    };
  });
  return res;
});exports.mapActions = mapActions;

var createNamespacedHelpers = function createNamespacedHelpers(namespace) {return {
    mapState: mapState.bind(null, namespace),
    mapGetters: mapGetters.bind(null, namespace),
    mapMutations: mapMutations.bind(null, namespace),
    mapActions: mapActions.bind(null, namespace) };
};exports.createNamespacedHelpers = createNamespacedHelpers;

function normalizeMap(map) {
  return Array.isArray(map) ?
  map.map(function (key) {return { key: key, val: key };}) :
  Object.keys(map).map(function (key) {return { key: key, val: map[key] };});
}

function normalizeNamespace(fn) {
  return function (namespace, map) {
    if (typeof namespace !== 'string') {
      map = namespace;
      namespace = '';
    } else if (namespace.charAt(namespace.length - 1) !== '/') {
      namespace += '/';
    }
    return fn(namespace, map);
  };
}

function getModuleByNamespace(store, helper, namespace) {
  var module = store._modulesNamespaceMap[namespace];
  if ( true && !module) {
    console.error("[vuex] module namespace not found in " + helper + "(): " + namespace);
  }
  return module;
}

var index_esm = {
  Store: Store,
  install: install,
  version: '3.0.1',
  mapState: mapState,
  mapMutations: mapMutations,
  mapGetters: mapGetters,
  mapActions: mapActions,
  createNamespacedHelpers: createNamespacedHelpers };var _default =



index_esm;exports.default = _default;

/***/ }),
/* 16 */
/*!*********************************************************************************!*\
  !*** C:/Users/TG/Documents/HBuilderProjects/livePusherT_android/store/state.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var state = { //所有状态以all开头\n  alltoast: false, //quanju 提示框 模拟  uni.showtoast\n  allLoginInfo: null, //登录成功信息\n  allHomeVideoData: null, //首页推荐视频\n  allisRelogin: false, //是否断线重连 默认false\n  allTryLoginData: { msg: null, num: null }, //断线重连前的操作  保存其 数据及其协议 断线重连之后 重复调用该方法\n  allChatList: null, //初始聊天列表\n  allChatPrice: { anchoridx: null, price: null }, //聊天价格\n  allChatObjToObjList: null, //1v1聊天列表\n  allchatObjInfo: null, //点击聊天  对方的头像 id 等信息\n  allNoGiftList: null, //未分类礼物列表\n  allFollowStatus: null, //个人页面关注状态 false 未关注 true 关注   视频页面公共\n  allBlackStatus: null, //\t1-已拉黑 0-未拉黑\n  allSexStatus: null, //喜好暂存状态  修改成功 更新 本地存储\n  allRoomid: null, //直播间页面 房间id\n  allLiveidx: null, //直播间的主播id\n  allLiveRoomNum: 0, //直播间的人数\n  allLiveChatList: [], //直播间聊天消息列表\n  allLiveGiftList: [], //直播间聊天\n  allLiveRevideoUrl: null, //直播视频回放接口\n  allChatPageIsNew: null, //在chat页面使用 判断是否有新消息\n  allIsChatpop: false, //是否在私人聊天页\n  allIsStartUp: false, //是否在启动页 在 不进行断线重连\n  allIsTravalUser: false, //是否为游客  默认不是游客\n  allSystemMsg: '', //系统消息\n  allPusherAddress: '', //推流地址\n\n\n  isload: false,\n  alllogin: false,\n  id: 33333,\n  name: '游客' };var _default =\n\nstate;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vc3RvcmUvc3RhdGUuanMiXSwibmFtZXMiOlsic3RhdGUiLCJhbGx0b2FzdCIsImFsbExvZ2luSW5mbyIsImFsbEhvbWVWaWRlb0RhdGEiLCJhbGxpc1JlbG9naW4iLCJhbGxUcnlMb2dpbkRhdGEiLCJtc2ciLCJudW0iLCJhbGxDaGF0TGlzdCIsImFsbENoYXRQcmljZSIsImFuY2hvcmlkeCIsInByaWNlIiwiYWxsQ2hhdE9ialRvT2JqTGlzdCIsImFsbGNoYXRPYmpJbmZvIiwiYWxsTm9HaWZ0TGlzdCIsImFsbEZvbGxvd1N0YXR1cyIsImFsbEJsYWNrU3RhdHVzIiwiYWxsU2V4U3RhdHVzIiwiYWxsUm9vbWlkIiwiYWxsTGl2ZWlkeCIsImFsbExpdmVSb29tTnVtIiwiYWxsTGl2ZUNoYXRMaXN0IiwiYWxsTGl2ZUdpZnRMaXN0IiwiYWxsTGl2ZVJldmlkZW9VcmwiLCJhbGxDaGF0UGFnZUlzTmV3IiwiYWxsSXNDaGF0cG9wIiwiYWxsSXNTdGFydFVwIiwiYWxsSXNUcmF2YWxVc2VyIiwiYWxsU3lzdGVtTXNnIiwiYWxsUHVzaGVyQWRkcmVzcyIsImlzbG9hZCIsImFsbGxvZ2luIiwiaWQiLCJuYW1lIl0sIm1hcHBpbmdzIjoidUZBQUEsSUFBTUEsS0FBSyxHQUFFLEVBQUM7QUFDYkMsVUFBUSxFQUFDLEtBREcsRUFDRztBQUNmQyxjQUFZLEVBQUMsSUFGRCxFQUVNO0FBQ2xCQyxrQkFBZ0IsRUFBQyxJQUhMLEVBR1U7QUFDdEJDLGNBQVksRUFBQyxLQUpELEVBSU87QUFDbkJDLGlCQUFlLEVBQUMsRUFBQ0MsR0FBRyxFQUFDLElBQUwsRUFBVUMsR0FBRyxFQUFDLElBQWQsRUFMSixFQUt3QjtBQUNwQ0MsYUFBVyxFQUFDLElBTkEsRUFNSztBQUNqQkMsY0FBWSxFQUFDLEVBQUNDLFNBQVMsRUFBQyxJQUFYLEVBQWdCQyxLQUFLLEVBQUMsSUFBdEIsRUFQRCxFQU82QjtBQUN6Q0MscUJBQW1CLEVBQUMsSUFSUixFQVFhO0FBQ3pCQyxnQkFBYyxFQUFDLElBVEgsRUFTUTtBQUNwQkMsZUFBYSxFQUFDLElBVkYsRUFVTztBQUNuQkMsaUJBQWUsRUFBQyxJQVhKLEVBV1M7QUFDckJDLGdCQUFjLEVBQUMsSUFaSCxFQVlRO0FBQ3BCQyxjQUFZLEVBQUMsSUFiRCxFQWFNO0FBQ2xCQyxXQUFTLEVBQUMsSUFkRSxFQWNHO0FBQ2ZDLFlBQVUsRUFBQyxJQWZDLEVBZUk7QUFDaEJDLGdCQUFjLEVBQUMsQ0FoQkgsRUFnQks7QUFDakJDLGlCQUFlLEVBQUMsRUFqQkosRUFpQk87QUFDbkJDLGlCQUFlLEVBQUMsRUFsQkosRUFrQk87QUFDbkJDLG1CQUFpQixFQUFDLElBbkJOLEVBbUJXO0FBQ3ZCQyxrQkFBZ0IsRUFBQyxJQXBCTCxFQW9CVTtBQUN0QkMsY0FBWSxFQUFDLEtBckJELEVBcUJPO0FBQ25CQyxjQUFZLEVBQUMsS0F0QkQsRUFzQk87QUFDbkJDLGlCQUFlLEVBQUMsS0F2QkosRUF1QlU7QUFDdEJDLGNBQVksRUFBQyxFQXhCRCxFQXdCSTtBQUNoQkMsa0JBQWdCLEVBQUMsRUF6QkwsRUF5QlE7OztBQUdwQkMsUUFBTSxFQUFDLEtBNUJLO0FBNkJaQyxVQUFRLEVBQUMsS0E3Qkc7QUE4QlpDLElBQUUsRUFBQyxLQTlCUztBQStCWkMsTUFBSSxFQUFDLElBL0JPLEVBQWIsQzs7QUFpQ2VqQyxLIiwiZmlsZSI6IjE2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgc3RhdGUgPXsvL+aJgOacieeKtuaAgeS7pWFsbOW8gOWktFxyXG5cdGFsbHRvYXN0OmZhbHNlLC8vcXVhbmp1IOaPkOekuuahhiDmqKHmi58gIHVuaS5zaG93dG9hc3RcclxuXHRhbGxMb2dpbkluZm86bnVsbCwvL+eZu+W9leaIkOWKn+S/oeaBr1xyXG5cdGFsbEhvbWVWaWRlb0RhdGE6bnVsbCwvL+mmlumhteaOqOiNkOinhumikVxyXG5cdGFsbGlzUmVsb2dpbjpmYWxzZSwvL+aYr+WQpuaWree6v+mHjei/niDpu5jorqRmYWxzZVxyXG5cdGFsbFRyeUxvZ2luRGF0YTp7bXNnOm51bGwsbnVtOm51bGx9LC8v5pat57q/6YeN6L+e5YmN55qE5pON5L2cICDkv53lrZjlhbYg5pWw5o2u5Y+K5YW25Y2P6K6uIOaWree6v+mHjei/nuS5i+WQjiDph43lpI3osIPnlKjor6Xmlrnms5VcclxuXHRhbGxDaGF0TGlzdDpudWxsLC8v5Yid5aeL6IGK5aSp5YiX6KGoXHJcblx0YWxsQ2hhdFByaWNlOnthbmNob3JpZHg6bnVsbCxwcmljZTpudWxsfSwvL+iBiuWkqeS7t+agvFxyXG5cdGFsbENoYXRPYmpUb09iakxpc3Q6bnVsbCwvLzF2MeiBiuWkqeWIl+ihqFxyXG5cdGFsbGNoYXRPYmpJbmZvOm51bGwsLy/ngrnlh7vogYrlpKkgIOWvueaWueeahOWktOWDjyBpZCDnrYnkv6Hmga9cclxuXHRhbGxOb0dpZnRMaXN0Om51bGwsLy/mnKrliIbnsbvnpLznianliJfooahcclxuXHRhbGxGb2xsb3dTdGF0dXM6bnVsbCwvL+S4quS6uumhtemdouWFs+azqOeKtuaAgSBmYWxzZSDmnKrlhbPms6ggdHJ1ZSDlhbPms6ggICDop4bpopHpobXpnaLlhazlhbFcclxuXHRhbGxCbGFja1N0YXR1czpudWxsLC8vXHQxLeW3suaLiem7kSAwLeacquaLiem7kVxyXG5cdGFsbFNleFN0YXR1czpudWxsLC8v5Zac5aW95pqC5a2Y54q25oCBICDkv67mlLnmiJDlip8g5pu05pawIOacrOWcsOWtmOWCqFxyXG5cdGFsbFJvb21pZDpudWxsLC8v55u05pKt6Ze06aG16Z2iIOaIv+mXtGlkXHJcblx0YWxsTGl2ZWlkeDpudWxsLC8v55u05pKt6Ze055qE5Li75pKtaWRcclxuXHRhbGxMaXZlUm9vbU51bTowLC8v55u05pKt6Ze055qE5Lq65pWwXHJcblx0YWxsTGl2ZUNoYXRMaXN0OltdLC8v55u05pKt6Ze06IGK5aSp5raI5oGv5YiX6KGoXHJcblx0YWxsTGl2ZUdpZnRMaXN0OltdLC8v55u05pKt6Ze06IGK5aSpXHJcblx0YWxsTGl2ZVJldmlkZW9Vcmw6bnVsbCwvL+ebtOaSreinhumikeWbnuaUvuaOpeWPo1xyXG5cdGFsbENoYXRQYWdlSXNOZXc6bnVsbCwvL+WcqGNoYXTpobXpnaLkvb/nlKgg5Yik5pat5piv5ZCm5pyJ5paw5raI5oGvXHJcblx0YWxsSXNDaGF0cG9wOmZhbHNlLC8v5piv5ZCm5Zyo56eB5Lq66IGK5aSp6aG1XHJcblx0YWxsSXNTdGFydFVwOmZhbHNlLC8v5piv5ZCm5Zyo5ZCv5Yqo6aG1IOWcqCDkuI3ov5vooYzmlq3nur/ph43ov55cclxuXHRhbGxJc1RyYXZhbFVzZXI6ZmFsc2UsLy/mmK/lkKbkuLrmuLjlrqIgIOm7mOiupOS4jeaYr+a4uOWuolxyXG5cdGFsbFN5c3RlbU1zZzonJywvL+ezu+e7n+a2iOaBr1xyXG5cdGFsbFB1c2hlckFkZHJlc3M6JycsLy/mjqjmtYHlnLDlnYBcclxuXHJcblxyXG5cdGlzbG9hZDpmYWxzZSxcclxuXHRhbGxsb2dpbjpmYWxzZSxcclxuXHRpZDozMzMzMyxcclxuXHRuYW1lOifmuLjlrqInXHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgc3RhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */
/*!**********************************************************************************!*\
  !*** C:/Users/TG/Documents/HBuilderProjects/livePusherT_android/store/getter.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var getters = {\n  Allalltoast: function Allalltoast(state) {\n    // console.log(state)\n    return state.alltoast;\n  },\n  AllallLoginInfo: function AllallLoginInfo(state) {\n    // console.log(state)\n    return state.allLoginInfo;\n  },\n  AllallHomeVideoData: function AllallHomeVideoData(state) {\n    // console.log(state)\n    return state.allHomeVideoData;\n  },\n  AllallisRelogin: function AllallisRelogin(state) {\n    // console.log(state)\n    return state.allisRelogin;\n  },\n  AllallTryLoginData: function AllallTryLoginData(state) {\n    // console.log(state)\n    return state.allTryLoginData;\n  },\n  AllallChatList: function AllallChatList(state) {\n    // console.log(state)\n    return state.allChatList;\n  },\n  AllallChatPrice: function AllallChatPrice(state) {\n    // console.log(state)\n    return state.allChatPrice;\n  },\n  AllallChatObjToObjList: function AllallChatObjToObjList(state) {\n    // console.log(state)\n    return state.allChatObjToObjList;\n  },\n  AllallchatObjInfo: function AllallchatObjInfo(state) {\n    // console.log(state)\n    return state.allchatObjInfo;\n  },\n  AllallNoGiftList: function AllallNoGiftList(state) {\n    // console.log(state)\n    return state.allNoGiftList;\n  },\n  AllallFollowStatus: function AllallFollowStatus(state) {\n    // console.log(state)\n    return state.allFollowStatus;\n  },\n  AllallBlackStatus: function AllallBlackStatus(state) {\n    // console.log(state)\n    return state.allBlackStatus;\n  },\n  AllallSexStatus: function AllallSexStatus(state) {\n    // console.log(state)\n    return state.allSexStatus;\n  },\n  AllallRoomid: function AllallRoomid(state) {\n    // console.log(state)\n    return state.allRoomid;\n  },\n  AllallLiveidx: function AllallLiveidx(state) {\n    // console.log(state)\n    return state.allLiveidx;\n  },\n  AllallLiveRoomNum: function AllallLiveRoomNum(state) {\n    // console.log(state)\n    return state.allLiveRoomNum;\n  },\n  AllallLiveChatList: function AllallLiveChatList(state) {\n    // console.log(state)\n    return state.allLiveChatList;\n  },\n  AllallLiveGiftList: function AllallLiveGiftList(state) {\n    // console.log(state)\n    return state.allLiveGiftList;\n  },\n  AllallLiveRevideoUrl: function AllallLiveRevideoUrl(state) {\n    // console.log(state)\n    return state.allLiveRevideoUrl;\n  },\n  AllallChatPageIsNew: function AllallChatPageIsNew(state) {\n    // console.log(state)\n    return state.allChatPageIsNew;\n  },\n  AllallIsChatpop: function AllallIsChatpop(state) {\n    // console.log(state)\n    return state.allIsChatpop;\n  },\n  AllallIsStartUp: function AllallIsStartUp(state) {\n    // console.log(state)\n    return state.allIsStartUp;\n  },\n  AllallIsTravalUser: function AllallIsTravalUser(state) {\n    // console.log(state)\n    return state.allIsTravalUser;\n  },\n  AllallSystemMsg: function AllallSystemMsg(state) {\n    // console.log(state)\n    return state.allSystemMsg;\n  },\n  AllallPusherAddress: function AllallPusherAddress(state) {\n    // console.log(state)\n    return state.allPusherAddress;\n  },\n\n\n  Allid: function Allid(state) {\n    // console.log(state)\n    return state.id;\n  } };var _default =\n\ngetters;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vc3RvcmUvZ2V0dGVyLmpzIl0sIm5hbWVzIjpbImdldHRlcnMiLCJBbGxhbGx0b2FzdCIsInN0YXRlIiwiYWxsdG9hc3QiLCJBbGxhbGxMb2dpbkluZm8iLCJhbGxMb2dpbkluZm8iLCJBbGxhbGxIb21lVmlkZW9EYXRhIiwiYWxsSG9tZVZpZGVvRGF0YSIsIkFsbGFsbGlzUmVsb2dpbiIsImFsbGlzUmVsb2dpbiIsIkFsbGFsbFRyeUxvZ2luRGF0YSIsImFsbFRyeUxvZ2luRGF0YSIsIkFsbGFsbENoYXRMaXN0IiwiYWxsQ2hhdExpc3QiLCJBbGxhbGxDaGF0UHJpY2UiLCJhbGxDaGF0UHJpY2UiLCJBbGxhbGxDaGF0T2JqVG9PYmpMaXN0IiwiYWxsQ2hhdE9ialRvT2JqTGlzdCIsIkFsbGFsbGNoYXRPYmpJbmZvIiwiYWxsY2hhdE9iakluZm8iLCJBbGxhbGxOb0dpZnRMaXN0IiwiYWxsTm9HaWZ0TGlzdCIsIkFsbGFsbEZvbGxvd1N0YXR1cyIsImFsbEZvbGxvd1N0YXR1cyIsIkFsbGFsbEJsYWNrU3RhdHVzIiwiYWxsQmxhY2tTdGF0dXMiLCJBbGxhbGxTZXhTdGF0dXMiLCJhbGxTZXhTdGF0dXMiLCJBbGxhbGxSb29taWQiLCJhbGxSb29taWQiLCJBbGxhbGxMaXZlaWR4IiwiYWxsTGl2ZWlkeCIsIkFsbGFsbExpdmVSb29tTnVtIiwiYWxsTGl2ZVJvb21OdW0iLCJBbGxhbGxMaXZlQ2hhdExpc3QiLCJhbGxMaXZlQ2hhdExpc3QiLCJBbGxhbGxMaXZlR2lmdExpc3QiLCJhbGxMaXZlR2lmdExpc3QiLCJBbGxhbGxMaXZlUmV2aWRlb1VybCIsImFsbExpdmVSZXZpZGVvVXJsIiwiQWxsYWxsQ2hhdFBhZ2VJc05ldyIsImFsbENoYXRQYWdlSXNOZXciLCJBbGxhbGxJc0NoYXRwb3AiLCJhbGxJc0NoYXRwb3AiLCJBbGxhbGxJc1N0YXJ0VXAiLCJhbGxJc1N0YXJ0VXAiLCJBbGxhbGxJc1RyYXZhbFVzZXIiLCJhbGxJc1RyYXZhbFVzZXIiLCJBbGxhbGxTeXN0ZW1Nc2ciLCJhbGxTeXN0ZW1Nc2ciLCJBbGxhbGxQdXNoZXJBZGRyZXNzIiwiYWxsUHVzaGVyQWRkcmVzcyIsIkFsbGlkIiwiaWQiXSwibWFwcGluZ3MiOiJ1RkFBQSxJQUFNQSxPQUFPLEdBQUU7QUFDZEMsYUFEYyx1QkFDRkMsS0FERSxFQUNJO0FBQ2pCO0FBQ0EsV0FBT0EsS0FBSyxDQUFDQyxRQUFiO0FBQ0EsR0FKYTtBQUtkQyxpQkFMYywyQkFLRUYsS0FMRixFQUtRO0FBQ3JCO0FBQ0EsV0FBT0EsS0FBSyxDQUFDRyxZQUFiO0FBQ0EsR0FSYTtBQVNkQyxxQkFUYywrQkFTTUosS0FUTixFQVNZO0FBQ3pCO0FBQ0EsV0FBT0EsS0FBSyxDQUFDSyxnQkFBYjtBQUNBLEdBWmE7QUFhZEMsaUJBYmMsMkJBYUVOLEtBYkYsRUFhUTtBQUNyQjtBQUNBLFdBQU9BLEtBQUssQ0FBQ08sWUFBYjtBQUNBLEdBaEJhO0FBaUJkQyxvQkFqQmMsOEJBaUJLUixLQWpCTCxFQWlCVztBQUN4QjtBQUNBLFdBQU9BLEtBQUssQ0FBQ1MsZUFBYjtBQUNBLEdBcEJhO0FBcUJkQyxnQkFyQmMsMEJBcUJDVixLQXJCRCxFQXFCTztBQUNwQjtBQUNBLFdBQU9BLEtBQUssQ0FBQ1csV0FBYjtBQUNBLEdBeEJhO0FBeUJkQyxpQkF6QmMsMkJBeUJFWixLQXpCRixFQXlCUTtBQUNyQjtBQUNBLFdBQU9BLEtBQUssQ0FBQ2EsWUFBYjtBQUNBLEdBNUJhO0FBNkJkQyx3QkE3QmMsa0NBNkJTZCxLQTdCVCxFQTZCZTtBQUM1QjtBQUNBLFdBQU9BLEtBQUssQ0FBQ2UsbUJBQWI7QUFDQSxHQWhDYTtBQWlDZEMsbUJBakNjLDZCQWlDSWhCLEtBakNKLEVBaUNVO0FBQ3ZCO0FBQ0EsV0FBT0EsS0FBSyxDQUFDaUIsY0FBYjtBQUNBLEdBcENhO0FBcUNkQyxrQkFyQ2MsNEJBcUNHbEIsS0FyQ0gsRUFxQ1M7QUFDdEI7QUFDQSxXQUFPQSxLQUFLLENBQUNtQixhQUFiO0FBQ0EsR0F4Q2E7QUF5Q2RDLG9CQXpDYyw4QkF5Q0twQixLQXpDTCxFQXlDVztBQUN4QjtBQUNBLFdBQU9BLEtBQUssQ0FBQ3FCLGVBQWI7QUFDQSxHQTVDYTtBQTZDZEMsbUJBN0NjLDZCQTZDSXRCLEtBN0NKLEVBNkNVO0FBQ3ZCO0FBQ0EsV0FBT0EsS0FBSyxDQUFDdUIsY0FBYjtBQUNBLEdBaERhO0FBaURkQyxpQkFqRGMsMkJBaURFeEIsS0FqREYsRUFpRFE7QUFDckI7QUFDQSxXQUFPQSxLQUFLLENBQUN5QixZQUFiO0FBQ0EsR0FwRGE7QUFxRGRDLGNBckRjLHdCQXFERDFCLEtBckRDLEVBcURLO0FBQ2xCO0FBQ0EsV0FBT0EsS0FBSyxDQUFDMkIsU0FBYjtBQUNBLEdBeERhO0FBeURkQyxlQXpEYyx5QkF5REE1QixLQXpEQSxFQXlETTtBQUNuQjtBQUNBLFdBQU9BLEtBQUssQ0FBQzZCLFVBQWI7QUFDQSxHQTVEYTtBQTZEZEMsbUJBN0RjLDZCQTZESTlCLEtBN0RKLEVBNkRVO0FBQ3ZCO0FBQ0EsV0FBT0EsS0FBSyxDQUFDK0IsY0FBYjtBQUNBLEdBaEVhO0FBaUVkQyxvQkFqRWMsOEJBaUVLaEMsS0FqRUwsRUFpRVc7QUFDeEI7QUFDQSxXQUFPQSxLQUFLLENBQUNpQyxlQUFiO0FBQ0EsR0FwRWE7QUFxRWRDLG9CQXJFYyw4QkFxRUtsQyxLQXJFTCxFQXFFVztBQUN4QjtBQUNBLFdBQU9BLEtBQUssQ0FBQ21DLGVBQWI7QUFDQSxHQXhFYTtBQXlFZEMsc0JBekVjLGdDQXlFT3BDLEtBekVQLEVBeUVhO0FBQzFCO0FBQ0EsV0FBT0EsS0FBSyxDQUFDcUMsaUJBQWI7QUFDQSxHQTVFYTtBQTZFZEMscUJBN0VjLCtCQTZFTXRDLEtBN0VOLEVBNkVZO0FBQ3pCO0FBQ0EsV0FBT0EsS0FBSyxDQUFDdUMsZ0JBQWI7QUFDQSxHQWhGYTtBQWlGZEMsaUJBakZjLDJCQWlGRXhDLEtBakZGLEVBaUZRO0FBQ3JCO0FBQ0EsV0FBT0EsS0FBSyxDQUFDeUMsWUFBYjtBQUNBLEdBcEZhO0FBcUZkQyxpQkFyRmMsMkJBcUZFMUMsS0FyRkYsRUFxRlE7QUFDckI7QUFDQSxXQUFPQSxLQUFLLENBQUMyQyxZQUFiO0FBQ0EsR0F4RmE7QUF5RmRDLG9CQXpGYyw4QkF5Rks1QyxLQXpGTCxFQXlGVztBQUN4QjtBQUNBLFdBQU9BLEtBQUssQ0FBQzZDLGVBQWI7QUFDQSxHQTVGYTtBQTZGZEMsaUJBN0ZjLDJCQTZGRTlDLEtBN0ZGLEVBNkZRO0FBQ3JCO0FBQ0EsV0FBT0EsS0FBSyxDQUFDK0MsWUFBYjtBQUNBLEdBaEdhO0FBaUdkQyxxQkFqR2MsK0JBaUdNaEQsS0FqR04sRUFpR1k7QUFDekI7QUFDQSxXQUFPQSxLQUFLLENBQUNpRCxnQkFBYjtBQUNBLEdBcEdhOzs7QUF1R2RDLE9BdkdjLGlCQXVHUmxELEtBdkdRLEVBdUdGO0FBQ1g7QUFDQSxXQUFPQSxLQUFLLENBQUNtRCxFQUFiO0FBQ0EsR0ExR2EsRUFBZixDOztBQTRHZXJELE8iLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBnZXR0ZXJzID17XHJcblx0QWxsYWxsdG9hc3Qoc3RhdGUpe1xyXG5cdFx0Ly8gY29uc29sZS5sb2coc3RhdGUpXHJcblx0XHRyZXR1cm4gc3RhdGUuYWxsdG9hc3RcclxuXHR9LFxyXG5cdEFsbGFsbExvZ2luSW5mbyhzdGF0ZSl7XHJcblx0XHQvLyBjb25zb2xlLmxvZyhzdGF0ZSlcclxuXHRcdHJldHVybiBzdGF0ZS5hbGxMb2dpbkluZm9cclxuXHR9LFxyXG5cdEFsbGFsbEhvbWVWaWRlb0RhdGEoc3RhdGUpe1xyXG5cdFx0Ly8gY29uc29sZS5sb2coc3RhdGUpXHJcblx0XHRyZXR1cm4gc3RhdGUuYWxsSG9tZVZpZGVvRGF0YVxyXG5cdH0sXHJcblx0QWxsYWxsaXNSZWxvZ2luKHN0YXRlKXtcclxuXHRcdC8vIGNvbnNvbGUubG9nKHN0YXRlKVxyXG5cdFx0cmV0dXJuIHN0YXRlLmFsbGlzUmVsb2dpblxyXG5cdH0sXHJcblx0QWxsYWxsVHJ5TG9naW5EYXRhKHN0YXRlKXtcclxuXHRcdC8vIGNvbnNvbGUubG9nKHN0YXRlKVxyXG5cdFx0cmV0dXJuIHN0YXRlLmFsbFRyeUxvZ2luRGF0YVxyXG5cdH0sXHJcblx0QWxsYWxsQ2hhdExpc3Qoc3RhdGUpe1xyXG5cdFx0Ly8gY29uc29sZS5sb2coc3RhdGUpXHJcblx0XHRyZXR1cm4gc3RhdGUuYWxsQ2hhdExpc3RcclxuXHR9LFxyXG5cdEFsbGFsbENoYXRQcmljZShzdGF0ZSl7XHJcblx0XHQvLyBjb25zb2xlLmxvZyhzdGF0ZSlcclxuXHRcdHJldHVybiBzdGF0ZS5hbGxDaGF0UHJpY2VcclxuXHR9LFxyXG5cdEFsbGFsbENoYXRPYmpUb09iakxpc3Qoc3RhdGUpe1xyXG5cdFx0Ly8gY29uc29sZS5sb2coc3RhdGUpXHJcblx0XHRyZXR1cm4gc3RhdGUuYWxsQ2hhdE9ialRvT2JqTGlzdFxyXG5cdH0sXHJcblx0QWxsYWxsY2hhdE9iakluZm8oc3RhdGUpe1xyXG5cdFx0Ly8gY29uc29sZS5sb2coc3RhdGUpXHJcblx0XHRyZXR1cm4gc3RhdGUuYWxsY2hhdE9iakluZm9cclxuXHR9LFxyXG5cdEFsbGFsbE5vR2lmdExpc3Qoc3RhdGUpe1xyXG5cdFx0Ly8gY29uc29sZS5sb2coc3RhdGUpXHJcblx0XHRyZXR1cm4gc3RhdGUuYWxsTm9HaWZ0TGlzdFxyXG5cdH0sXHJcblx0QWxsYWxsRm9sbG93U3RhdHVzKHN0YXRlKXtcclxuXHRcdC8vIGNvbnNvbGUubG9nKHN0YXRlKVxyXG5cdFx0cmV0dXJuIHN0YXRlLmFsbEZvbGxvd1N0YXR1c1xyXG5cdH0sXHJcblx0QWxsYWxsQmxhY2tTdGF0dXMoc3RhdGUpe1xyXG5cdFx0Ly8gY29uc29sZS5sb2coc3RhdGUpXHJcblx0XHRyZXR1cm4gc3RhdGUuYWxsQmxhY2tTdGF0dXNcclxuXHR9LFxyXG5cdEFsbGFsbFNleFN0YXR1cyhzdGF0ZSl7XHJcblx0XHQvLyBjb25zb2xlLmxvZyhzdGF0ZSlcclxuXHRcdHJldHVybiBzdGF0ZS5hbGxTZXhTdGF0dXNcclxuXHR9LFxyXG5cdEFsbGFsbFJvb21pZChzdGF0ZSl7XHJcblx0XHQvLyBjb25zb2xlLmxvZyhzdGF0ZSlcclxuXHRcdHJldHVybiBzdGF0ZS5hbGxSb29taWRcclxuXHR9LFxyXG5cdEFsbGFsbExpdmVpZHgoc3RhdGUpe1xyXG5cdFx0Ly8gY29uc29sZS5sb2coc3RhdGUpXHJcblx0XHRyZXR1cm4gc3RhdGUuYWxsTGl2ZWlkeFxyXG5cdH0sXHJcblx0QWxsYWxsTGl2ZVJvb21OdW0oc3RhdGUpe1xyXG5cdFx0Ly8gY29uc29sZS5sb2coc3RhdGUpXHJcblx0XHRyZXR1cm4gc3RhdGUuYWxsTGl2ZVJvb21OdW1cclxuXHR9LFxyXG5cdEFsbGFsbExpdmVDaGF0TGlzdChzdGF0ZSl7XHJcblx0XHQvLyBjb25zb2xlLmxvZyhzdGF0ZSlcclxuXHRcdHJldHVybiBzdGF0ZS5hbGxMaXZlQ2hhdExpc3RcclxuXHR9LFxyXG5cdEFsbGFsbExpdmVHaWZ0TGlzdChzdGF0ZSl7XHJcblx0XHQvLyBjb25zb2xlLmxvZyhzdGF0ZSlcclxuXHRcdHJldHVybiBzdGF0ZS5hbGxMaXZlR2lmdExpc3RcclxuXHR9LFxyXG5cdEFsbGFsbExpdmVSZXZpZGVvVXJsKHN0YXRlKXtcclxuXHRcdC8vIGNvbnNvbGUubG9nKHN0YXRlKVxyXG5cdFx0cmV0dXJuIHN0YXRlLmFsbExpdmVSZXZpZGVvVXJsXHJcblx0fSxcclxuXHRBbGxhbGxDaGF0UGFnZUlzTmV3KHN0YXRlKXtcclxuXHRcdC8vIGNvbnNvbGUubG9nKHN0YXRlKVxyXG5cdFx0cmV0dXJuIHN0YXRlLmFsbENoYXRQYWdlSXNOZXdcclxuXHR9LFxyXG5cdEFsbGFsbElzQ2hhdHBvcChzdGF0ZSl7XHJcblx0XHQvLyBjb25zb2xlLmxvZyhzdGF0ZSlcclxuXHRcdHJldHVybiBzdGF0ZS5hbGxJc0NoYXRwb3BcclxuXHR9LFxyXG5cdEFsbGFsbElzU3RhcnRVcChzdGF0ZSl7XHJcblx0XHQvLyBjb25zb2xlLmxvZyhzdGF0ZSlcclxuXHRcdHJldHVybiBzdGF0ZS5hbGxJc1N0YXJ0VXBcclxuXHR9LFxyXG5cdEFsbGFsbElzVHJhdmFsVXNlcihzdGF0ZSl7XHJcblx0XHQvLyBjb25zb2xlLmxvZyhzdGF0ZSlcclxuXHRcdHJldHVybiBzdGF0ZS5hbGxJc1RyYXZhbFVzZXJcclxuXHR9LFxyXG5cdEFsbGFsbFN5c3RlbU1zZyhzdGF0ZSl7XHJcblx0XHQvLyBjb25zb2xlLmxvZyhzdGF0ZSlcclxuXHRcdHJldHVybiBzdGF0ZS5hbGxTeXN0ZW1Nc2dcclxuXHR9LFxyXG5cdEFsbGFsbFB1c2hlckFkZHJlc3Moc3RhdGUpe1xyXG5cdFx0Ly8gY29uc29sZS5sb2coc3RhdGUpXHJcblx0XHRyZXR1cm4gc3RhdGUuYWxsUHVzaGVyQWRkcmVzc1xyXG5cdH0sXHJcblx0XHJcblx0XHJcblx0QWxsaWQoc3RhdGUpe1xyXG5cdFx0Ly8gY29uc29sZS5sb2coc3RhdGUpXHJcblx0XHRyZXR1cm4gc3RhdGUuaWRcclxuXHR9XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgZ2V0dGVycyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/*!***********************************************************************************!*\
  !*** C:/Users/TG/Documents/HBuilderProjects/livePusherT_android/store/actions.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;\nvar actions = {\n  SET_isLogin: function SET_isLogin(_ref, data) {var commit = _ref.commit;\n    commit('set_login', data);\n  },\n  SET_allPusherAddress: function SET_allPusherAddress(_ref2, data) {var commit = _ref2.commit;\n    commit('set_allPusherAddress', data);\n  } };var _default =\n\nactions;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vc3RvcmUvYWN0aW9ucy5qcyJdLCJuYW1lcyI6WyJhY3Rpb25zIiwiU0VUX2lzTG9naW4iLCJkYXRhIiwiY29tbWl0IiwiU0VUX2FsbFB1c2hlckFkZHJlc3MiXSwibWFwcGluZ3MiOiI7QUFDQSxJQUFNQSxPQUFPLEdBQUU7QUFDZEMsYUFBVyxFQUFFLDJCQUFhQyxJQUFiLEVBQXNCLEtBQW5CQyxNQUFtQixRQUFuQkEsTUFBbUI7QUFDbENBLFVBQU0sQ0FBQyxXQUFELEVBQWNELElBQWQsQ0FBTjtBQUNBLEdBSGE7QUFJZEUsc0JBQW9CLEVBQUUscUNBQWFGLElBQWIsRUFBc0IsS0FBbkJDLE1BQW1CLFNBQW5CQSxNQUFtQjtBQUMzQ0EsVUFBTSxDQUFDLHNCQUFELEVBQXlCRCxJQUF6QixDQUFOO0FBQ0EsR0FOYSxFQUFmLEM7O0FBUWVGLE8iLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuY29uc3QgYWN0aW9ucyA9e1xyXG5cdFNFVF9pc0xvZ2luOiAoeyBjb21taXQgfSwgZGF0YSkgPT4ge1xyXG5cdFx0Y29tbWl0KCdzZXRfbG9naW4nLCBkYXRhKVxyXG5cdH0sXHJcblx0U0VUX2FsbFB1c2hlckFkZHJlc3M6ICh7IGNvbW1pdCB9LCBkYXRhKSA9PiB7XHJcblx0XHRjb21taXQoJ3NldF9hbGxQdXNoZXJBZGRyZXNzJywgZGF0YSlcclxuXHR9LFxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IGFjdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/*!*************************************************************************************!*\
  !*** C:/Users/TG/Documents/HBuilderProjects/livePusherT_android/store/mutations.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;\nvar mutations = {\n  set_alltoast: function set_alltoast(state, tf) {\n    if (tf) {\n      state.alltoast = tf;\n    } else {\n      state.alltoast = !state.alltoast;\n    }\n  },\n  set_allLoginInfo: function set_allLoginInfo(state, data) {\n    state.allLoginInfo = data;\n  },\n  set_allHomeVideoData: function set_allHomeVideoData(state, data) {\n    state.allHomeVideoData = data;\n  },\n  set_allisRelogin: function set_allisRelogin(state, data) {\n    state.allisRelogin = data;\n  },\n  set_allTryLoginData: function set_allTryLoginData(state, data) {\n    state.allTryLoginData.msg = data.str1;\n    state.allTryLoginData.num = data.str2;\n  },\n  set_allChatList: function set_allChatList(state, data) {\n    state.allChatList = data;\n  },\n  set_allChatPrice: function set_allChatPrice(state, data) {\n    state.allChatPrice = data;\n  },\n  set_allChatObjToObjList: function set_allChatObjToObjList(state, data) {\n    state.allChatObjToObjList = data;\n  },\n  set_allchatObjInfo: function set_allchatObjInfo(state, data) {\n    state.allchatObjInfo = data;\n  },\n  set_allNoGiftList: function set_allNoGiftList(state, data) {\n    state.allNoGiftList = data;\n  },\n  set_allFollowStatus: function set_allFollowStatus(state, data) {\n    state.allFollowStatus = data;\n  },\n  set_allBlackStatus: function set_allBlackStatus(state, data) {\n    state.allBlackStatus = data;\n  },\n  set_allSexStatus: function set_allSexStatus(state, data) {\n    state.allSexStatus = data;\n  },\n  set_allRoomid: function set_allRoomid(state, data) {\n    state.allRoomid = data;\n  },\n  set_allLiveidx: function set_allLiveidx(state, data) {\n    state.allLiveidx = data;\n  },\n  set_allLiveRoomNum: function set_allLiveRoomNum(state, data) {\n    state.allLiveRoomNum = data;\n  },\n  set_allLiveChatList: function set_allLiveChatList(state, data) {\n    state.allLiveChatList = data;\n  },\n  set_allLiveGiftList: function set_allLiveGiftList(state, data) {\n    state.allLiveGiftList = data;\n  },\n  set_allLiveRevideoUrl: function set_allLiveRevideoUrl(state, data) {\n    state.allLiveRevideoUrl = data;\n  },\n  set_allChatPageIsNew: function set_allChatPageIsNew(state, data) {\n    state.allChatPageIsNew = data;\n  },\n  set_allIsChatpop: function set_allIsChatpop(state, data) {\n    state.allIsChatpop = data;\n  },\n  set_allIsStartUp: function set_allIsStartUp(state, data) {\n    state.allIsStartUp = data;\n  },\n  set_allIsTravalUser: function set_allIsTravalUser(state, data) {\n    state.allIsTravalUser = data;\n  },\n  set_allSystemMsg: function set_allSystemMsg(state, data) {\n    state.allSystemMsg = data;\n  },\n  set_allPusherAddress: function set_allPusherAddress(state, data) {\n    state.allPusherAddress = data;\n  },\n\n\n\n  set_id: function set_id(state, data) {\n    state.id = data;\n  } };var _default =\n\n\nmutations;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/*!***************************************************************************************!*\
  !*** C:/Users/TG/Documents/HBuilderProjects/livePusherT_android/store/model/login.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0; // 状态\nvar state = {\n  isLogin: null, //是否登录\n  userInfo: {} //登录信息\n};\n\nvar getters = {\n  get_isLogin: function get_isLogin(state) {\n    return state.isLogin;\n  },\n  get_userInfo: function get_userInfo(state) {\n    return state.userInfo;\n  } };\n\n// 提交\nvar mutations = {\n  set_isLogin: function set_isLogin(state, data) {\n    state.isLogin = data;\n  },\n  set_userInfo: function set_userInfo(state, data) {\n    state.userInfo = data;\n  } };\n\n// 方法\nvar actions = {\n  SET_isLogin: function SET_isLogin(_ref, data) {var commit = _ref.commit;\n    commit('set_isLogin', data);\n  },\n  SET_userInfo: function SET_userInfo(_ref2, data) {var commit = _ref2.commit;\n    commit('set_userInfo', data);\n  } };var _default =\n\n\n\n{\n  namespaced: true,\n  state: state,\n  getters: getters,\n  mutations: mutations,\n  actions: actions };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vc3RvcmUvbW9kZWwvbG9naW4uanMiXSwibmFtZXMiOlsic3RhdGUiLCJpc0xvZ2luIiwidXNlckluZm8iLCJnZXR0ZXJzIiwiZ2V0X2lzTG9naW4iLCJnZXRfdXNlckluZm8iLCJtdXRhdGlvbnMiLCJzZXRfaXNMb2dpbiIsImRhdGEiLCJzZXRfdXNlckluZm8iLCJhY3Rpb25zIiwiU0VUX2lzTG9naW4iLCJjb21taXQiLCJTRVRfdXNlckluZm8iLCJuYW1lc3BhY2VkIl0sIm1hcHBpbmdzIjoid0ZBQUE7QUFDQSxJQUFNQSxLQUFLLEdBQUc7QUFDWkMsU0FBTyxFQUFDLElBREksRUFDQztBQUNiQyxVQUFRLEVBQUUsRUFGRSxDQUVDO0FBRkQsQ0FBZDs7QUFLQSxJQUFNQyxPQUFPLEdBQUU7QUFDZEMsYUFEYyx1QkFDRkosS0FERSxFQUNJO0FBQ2pCLFdBQU9BLEtBQUssQ0FBQ0MsT0FBYjtBQUNBLEdBSGE7QUFJZEksY0FKYyx3QkFJREwsS0FKQyxFQUlLO0FBQ2xCLFdBQU9BLEtBQUssQ0FBQ0UsUUFBYjtBQUNBLEdBTmEsRUFBZjs7QUFRQTtBQUNBLElBQU1JLFNBQVMsR0FBRztBQUNqQkMsYUFBVyxFQUFDLHFCQUFDUCxLQUFELEVBQU9RLElBQVAsRUFBYztBQUN4QlIsU0FBSyxDQUFDQyxPQUFOLEdBQWdCTyxJQUFoQjtBQUNELEdBSGdCO0FBSWpCQyxjQUFZLEVBQUMsc0JBQUNULEtBQUQsRUFBT1EsSUFBUCxFQUFjO0FBQzFCUixTQUFLLENBQUNFLFFBQU4sR0FBaUJNLElBQWpCO0FBQ0EsR0FOZ0IsRUFBbEI7O0FBUUE7QUFDQSxJQUFNRSxPQUFPLEdBQUc7QUFDZkMsYUFBVyxFQUFFLDJCQUFhSCxJQUFiLEVBQXNCLEtBQW5CSSxNQUFtQixRQUFuQkEsTUFBbUI7QUFDakNBLFVBQU0sQ0FBQyxhQUFELEVBQWdCSixJQUFoQixDQUFOO0FBQ0QsR0FIYztBQUlmSyxjQUFZLEVBQUUsNkJBQWFMLElBQWIsRUFBc0IsS0FBbkJJLE1BQW1CLFNBQW5CQSxNQUFtQjtBQUNuQ0EsVUFBTSxDQUFDLGNBQUQsRUFBaUJKLElBQWpCLENBQU47QUFDQSxHQU5jLEVBQWhCLEM7Ozs7QUFVZTtBQUNiTSxZQUFVLEVBQUUsSUFEQztBQUViZCxPQUFLLEVBQUxBLEtBRmE7QUFHYkcsU0FBTyxFQUFQQSxPQUhhO0FBSWJHLFdBQVMsRUFBVEEsU0FKYTtBQUtiSSxTQUFPLEVBQVBBLE9BTGEsRSIsImZpbGUiOiIyMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIOeKtuaAgVxyXG5jb25zdCBzdGF0ZSA9IHtcclxuICBpc0xvZ2luOm51bGwsLy/mmK/lkKbnmbvlvZVcclxuICB1c2VySW5mbzoge30sLy/nmbvlvZXkv6Hmga9cclxuICBcclxufVxyXG5jb25zdCBnZXR0ZXJzID17XHJcblx0Z2V0X2lzTG9naW4oc3RhdGUpe1xyXG5cdFx0cmV0dXJuIHN0YXRlLmlzTG9naW47XHJcblx0fSxcclxuXHRnZXRfdXNlckluZm8oc3RhdGUpe1xyXG5cdFx0cmV0dXJuIHN0YXRlLnVzZXJJbmZvO1xyXG5cdH1cclxufVxyXG4vLyDmj5DkuqRcclxuY29uc3QgbXV0YXRpb25zID0ge1xyXG5cdHNldF9pc0xvZ2luOihzdGF0ZSxkYXRhKT0+e1xyXG5cdCAgc3RhdGUuaXNMb2dpbiA9IGRhdGEgXHJcblx0fSxcclxuXHRzZXRfdXNlckluZm86KHN0YXRlLGRhdGEpPT57XHJcblx0XHRzdGF0ZS51c2VySW5mbyA9IGRhdGEgXHJcblx0fVxyXG59XHJcbi8vIOaWueazlVxyXG5jb25zdCBhY3Rpb25zID0ge1xyXG5cdFNFVF9pc0xvZ2luOiAoeyBjb21taXQgfSwgZGF0YSkgPT4ge1xyXG5cdCAgY29tbWl0KCdzZXRfaXNMb2dpbicsIGRhdGEpXHJcblx0fSxcclxuXHRTRVRfdXNlckluZm86ICh7IGNvbW1pdCB9LCBkYXRhKSA9PiB7XHJcblx0XHRjb21taXQoJ3NldF91c2VySW5mbycsIGRhdGEpXHJcblx0fSxcclxuICBcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIG5hbWVzcGFjZWQ6IHRydWUsXHJcbiAgc3RhdGUsXHJcbiAgZ2V0dGVycyxcclxuICBtdXRhdGlvbnMsXHJcbiAgYWN0aW9uc1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */
/*!******************************************************************************************!*\
  !*** C:/Users/TG/Documents/HBuilderProjects/livePusherT_android/store/model/liveroom.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0; // 状态\nvar state = {\n  liveInfo: null, //\n  isLogin: null, //是否登录\n  userInfo: {} //登录信息\n};\n\nvar getters = {\n  get_liveInfo: function get_liveInfo(state) {\n    return state.liveInfo;\n  },\n  get_isLogin: function get_isLogin(state) {\n    return state.isLogin;\n  },\n  get_userInfo: function get_userInfo(state) {\n    return state.userInfo;\n  } };\n\n// 提交\nvar mutations = {\n  set_liveInfo: function set_liveInfo(state, data) {\n    state.liveInfo = data;\n  },\n  set_isLogin: function set_isLogin(state, data) {\n    state.isLogin = data;\n  },\n  set_userInfo: function set_userInfo(state, data) {\n    state.userInfo = data;\n  } };\n\n// 方法\nvar actions = {\n  SET_liveInfo: function SET_liveInfo(_ref, data) {var commit = _ref.commit;\n    commit('set_liveInfo', data);\n  },\n  SET_isLogin: function SET_isLogin(_ref2, data) {var commit = _ref2.commit;\n    commit('set_isLogin', data);\n  },\n  SET_userInfo: function SET_userInfo(_ref3, data) {var commit = _ref3.commit;\n    commit('set_userInfo', data);\n  } };var _default =\n\n\n\n{\n  namespaced: true,\n  state: state,\n  getters: getters,\n  mutations: mutations,\n  actions: actions };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vc3RvcmUvbW9kZWwvbGl2ZXJvb20uanMiXSwibmFtZXMiOlsic3RhdGUiLCJsaXZlSW5mbyIsImlzTG9naW4iLCJ1c2VySW5mbyIsImdldHRlcnMiLCJnZXRfbGl2ZUluZm8iLCJnZXRfaXNMb2dpbiIsImdldF91c2VySW5mbyIsIm11dGF0aW9ucyIsInNldF9saXZlSW5mbyIsImRhdGEiLCJzZXRfaXNMb2dpbiIsInNldF91c2VySW5mbyIsImFjdGlvbnMiLCJTRVRfbGl2ZUluZm8iLCJjb21taXQiLCJTRVRfaXNMb2dpbiIsIlNFVF91c2VySW5mbyIsIm5hbWVzcGFjZWQiXSwibWFwcGluZ3MiOiJ3RkFBQTtBQUNBLElBQU1BLEtBQUssR0FBRztBQUNiQyxVQUFRLEVBQUMsSUFESSxFQUNDO0FBQ2RDLFNBQU8sRUFBQyxJQUZLLEVBRUE7QUFDYkMsVUFBUSxFQUFFLEVBSEcsQ0FHQTtBQUhBLENBQWQ7O0FBTUEsSUFBTUMsT0FBTyxHQUFFO0FBQ2RDLGNBRGMsd0JBQ0RMLEtBREMsRUFDSztBQUNsQixXQUFPQSxLQUFLLENBQUNDLFFBQWI7QUFDQSxHQUhhO0FBSWRLLGFBSmMsdUJBSUZOLEtBSkUsRUFJSTtBQUNqQixXQUFPQSxLQUFLLENBQUNFLE9BQWI7QUFDQSxHQU5hO0FBT2RLLGNBUGMsd0JBT0RQLEtBUEMsRUFPSztBQUNsQixXQUFPQSxLQUFLLENBQUNHLFFBQWI7QUFDQSxHQVRhLEVBQWY7O0FBV0E7QUFDQSxJQUFNSyxTQUFTLEdBQUc7QUFDakJDLGNBQVksRUFBQyxzQkFBQ1QsS0FBRCxFQUFPVSxJQUFQLEVBQWM7QUFDekJWLFNBQUssQ0FBQ0MsUUFBTixHQUFpQlMsSUFBakI7QUFDRCxHQUhnQjtBQUlqQkMsYUFBVyxFQUFDLHFCQUFDWCxLQUFELEVBQU9VLElBQVAsRUFBYztBQUN4QlYsU0FBSyxDQUFDRSxPQUFOLEdBQWdCUSxJQUFoQjtBQUNELEdBTmdCO0FBT2pCRSxjQUFZLEVBQUMsc0JBQUNaLEtBQUQsRUFBT1UsSUFBUCxFQUFjO0FBQzFCVixTQUFLLENBQUNHLFFBQU4sR0FBaUJPLElBQWpCO0FBQ0EsR0FUZ0IsRUFBbEI7O0FBV0E7QUFDQSxJQUFNRyxPQUFPLEdBQUc7QUFDZkMsY0FBWSxFQUFFLDRCQUFhSixJQUFiLEVBQXNCLEtBQW5CSyxNQUFtQixRQUFuQkEsTUFBbUI7QUFDbENBLFVBQU0sQ0FBQyxjQUFELEVBQWlCTCxJQUFqQixDQUFOO0FBQ0QsR0FIYztBQUlmTSxhQUFXLEVBQUUsNEJBQWFOLElBQWIsRUFBc0IsS0FBbkJLLE1BQW1CLFNBQW5CQSxNQUFtQjtBQUNqQ0EsVUFBTSxDQUFDLGFBQUQsRUFBZ0JMLElBQWhCLENBQU47QUFDRCxHQU5jO0FBT2ZPLGNBQVksRUFBRSw2QkFBYVAsSUFBYixFQUFzQixLQUFuQkssTUFBbUIsU0FBbkJBLE1BQW1CO0FBQ25DQSxVQUFNLENBQUMsY0FBRCxFQUFpQkwsSUFBakIsQ0FBTjtBQUNBLEdBVGMsRUFBaEIsQzs7OztBQWFlO0FBQ2JRLFlBQVUsRUFBRSxJQURDO0FBRWJsQixPQUFLLEVBQUxBLEtBRmE7QUFHYkksU0FBTyxFQUFQQSxPQUhhO0FBSWJJLFdBQVMsRUFBVEEsU0FKYTtBQUtiSyxTQUFPLEVBQVBBLE9BTGEsRSIsImZpbGUiOiIyMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIOeKtuaAgVxyXG5jb25zdCBzdGF0ZSA9IHtcclxuXHRsaXZlSW5mbzpudWxsLC8vXHJcblx0aXNMb2dpbjpudWxsLC8v5piv5ZCm55m75b2VXHJcblx0dXNlckluZm86IHt9LC8v55m75b2V5L+h5oGvXHJcbiAgXHJcbn1cclxuY29uc3QgZ2V0dGVycyA9e1xyXG5cdGdldF9saXZlSW5mbyhzdGF0ZSl7XHJcblx0XHRyZXR1cm4gc3RhdGUubGl2ZUluZm87XHJcblx0fSxcclxuXHRnZXRfaXNMb2dpbihzdGF0ZSl7XHJcblx0XHRyZXR1cm4gc3RhdGUuaXNMb2dpbjtcclxuXHR9LFxyXG5cdGdldF91c2VySW5mbyhzdGF0ZSl7XHJcblx0XHRyZXR1cm4gc3RhdGUudXNlckluZm87XHJcblx0fVxyXG59XHJcbi8vIOaPkOS6pFxyXG5jb25zdCBtdXRhdGlvbnMgPSB7XHJcblx0c2V0X2xpdmVJbmZvOihzdGF0ZSxkYXRhKT0+e1xyXG5cdCAgc3RhdGUubGl2ZUluZm8gPSBkYXRhIFxyXG5cdH0sXHJcblx0c2V0X2lzTG9naW46KHN0YXRlLGRhdGEpPT57XHJcblx0ICBzdGF0ZS5pc0xvZ2luID0gZGF0YSBcclxuXHR9LFxyXG5cdHNldF91c2VySW5mbzooc3RhdGUsZGF0YSk9PntcclxuXHRcdHN0YXRlLnVzZXJJbmZvID0gZGF0YSBcclxuXHR9XHJcbn1cclxuLy8g5pa55rOVXHJcbmNvbnN0IGFjdGlvbnMgPSB7XHJcblx0U0VUX2xpdmVJbmZvOiAoeyBjb21taXQgfSwgZGF0YSkgPT4ge1xyXG5cdCAgY29tbWl0KCdzZXRfbGl2ZUluZm8nLCBkYXRhKVxyXG5cdH0sXHJcblx0U0VUX2lzTG9naW46ICh7IGNvbW1pdCB9LCBkYXRhKSA9PiB7XHJcblx0ICBjb21taXQoJ3NldF9pc0xvZ2luJywgZGF0YSlcclxuXHR9LFxyXG5cdFNFVF91c2VySW5mbzogKHsgY29tbWl0IH0sIGRhdGEpID0+IHtcclxuXHRcdGNvbW1pdCgnc2V0X3VzZXJJbmZvJywgZGF0YSlcclxuXHR9LFxyXG4gIFxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgbmFtZXNwYWNlZDogdHJ1ZSxcclxuICBzdGF0ZSxcclxuICBnZXR0ZXJzLFxyXG4gIG11dGF0aW9ucyxcclxuICBhY3Rpb25zXHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */
/*!*******************************************************************************************!*\
  !*** C:/Users/TG/Documents/HBuilderProjects/livePusherT_android/lib/js/GlobalFunction.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.Get = Get;exports.Post = Post;exports.Get1 = Get1;exports.Post1 = Post1;exports.Delete1 = Delete1;exports.encrypt = encrypt;exports.decrypt = decrypt;exports.navigateTo = navigateTo;exports.systemall = systemall;exports.system = system;exports.productType = productType;exports.systemId = systemId;exports.base64ToArrayBuffer = base64ToArrayBuffer;exports.sendData = sendData;exports.fillstr2abc = fillstr2abc;exports.sendDSocket = sendDSocket;exports.Do = Do;exports.fillstr2ab = fillstr2ab;exports.fillstr2ab15 = fillstr2ab15;exports.fillstr2ab201 = fillstr2ab201;exports.sendD = sendD;exports.sendD06 = sendD06;exports.sendD110 = sendD110;exports.sendD07 = sendD07;exports.sendD09 = sendD09;exports.sendD11 = sendD11;exports.sendD13 = sendD13;exports.sendD15 = sendD15;exports.sendD17 = sendD17;exports.sendD201 = sendD201;exports.sendD207 = sendD207;exports.sendD209 = sendD209;exports.sendD217 = sendD217;exports.sendD204 = sendD204;exports.work = work;exports.regMail = regMail;exports.getImgToBase64 = getImgToBase64;\nvar _handle = __webpack_require__(/*! ../socket/modules/handle.js */ 23);var CryptoJS = __webpack_require__(/*! ../crypto-js/crypto-js.js */ 24); //引用AES源码js\n/**\r\n * get（）--api\r\n * @param obj 参数 url 地址\r\n * @returns {*}\r\n */\nfunction Get(obj, url) {\n  return new Promise(function (resolve, reject) {\n    uni.request({\n      url: '/api' + url, //仅为示例，并非真实接口地址。 https://live.mycat1314.com/\n      data: obj,\n      method: 'GET',\n      success: function success(res) {\n        resolve(res);\n      },\n      fail: function fail(err) {\n        reject(err);\n      } });\n\n  });\n}\n/**\r\n   * post（）--api\r\n   * @param obj \r\n   * @returns {*}\r\n   */\nfunction Post(obj, url) {\n  return new Promise(function (resolve, reject) {\n    uni.request({\n      // url: '/api'+url, //仅为示例，并非真实接口地址。 https://live.mycat1314.com/\n      url: 'http://60.191.222.11:8022/' + url, //仅为示例，并非真实接口地址。 https://live.mycat1314.com/\n      data: obj,\n      method: 'POST',\n      success: function success(res) {\n        resolve(res);\n      },\n      fail: function fail(err) {\n        reject(err);\n      } });\n\n  });\n}\n/**\r\n   * get（）--api\r\n   * @param obj 参数 url 地址\r\n   * @returns {*}\r\n   */\nfunction Get1(obj, aid, url) {\n  return new Promise(function (resolve, reject) {\n    uni.request({\n      url: '/api' + url, //仅为示例，并非真实接口地址。\n      data: obj,\n      method: 'GET',\n      header: { aid: aid },\n      success: function success(res) {\n        resolve(res);\n      },\n      fail: function fail(err) {\n        reject(err);\n      } });\n\n  });\n}\n/**\r\n   * post1（）--api  接口使用\r\n   * @param obj \r\n   * @returns {*}\r\n   */\nfunction Post1(obj, aid, url) {\n  return new Promise(function (resolve, reject) {\n    uni.request({\n      url: '/api' + url, //仅为示例，并非真实接口地址。\n      data: obj,\n      method: 'POST',\n      header: { aid: aid },\n      success: function success(res) {\n        resolve(res);\n      },\n      fail: function fail(err) {\n        reject(err);\n      } });\n\n  });\n}\n/**\r\n   * delete1（）--api  接口使用\r\n   * @param obj \r\n   * @returns {*}\r\n   */\nfunction Delete1(obj, aid, url) {\n  return new Promise(function (resolve, reject) {\n    uni.request({\n      url: '/api' + url, //仅为示例，并非真实接口地址。\n      data: obj,\n      method: 'DELETE',\n      header: { aid: aid },\n      success: function success(res) {\n        resolve(res);\n      },\n      fail: function fail(err) {\n        reject(err);\n      } });\n\n  });\n}\n/**\r\n   * 加密（）--api\r\n   * @param word\r\n   * @returns {*}\r\n   */\nfunction encrypt(word) {\n  var key = CryptoJS.enc.Utf8.parse(\"hangzhoutiangekeji9158miaobolive\");\n  var srcs = CryptoJS.enc.Utf8.parse(word);\n  var encrypted = CryptoJS.AES.encrypt(srcs, key, { mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.Pkcs7 });\n  return encrypted.toString();\n}\n/**\r\n   * 解密 --api\r\n   * @param word\r\n   * @returns {*}\r\n   */\nfunction decrypt(word) {\n  var key = CryptoJS.enc.Utf8.parse(\"hangzhoutiangekeji9158miaobolive\");\n  var decrypt = CryptoJS.AES.decrypt(word, key, { mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.Pkcs7 });\n  return CryptoJS.enc.Utf8.stringify(decrypt).toString();\n}\n/**\r\n   * 跳转 --api\r\n   * @param word\r\n   * @returns {*}\r\n   */\nfunction navigateTo(url, param) {//string  string-obj or null\n  // console.log(url)\n  // console.log(param)\n  if (param === null) {\n    uni.navigateTo({\n      url: url });\n\n  } else if (param != null) {\n    uni.navigateTo({\n      url: url + \"?action=\" + param });\n\n  }\n}\n/**\r\n   * 判断系统类型 --api\r\n   * @param null\r\n   * @returns android or ios  pc\r\n   */\nfunction systemall() {\n  var ios = 'ios';\n  var android = 'android';\n  var pc = 'pc';\n  var u = navigator.userAgent,app = navigator.appVersion;\n  var isAndroid = u.indexOf('Android') > -1 || u.indexOf('Linux') > -1; //g\n  var isIOS = !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/); //ios终端\n  if (isAndroid) {\n    //这个是安卓操作系统\n    return android;\n  }\n  if (isIOS) {\n    //这个是ios操作系统\n    return ios;\n  }\n  if (isIOS == false && isAndroid == false) {\n    //这个是pc操作系统\n    return pc;\n  }\n}\n/**\r\n   * 判断系统类型 --api\r\n   * @param null\r\n   * @returns android or ios\r\n   */\nfunction system() {\n  var ios = 'ios';\n  var android = 'android';\n  var u = navigator.userAgent,app = navigator.appVersion;\n  var isAndroid = u.indexOf('Android') > -1 || u.indexOf('Linux') > -1; //g\n  var isIOS = !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/); //ios终端\n  if (isAndroid) {\n    //这个是安卓操作系统\n    return android;\n  }\n  if (isIOS) {\n    //这个是ios操作系统\n    return ios;\n  }\n}\n/**\r\n   * 判断系统类型 --api  0--ios 1--android\r\n   * @param null\r\n   * @returns android or ios\r\n   */\nfunction productType() {\n  var ios = 'ios';\n  var android = 'android';\n  var u = navigator.userAgent,app = navigator.appVersion;\n  var isAndroid = u.indexOf('Android') > -1 || u.indexOf('Linux') > -1; //g\n  var isIOS = !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/); //ios终端\n  if (isAndroid) {\n    //这个是安卓操作系统\n    return 1;\n  }\n  if (isIOS) {\n    //这个是ios操作系统\n    return 0;\n  }\n}\n/**\r\n   * 判断设备号 --api\r\n   * @param word\r\n   * @returns {*}\r\n   */\nfunction systemId() {\n  var canvas = document.createElement('canvas'),\n  gl = canvas.getContext('experimental-webgl'),\n  debugInfo = gl.getExtension('WEBGL_debug_renderer_info');\n  //console.log(gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL));\n  return gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL);\n}\n/**\r\n   * string转二进制流--api\r\n   * @param base64\r\n   * @returns [*]\r\n   */\n//ArrayBuffer转字符串\n// function ab2str(u,f) {\n//    var b = new Blob([u]);\n//    var r = new FileReader();\n//     r.readAsText(b, 'utf-8');\n//     r.onload = function (){if(f)f.call(null,r.result)}\n// }\n// //字符串转字符串ArrayBuffer\n// function str2ab(s,f) {\n//     var b = new Blob([s],{type:'text/plain'});\n//     var r = new FileReader();\n//     r.readAsArrayBuffer(b);\n//     r.onload = function (){if(f)f.call(null,r.result)}\n// }\n/**\r\n * 转二进制流--api\r\n * @param base64\r\n * @returns [*]\r\n */\nfunction base64ToArrayBuffer(base64) {// h5 使用\n  // var binaryString = window.atob(base64);\n  var binaryLen = base64.length;\n  var bytes = new Uint8Array(binaryLen);\n  for (var i = 0; i < binaryLen; i++) {\n    var ascii = base64.charCodeAt(i);\n    bytes[i] = ascii;\n  }\n  return bytes;\n  // var binaryString = window.atob(base64);\n  // console.log(binaryString)\n  // var binaryLen = binaryString.length;\n  // var bytes = new Uint8Array(binaryLen);\n  // for (var i = 0; i < binaryLen; i++) {\n  // \tvar ascii = binaryString.charCodeAt(i);\n  // \tbytes[i] = ascii;\n  // }\n  // return bytes;\n}\n/**\r\n   * 二进制流传输 --api\r\n   * @param base64\r\n   * @returns [*]\r\n   */\nfunction sendData(type, url, array) {\n  var xhr = new XMLHttpRequest();\n  xhr.open(type, url, false);\n  xhr.send(array);\n  return xhr.responseText; //or response\n}\n/**\r\n  * socket通信转流 字符串处理 并转流 socket send 信息通用\r\n  * @param string\r\n  * @returns [*]\r\n  */\nfunction fillstr2abc(str, buf, offset) {//----通用 防止字符串过长 _\n  var uint8array = new TextEncoder().encode(str);\n  var strLen = uint8array.length;\n  var bufView = new Uint8Array(buf, offset, strLen);\n  for (var i = 0; i < strLen; i++) {\n    bufView[i] = uint8array[i];\n  }\n  return strLen;\n}\nfunction sendDSocket(content, num) {//params1 json string params2 num 协议号------\n  var len = content.length;\n  //=========================\n  var bufferRes = new ArrayBuffer(12 + len * 3);\n  var Head = new Int32Array(bufferRes, 0, 3);\n  Head[0] = 12 + fillstr2abc(content, bufferRes, 12); //len\n  // console.log(Head[0])\n  Head[1] = num; //cmd\n  return bufferRes.slice(0, Head[0]);\n}\n/**\r\n  * 流转string  最新\r\n  * @param Blob\r\n  * @returns [string]\r\n  */\nfunction Do(aaaa) {\n  var b = new Blob([aaaa]);\n  var fileReader = new FileReader();\n  fileReader.onload = function (progressEvent) {\n    var arrayBuffer = this.result; // arrayBuffer即为blob对应的arrayBuffer\n    var HeadRecv = new Uint32Array(arrayBuffer, 0, 3);\n    var strArray = new Uint8Array(arrayBuffer, 12, HeadRecv[0] - 12 - 1);\n    var str = new TextDecoder().decode(strArray); //{\"code\":-1,\"error\":\"用户名或密码错误\"}\n    // console.log(HeadRecv[1],JSON.parse(str))\n    //to do\n    // resultData.code = HeadRecv[1];\n    // resultData.msg = JSON.parse(str);\n    __f__(\"log\", HeadRecv[1], \" at lib/js/GlobalFunction.js:318\");\n    __f__(\"log\", JSON.parse(str), \" at lib/js/GlobalFunction.js:319\");\n    // console.log(resultData)\n    (0, _handle.webMsg)(HeadRecv[1], JSON.parse(str));\n  };\n\n  fileReader.readAsArrayBuffer(b);\n}\n\n/**\r\n  * socket通信转流\r\n  * @param string\r\n  * @returns [*]\r\n  */\nfunction fillstr2ab(str, buf, offset) {\n  var uint8array = new TextEncoder().encode(str);\n  var strLen = uint8array.length;\n  var bufView = new Uint8Array(buf, offset, strLen);\n  for (var i = 0; i < strLen; i++) {\n    bufView[i] = uint8array[i];\n  }\n}\nfunction fillstr2ab15(str, buf, offset) {//-------------\n  var uint8array = new TextEncoder().encode(str);\n  var strLen = uint8array.length;\n  var bufView = new Uint8Array(buf, offset, strLen);\n  for (var i = 0; i < strLen; i++) {\n    bufView[i] = uint8array[i];\n  }\n  return strLen;\n}\nfunction fillstr2ab201(str, buf, offset) {//-------------\n  var uint8array = new TextEncoder().encode(str);\n  var strLen = uint8array.length;\n  var bufView = new Uint8Array(buf, offset, strLen);\n  for (var i = 0; i < strLen; i++) {\n    bufView[i] = uint8array[i];\n  }\n  return strLen;\n}\nfunction sendD(content) {//10001 用户登录协议\n  var len = content.length;\n  //=========================\n  var bufferRes = new ArrayBuffer(12 + len);\n  var Head = new Int32Array(bufferRes, 0, 3);\n  Head[0] = 12 + len; //len\n  Head[1] = 10001; //cmd\n  fillstr2ab(content, bufferRes, 12);\n  return bufferRes;\n}\nfunction sendD06(content) {//11006 更新币值（服务端->客户端））\n  var len = content.length;\n  //=========================\n  var bufferRes = new ArrayBuffer(12 + len);\n  var Head = new Int32Array(bufferRes, 0, 3);\n  Head[0] = 12 + len; //len\n  Head[1] = 11006; //cmd\n  fillstr2ab(content, bufferRes, 12);\n  return bufferRes;\n}\nfunction sendD110(content) {//11000 心跳发包（客户端->服务端）\n  var len = content.length;\n  //=========================\n  var bufferRes = new ArrayBuffer(12 + len);\n  var Head = new Int32Array(bufferRes, 0, 3);\n  Head[0] = 12 + len; //len\n  Head[1] = 11000; //cmd\n  fillstr2ab(content, bufferRes, 12);\n  return bufferRes;\n}\nfunction sendD07(content) {//11007 关注或取消关注（客户端->服务端）\n  var len = content.length;\n  //=========================\n  var bufferRes = new ArrayBuffer(12 + len);\n  var Head = new Int32Array(bufferRes, 0, 3);\n  Head[0] = 12 + len; //len\n  Head[1] = 11007; //cmd\n  fillstr2ab(content, bufferRes, 12);\n  return bufferRes;\n}\nfunction sendD09(content) {//11009 拉黑或取消拉黑（客户端->服务端）\n  var len = content.length;\n  //=========================\n  var bufferRes = new ArrayBuffer(12 + len);\n  var Head = new Int32Array(bufferRes, 0, 3);\n  Head[0] = 12 + len; //len\n  Head[1] = 11009; //cmd\n  fillstr2ab(content, bufferRes, 12);\n  return bufferRes;\n}\nfunction sendD11(content) {//11011 设置喜好（客户端->服务端）\n  var len = content.length;\n  //=========================\n  var bufferRes = new ArrayBuffer(12 + len);\n  var Head = new Int32Array(bufferRes, 0, 3);\n  Head[0] = 12 + len; //len\n  Head[1] = 11011; //cmd\n  fillstr2ab(content, bufferRes, 12);\n  return bufferRes;\n}\nfunction sendD13(content) {//11013 设置语言（客户端->服务端）\n  var len = content.length;\n  //=========================\n  var bufferRes = new ArrayBuffer(12 + len);\n  var Head = new Int32Array(bufferRes, 0, 3);\n  Head[0] = 12 + len; //len\n  Head[1] = 11013; //cmd\n  fillstr2ab(content, bufferRes, 12);\n  return bufferRes;\n}\nfunction sendD15(content) {//11015 设置个性签名------\n  var len = content.length;\n  //=========================\n  var bufferRes = new ArrayBuffer(12 + len * 3);\n  var Head = new Int32Array(bufferRes, 0, 3);\n  Head[0] = 12 + fillstr2ab15(content, bufferRes, 12); //len\n  // console.log(Head[0])\n  Head[1] = 11015; //cmd\n  return bufferRes.slice(0, Head[0]);\n}\nfunction sendD17(content) {//11017 获取主播私信价格（客户端->服务端）\n  var len = content.length;\n  //=========================\n  var bufferRes = new ArrayBuffer(12 + len);\n  var Head = new Int32Array(bufferRes, 0, 3);\n  Head[0] = 12 + len; //len\n  Head[1] = 11017; //cmd\n  fillstr2ab(content, bufferRes, 12);\n  return bufferRes;\n}\nfunction sendD201(content) {//20001 用户聊天消息发送（客户端->服务端）\n  var len = content.length;\n  //=========================\n  var bufferRes = new ArrayBuffer(12 + len * 3);\n  var Head = new Int32Array(bufferRes, 0, 3);\n  Head[0] = 12 + fillstr2ab201(content, bufferRes, 12); //len\n  Head[1] = 20001; //cmd\n  return bufferRes.slice(0, Head[0]);\n}\nfunction sendD207(content) {//20007 客户端拉离线消息（客户端->服务端）\n  var len = content.length;\n  //=========================\n  var bufferRes = new ArrayBuffer(12 + len);\n  var Head = new Int32Array(bufferRes, 0, 3);\n  Head[0] = 12 + len; //len\n  Head[1] = 20007; //cmd\n  fillstr2ab(content, bufferRes, 12);\n  return bufferRes;\n}\nfunction sendD209(content) {//20009 客户端读取消息确认，对应消息20008（客户端->服务端）\n  var len = content.length;\n  //=========================\n  var bufferRes = new ArrayBuffer(12 + len);\n  var Head = new Int32Array(bufferRes, 0, 3);\n  Head[0] = 12 + len; //len\n  Head[1] = 20009; //cmd\n  fillstr2ab(content, bufferRes, 12);\n  return bufferRes;\n}\nfunction sendD217(content) {//20017 客户端查询消息（客户端->服务端）\n  var len = content.length;\n  //=========================\n  var bufferRes = new ArrayBuffer(12 + len);\n  var Head = new Int32Array(bufferRes, 0, 3);\n  Head[0] = 12 + len; //len\n  Head[1] = 20017; //cmd\n  fillstr2ab(content, bufferRes, 12);\n  return bufferRes;\n}\nfunction sendD204(content) {//20004 B读取消息后，告诉服务端已读（客户端->服务端）\n  var len = content.length;\n  //=========================\n  var bufferRes = new ArrayBuffer(12 + len);\n  var Head = new Int32Array(bufferRes, 0, 3);\n  Head[0] = 12 + len; //len\n  Head[1] = 20004; //cmd\n  fillstr2ab(content, bufferRes, 12);\n  return bufferRes;\n}\n/**\r\n  * 流转string\r\n  * @param Blob\r\n  * @returns [string]\r\n  */\nfunction work(data) {// someErr\n  var fileReader = new FileReader();\n  fileReader.onload = function (progressEvent) {\n    var arrayBuffer = this.result; // arrayBuffer即为blob对应的arrayBuffer\n    var HeadRecv = new Uint32Array(arrayBuffer, 0, 3);\n    var strArray = new Uint8Array(arrayBuffer, 12, HeadRecv[0] - 12 - 1);\n    var str = new TextDecoder().decode(strArray); //{\"code\":-1,\"error\":\"用户名或密码错误\"}\n    // console.log(HeadRecv[1],JSON.parse(str))\n    //to do\n    __f__(\"log\", HeadRecv[1], \" at lib/js/GlobalFunction.js:511\");\n    __f__(\"log\", JSON.parse(str), \" at lib/js/GlobalFunction.js:512\");\n  };\n  fileReader.readAsArrayBuffer(data);\n}\n\n\n\n\n\n\n\n/**\r\n  * 国籍通用邮箱正则\r\n  * @param string\r\n  * @returns [true?false]\r\n  */\nfunction regMail(str) {\n  var reg = new RegExp(\"^[a-z0-9A-Z]+[- | a-z0-9A-Z . _]+@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\\\\.)+[a-z]{2,}$\");\n  var test = reg.test(str);\n  // console.log(test);\n  if (test) {\n    return true;\n  } else {\n    return false;\n  }\n}\n/**\r\n  * 将图片转换为Base64   暂未使用    使用的是其他方法详见上传函数\r\n  * @param string url 图片链接或者是blob对象 callback 回调函数\r\n  * @returns base64\r\n  */\nfunction getImgToBase64(url, callback) {\n  var canvas = document.createElement('canvas'),\n  ctx = canvas.getContext('2d'),\n  img = new Image(); //通过构造函数来创建的 img 实例，在赋予 src 值后就会立刻下载图片，相比 createElement() 创建 <img> 省去了 append()，也就避免了文档冗余和污染\n  img.crossOrigin = 'Anonymous';\n  img.onload = function () {//要先确保图片完整获取到，这是个异步事件\n    canvas.height = img.height; //确保canvas的尺寸和图片一样\n    canvas.width = img.width;\n    ctx.drawImage(img, 0, 0); //将图片绘制到canvas中\n    var dataURL = canvas.toDataURL('image/png'); //转换图片为dataURL,传第二个参数可压缩图片,前提是图片格式jpeg或者webp格式的\n    callback(dataURL); //调用回调函数\n    canvas = null;\n  };\n  img.src = url;\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 2)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///22\n");

/***/ }),
/* 23 */
/*!***********************************************************************************************!*\
  !*** C:/Users/TG/Documents/HBuilderProjects/livePusherT_android/lib/socket/modules/handle.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.webMsg = webMsg;var _index = _interopRequireDefault(__webpack_require__(/*! ../../../store/index.js */ 14));\nvar _GlobalFunction = __webpack_require__(/*! ../../js/GlobalFunction.js */ 22);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\nfunction webMsg(code, data) {\n  __f__(\"log\", '收到新消息===》start', \" at lib/socket/modules/handle.js:4\");\n  // console.log(store)\n  __f__(\"log\", code, \" at lib/socket/modules/handle.js:6\");\n  __f__(\"log\", data, \" at lib/socket/modules/handle.js:7\");\n  __f__(\"log\", '收到新消息===》end', \" at lib/socket/modules/handle.js:8\");\n  if (code == 10002) {//10002 <===10001 登录协议  登录成功\n    uni.setStorage({\n      key: 'storage_login_language',\n      data: \"1\",\n      success: function success() {\n      } });\n\n    uni.setStorage({\n      key: 'storage_login_str',\n      data: JSON.stringify(data),\n      success: function success() {\n        // console.log('success');\n      } });\n\n    _index.default.commit(\"set_allLoginInfo\", data);\n    if (_index.default.getters['AllallisRelogin'] == false) {\n      // navigateTo('/pages/home/home',null);\n      __f__(\"log\", '登录成功', \" at lib/socket/modules/handle.js:26\");\n\n    } else {\n      __f__(\"log\", '断线重连成功', \" at lib/socket/modules/handle.js:29\");\n      __f__(\"log\", _index.default.getters['AllallTryLoginData'], \" at lib/socket/modules/handle.js:30\");\n      // uni.sendSocketMessage({//\n      //     data: sendDSocket(store.getters['AllallTryLoginData'].msg,store.getters['AllallTryLoginData'].num),\n      //     success(res) {\n      //     },\n      //     complete(com) {\n      //     \tconsole.log(com)\n      //     }\n      // });\n    }\n  } else\n  if (code == 31018) {//推流地址\n    _index.default.commit(\"set_allPusherAddress\", data.rtmppush);\n\n  } else\n  if (code == 31002) {//31002  -----31001 （服务端->客户端）\n    if (data.code == 0) {\n      setInterval(function () {\n        __f__(\"log\", 111 + '直播心跳正常', \" at lib/socket/modules/handle.js:48\");\n        var msg = JSON.stringify({ \"statidx\": 1000036, //主播id\n          \"backaddress\": \"\" } //回放地址\n        );\n        uni.sendSocketMessage({\n          data: (0, _GlobalFunction.sendDSocket)(msg, 31015),\n          success: function success(res) {\n            // console.log(res)\n          },\n          fail: function fail(err) {\n            // console.log(err)\n          },\n          complete: function complete(com) {\n            __f__(\"log\", com, \" at lib/socket/modules/handle.js:61\");\n          } });\n\n\n      }, 5000);\n    } else {\n      uni.showToast({\n        title: data.error,\n        duration: 2000,\n        icon: \"none\" });\n\n    }\n\n  } else\n  if (code == 10003) {//10003 登录失败返回信息（服务端->客户端）\n    if (data.code == -2) {\n      (0, _GlobalFunction.navigateTo)('/pages/startup/startup', null);\n    } else {\n      uni.showToast({\n        title: data.error,\n        duration: 2000,\n        icon: \"none\" });\n\n    }\n\n  } else\n  if (code == 11002) {//11002 系统消息（服务端->客户端） ok\n    uni.showToast({\n      title: data.content,\n      duration: 1500,\n      icon: \"none\" });\n\n  } else\n  if (code == 11006) {//11006 更新币值（服务端->客户端）\n    var arr = _index.default.getters['AllallLoginInfo'];\n    arr.cash = data.cash;\n    _index.default.commit(\"set_allLoginInfo\", arr);\n  } else\n  if (code == 11024) {//11024 推荐视频（服务端->客户端）\n    _index.default.commit(\"set_allHomeVideoData\", data);\n  } else\n  if (code == 10010) {//10010 重新登录（服务端->客户端）\n    // console.log(store.getters['AllallIsStartUp'])\n    // console.log(store.getters['AllallIsTravalUser'])\n    if (_index.default.getters['AllallIsTravalUser'] == false) {\n      if (_index.default.getters['AllallIsStartUp'] == true) {\n        _index.default.commit(\"set_allisRelogin\", true);\n      } else {\n        __f__(\"log\", '即将断线重连', \" at lib/socket/modules/handle.js:109\");\n        _index.default.commit(\"set_allisRelogin\", true);\n        __f__(\"log\", _index.default.getters['AllallLoginInfo'], \" at lib/socket/modules/handle.js:111\");\n        var array = JSON.stringify({\n          \"userName\": JSON.stringify(_index.default.getters['AllallLoginInfo'].useridx),\n          \"pwd\": _index.default.getters['AllallLoginInfo'].logintoken,\n          \"devId\": 'systemId()',\n          \"devType\": 'android',\n          \"productType\": 3,\n          \"isRelogin\": true,\n          \"loginWay\": 0,\n          \"language\": 0,\n          \"ver\": \"1.00\",\n          \"ip\": \"127.0.0.1\" });\n\n        uni.sendSocketMessage({ //\n          data: (0, _GlobalFunction.sendDSocket)(array, 10001),\n          success: function success(res) {\n          },\n          complete: function complete(com) {\n            __f__(\"log\", com, \" at lib/socket/modules/handle.js:129\");\n          } });\n\n      }\n    }\n\n\n\n    // store.commit(\"set_allHomeVideoData\",data)\n  } else\n  if (code == 20008) {//20008 <===20007（服务端->客户端）\n    // console.log(store.getters['AllallChatList'])\n    // console.log(data)\n    var chatList = _index.default.getters['AllallChatList'];\n    var msgdata = data;\n    chatList.forEach(function (value, index) {\n      // console.log(value.useridx)//聊天对象idx\n      msgdata.msgs.forEach(function (value1, index1) {\n        if (value.useridx == value1.useridx) {\n          value.newMsgData.push(value1);\n        }\n        // console.log(value1.useridx)//聊天对象idx\n      });\n    });\n    _index.default.commit(\"set_allChatList\", chatList);\n    var maxMsgIdData = []; //msgId数组\n    msgdata.msgs.forEach(function (value1, index1) {\n      maxMsgIdData.push(value1.msgId);\n      // console.log(value1.useridx)//聊天对象idx\n    });\n    var maxMsgId = maxMsgIdData.sort(function (a, b) {\n      return b - a;\n    })[0];\n    // console.log(maxMsgId)\n    // console.log(store.getters['AllallLoginInfo'].useridx)\n    if (maxMsgId != undefined) {\n      var arrayR = JSON.stringify({\n        \"appId\": 100, //   int   APP ID\n        \"msgId\": maxMsgId, //最大msgId\n        \"useridx\": _index.default.getters['AllallLoginInfo'].useridx //   int   发送者\n      });\n      uni.sendSocketMessage({ //\n        data: (0, _GlobalFunction.sendDSocket)(arrayR, 20009), //20009 客户端读取消息确认，对应消息20008（客户端->服务端）\n        success: function success(res) {\n        },\n        complete: function complete(com) {\n          __f__(\"log\", com, \" at lib/socket/modules/handle.js:175\");\n        } });\n\n    }\n\n  } else\n  if (code == 11018) {//11018 获取主播私信价格结果（服务端->客户端）\n    _index.default.commit(\"set_allChatPrice\", data);\n  } else\n  if (code == 20018) {//20018 回复用户消息，对应消息20017（服务端->客户端）\n    // 拉取原始消息成功==》开始处理\n    // console.log(store.getters['AllallchatObjInfo'])//聊天对象信息\n    // console.log(store.getters['AllallLoginInfo'])//自己信息\n    // console.log(store.getters['AllallNoGiftList'])//自己信息\n    var msgdata = data;\n    msgdata.msgs.forEach(function (value, index) {\n      var hours = new Date(value.timestamp * 1000).getHours();\n      var minuts = new Date(value.timestamp * 1000).getMinutes() < 10 ? '0' + new Date(value.timestamp * 1000).getMinutes() : new Date(value.timestamp * 1000).getMinutes();\n      value.nowTime = hours + \":\" + minuts;\n      if (value.useridx == _index.default.getters['AllallLoginInfo'].useridx) {//direction 方向 0为自己 1 为当前聊天对象 photo \n        value.direction = 0;\n        value.photo = '';\n      } else {\n        value.direction = 1;\n        value.photo = _index.default.getters['AllallchatObjInfo'].headpic; //、that.chatObjHeadpic\n      }\n\n      if (value.type == 5) {//1:文本 2.图片 3.视频 5.礼物 6.作品\n        var xitong = (0, _GlobalFunction.system)();\n        _index.default.getters['AllallNoGiftList'].forEach(function (value1, index1) {\n          // console.log(value1);\n          if (value.attach.giftId == value1.giftId) {\n            if (xitong == 'ios') {\n              value.giftPhoto = value1.icon; //png\n            } else if (xitong == 'android') {\n              value.giftPhoto = value1.iconCartoon; //webp\n            }\n          }\n        });\n      } else if (value.type == 2) {\n        value.content = JSON.parse(value.content);\n        value.giftPhoto = '';\n      } else if (value.type == 3) {\n        value.content = JSON.parse(value.content);\n        // console.log(value)\n        value.giftPhoto = '';\n      } else if (value.type == 6) {\n        value.content = JSON.parse(value.content);\n        // console.log(value)\n        value.giftPhoto = '';\n      } else {\n        value.giftPhoto = '';\n      }\n    });\n    _index.default.commit(\"set_allChatObjToObjList\", msgdata);\n  } else\n  if (code == 20003) {//20003===>20004 推送消息给客户端（服务端->客户端）A发送消息给B，B如果在线的话，会推送消息给B\n    _index.default.commit(\"set_allChatPageIsNew\", data);\n    __f__(\"log\", _index.default.getters['AllallIsChatpop'], \" at lib/socket/modules/handle.js:233\");\n    if (_index.default.getters['AllallIsChatpop'] == false) {//不是pop 不坐处理\n\n    } else if (_index.default.getters['AllallIsChatpop'] == true) {\n      var array = JSON.stringify({\n        \"appId\": 100, //APP ID\n        \"msgId\": data.msgId, //消息ID\n        \"useridx\": Number(_index.default.getters['AllallLoginInfo'].useridx), //用户自己的 idx\n        \"fromUseridx\": Number(data.useridx), //对应 str里面的 useridx\n        \"toUseridx\": Number(data.toUseridx) //对应 str里面的 touseridx\n      });\n      uni.sendSocketMessage({ //\n        data: (0, _GlobalFunction.sendDSocket)(array, 20004),\n        success: function success(res) {},\n        complete: function complete(com) {\n          __f__(\"log\", com, \" at lib/socket/modules/handle.js:248\");\n        } });\n\n      // 处理收到的消息\n      var value = data;\n      var hours = new Date(value.timestamp * 1000).getHours();\n      var minuts = new Date(value.timestamp * 1000).getMinutes() < 10 ? '0' + new Date(value.timestamp * 1000).getMinutes() : new Date(value.timestamp * 1000).getMinutes();\n      value.nowTime = hours + \":\" + minuts;\n      if (value.useridx == _index.default.getters['AllallLoginInfo'].useridx) {//direction 方向 0为自己 1 为当前聊天对象 photo \n        value.direction = 0;\n        value.photo = '';\n      } else {\n        value.direction = 1;\n        value.photo = _index.default.getters['AllallchatObjInfo'].headpic; //对象的\n      }\n\n      if (value.type == 5) {//1:文本 2.图片 3.视频 5.礼物 6.作品\n        var xitong = (0, _GlobalFunction.system)();\n        _index.default.getters['AllallNoGiftList'].forEach(function (value1, index1) {\n          // console.log(value1);\n          if (value.attach.giftId == value1.giftId) {\n            // console.log(xitong)\n            if (xitong == 'ios') {\n              value.giftPhoto = value1.icon; //png\n            } else if (xitong == 'android') {\n              value.giftPhoto = value1.iconCartoon; //webp\n            }\n          }\n        });\n      } else if (value.type == 2) {\n        value.content = JSON.parse(value.content);\n        value.giftPhoto = '';\n      } else if (value.type == 3) {\n        value.content = JSON.parse(value.content);\n        // console.log(value)\n        value.giftPhoto = '';\n      } else if (value.type == 6) {\n        value.content = JSON.parse(value.content);\n        // console.log(value)\n        value.giftPhoto = '';\n      } else {\n        value.giftPhoto = '';\n      }\n\n      __f__(\"log\", _index.default.getters['AllallchatObjInfo'], \" at lib/socket/modules/handle.js:292\");\n      if (value.useridx == _index.default.getters['AllallchatObjInfo'].useridx) {\n        __f__(\"log\", _index.default.getters['AllallChatObjToObjList'], \" at lib/socket/modules/handle.js:294\");\n        var newArr = _index.default.getters['AllallChatObjToObjList'];\n        newArr.msgs.push(value);\n        _index.default.commit(\"set_allChatObjToObjList\", newArr);\n      }\n    }\n\n\n  } else\n  if (code == 20004) {//20004<===20003\n    __f__(\"log\", 20004 + '回复服务器 收到消息成功', \" at lib/socket/modules/handle.js:304\");\n  } else\n  if (code == 20002) {//20002<===20001 消息接收确认（服务端->客户端） 服务器是否成功接纳了用户发来的消息\n    __f__(\"log\", 20002 + '回复服务器 收到消息成功', \" at lib/socket/modules/handle.js:307\");\n    __f__(\"log\", _index.default.getters['AllallchatObjInfo'], \" at lib/socket/modules/handle.js:308\");\n    var array = JSON.stringify({\n      \"appId\": 100, //APP ID\n      \"msgId\": 0, //消息ID\n      \"useridx\": Number(_index.default.getters['AllallLoginInfo'].useridx), //用户ID\n      \"toUseridx\": Number(_index.default.getters['AllallchatObjInfo'].useridx) });\n\n    uni.sendSocketMessage({ //\n      data: (0, _GlobalFunction.sendDSocket)(array, 20017),\n      success: function success(res) {},\n      complete: function complete(com) {\n        __f__(\"log\", com, \" at lib/socket/modules/handle.js:319\");\n      } });\n\n  } else\n  if (code == 11008) {//11008<===11007 11008 关注或取消关注结果（服务端->客户端）\n    // console.log(11008+'回复服务器 收到消息成功')\n    // console.log(store.getters['AllallFollowStatus'])\n    if (_index.default.getters['AllallFollowStatus'] == 0) {\n      _index.default.commit(\"set_allFollowStatus\", 1);\n    } else if (_index.default.getters['AllallFollowStatus'] == 1) {\n      _index.default.commit(\"set_allFollowStatus\", 0);\n    }\n\n  } else\n  if (code == 11010) {//11010<===11009 11010 拉黑或取消拉黑结果（服务端->客户端）\n    if (_index.default.getters['AllallBlackStatus'] == 0) {\n      _index.default.commit(\"set_allBlackStatus\", 1);\n      uni.showToast({\n        title: '拉黑成功',\n        duration: 1000,\n        icon: \"none\",\n        success: function success() {} });\n\n    } else if (_index.default.getters['AllallBlackStatus'] == 1) {\n      _index.default.commit(\"set_allBlackStatus\", 0);\n      uni.showToast({\n        title: '解除成功',\n        duration: 1000,\n        icon: \"none\",\n        success: function success() {} });\n\n    }\n  } else\n  if (code == 11012) {//11012<===11011 11012 设置喜好结果（服务端->客户端））\n    uni.showToast({\n      title: '设置成功',\n      duration: 1000,\n      icon: \"none\",\n      success: function success() {} });\n\n    var arr = _index.default.getters['AllallLoginInfo'];\n    arr.preference = _index.default.getters['AllallSexStatus'];\n    _index.default.commit(\"set_allLoginInfo\", arr);\n    // if(store.getters['AllallBlackStatus']==0){\n    // \tstore.commit(\"set_allBlackStatus\",1)\n    // }else if(store.getters['AllallBlackStatus']==1){\n    // \tstore.commit(\"set_allBlackStatus\",0)\n    // }\n  } else\n  if (code == 31006) {//31006<===31005 31006 进入直播间确认（服务端->客户端）\n    __f__(\"log\", data, \" at lib/socket/modules/handle.js:369\");\n    if (data.code == 0) {\n      _index.default.commit(\"set_allLiveRoomNum\", data.usersum);\n      _index.default.commit(\"set_allLiveChatList\", []);\n      _index.default.commit(\"set_allLiveGiftList\", []);\n      // navigateTo('/pages/liveroom/liveroom',null);\n    } else {\n      uni.showToast({\n        title: data.error,\n        duration: 1000,\n        icon: \"none\",\n        success: function success(res) {},\n        fail: function fail(err) {},\n        complete: function complete(com) {\n          (0, _GlobalFunction.navigateTo)('/pages/home/home', null);\n        } });\n\n    }\n\n  } else\n  if (code == 31014) {//31014    31014 当前直播间人数更新（服务端->客户端）\n    _index.default.commit(\"set_allLiveRoomNum\", data.usersum);\n  } else\n  if (code == 31013) {//31013<===31009礼物 and 消息 31011 群发礼物以及聊天消息 （服务端->客户端）\n    // {\n    // \t\"type\": 1,                 //消息类型 1文字聊天  2送礼\n    // \t\"usernick\": \"\",            //用户昵称\n    // \t\"content\":  \"\",   //消息内容\n    // \t\"timestamp\": 147897989,            //时间戳\n    // \t\"attach\":  {\"giftid\": 11,\"num\": 5} //礼物内容 礼物id 礼物数量\n    // };\n    __f__(\"log\", data, \" at lib/socket/modules/handle.js:400\");\n    if (data.type == 1) {// 文字聊天处理\n      var chatArray = _index.default.getters['AllallLiveChatList'];\n      __f__(\"log\", chatArray, \" at lib/socket/modules/handle.js:403\");\n      __f__(\"log\", chatArray.length, \" at lib/socket/modules/handle.js:404\");\n      if (chatArray.length < 6) {//\n        chatArray.push(data);\n        _index.default.commit(\"set_allLiveChatList\", chatArray);\n      } else {\n        chatArray.shift();\n        chatArray.push(data);\n        _index.default.commit(\"set_allLiveChatList\", chatArray);\n      }\n    } else if (data.type == 2) {// 礼物展示处理\n      var giftArray = _index.default.getters['AllallLiveGiftList'];\n      giftArray = [];\n      var noGiftData = _index.default.getters['AllallNoGiftList'];\n      noGiftData.forEach(function (item, index) {\n        if (item.giftId == data.attach.giftid) {\n          data.icon = item.icon;\n          data.iconCartoon = item.icon;\n          data.giftName = item.content;\n        }\n      });\n      var chatArray = _index.default.getters['AllallLiveChatList'];\n      __f__(\"log\", chatArray, \" at lib/socket/modules/handle.js:425\");\n      __f__(\"log\", chatArray.length, \" at lib/socket/modules/handle.js:426\");\n      if (chatArray.length < 6) {//\n        chatArray.push(data);\n        _index.default.commit(\"set_allLiveChatList\", chatArray);\n      } else {\n        chatArray.shift();\n        chatArray.push(data);\n        _index.default.commit(\"set_allLiveChatList\", chatArray);\n      }\n      // 展示礼物\n      giftArray.push(data);\n      _index.default.commit(\"set_allLiveGiftList\", giftArray);\n      setTimeout(function () {\n        _index.default.commit(\"set_allLiveGiftList\", []);\n      }, 1500);\n    } else if (data.type == 3) {\n      var systemmsg = data.usernick + data.content;\n      _index.default.commit(\"set_allSystemMsg\", systemmsg);\n    }\n  } else\n  if (code == 31008) {//31008<===31007 31008 离开直播间确认（服务端->客户端）\n\n  } else\n  if (code == 31016) {//31016<===    31016 主播断线重连，用户更新直播地址（服务端->客户端）\n    //主播断线重连房间id变化\n    _index.default.commit(\"set_allRoomid\", data.liveaddress);\n  } else\n  if (code == 11016) {//11016<===11015 设置个性签名------\n    // console.log('收到新消息===》'+code)\n    // console.log(data)\n    // console.log(store)\n    uni.showToast({\n      title: data.error,\n      duration: 1500,\n      icon: \"none\",\n      success: function success(res) {\n      },\n      fail: function fail(err) {\n      },\n      complete: function complete(com) {\n      } });\n\n  } else\n  if (code == 11001) {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  } //11001<===11000\n  // console.log('收到新消息===》'+code)\n  // console.log(data)\n  // console.log(store)\n  // uni.showToast({\n  // \ttitle: '设置成功',\n  // \tduration: 5000,\n  // \ticon:\"none\",\n  // \t\tsuccess(res) {\n  // \t\t\t// console.log(1112)\n  // \t\t},\n  // \t\tfail(err) {\n  // \t\t\t// console.log(2223)\n  // \t\t},\n  // \t\tcomplete(com) {\n  // \t\t\t// console.log(3334)\n  // \t\t}\n  // });\n  // Handle.do110()\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 2)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbGliL3NvY2tldC9tb2R1bGVzL2hhbmRsZS5qcyJdLCJuYW1lcyI6WyJ3ZWJNc2ciLCJjb2RlIiwiZGF0YSIsInVuaSIsInNldFN0b3JhZ2UiLCJrZXkiLCJzdWNjZXNzIiwiSlNPTiIsInN0cmluZ2lmeSIsInN0b3JlIiwiY29tbWl0IiwiZ2V0dGVycyIsInJ0bXBwdXNoIiwic2V0SW50ZXJ2YWwiLCJtc2ciLCJzZW5kU29ja2V0TWVzc2FnZSIsInJlcyIsImZhaWwiLCJlcnIiLCJjb21wbGV0ZSIsImNvbSIsInNob3dUb2FzdCIsInRpdGxlIiwiZXJyb3IiLCJkdXJhdGlvbiIsImljb24iLCJjb250ZW50IiwiYXJyIiwiY2FzaCIsImFycmF5IiwidXNlcmlkeCIsImxvZ2ludG9rZW4iLCJjaGF0TGlzdCIsIm1zZ2RhdGEiLCJmb3JFYWNoIiwidmFsdWUiLCJpbmRleCIsIm1zZ3MiLCJ2YWx1ZTEiLCJpbmRleDEiLCJuZXdNc2dEYXRhIiwicHVzaCIsIm1heE1zZ0lkRGF0YSIsIm1zZ0lkIiwibWF4TXNnSWQiLCJzb3J0IiwiYSIsImIiLCJ1bmRlZmluZWQiLCJhcnJheVIiLCJob3VycyIsIkRhdGUiLCJ0aW1lc3RhbXAiLCJnZXRIb3VycyIsIm1pbnV0cyIsImdldE1pbnV0ZXMiLCJub3dUaW1lIiwiZGlyZWN0aW9uIiwicGhvdG8iLCJoZWFkcGljIiwidHlwZSIsInhpdG9uZyIsImF0dGFjaCIsImdpZnRJZCIsImdpZnRQaG90byIsImljb25DYXJ0b29uIiwicGFyc2UiLCJOdW1iZXIiLCJ0b1VzZXJpZHgiLCJuZXdBcnIiLCJwcmVmZXJlbmNlIiwidXNlcnN1bSIsImNoYXRBcnJheSIsImxlbmd0aCIsInNoaWZ0IiwiZ2lmdEFycmF5Iiwibm9HaWZ0RGF0YSIsIml0ZW0iLCJnaWZ0aWQiLCJnaWZ0TmFtZSIsInNldFRpbWVvdXQiLCJzeXN0ZW1tc2ciLCJ1c2VybmljayIsImxpdmVhZGRyZXNzIl0sIm1hcHBpbmdzIjoibUlBQUM7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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBLEMiLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgaW1wb3J0IHN0b3JlIGZyb20gJy4uLy4uLy4uL3N0b3JlL2luZGV4LmpzJ1xyXG4gaW1wb3J0IHtuYXZpZ2F0ZVRvLHN5c3RlbUlkLHN5c3RlbSxzZW5kRFNvY2tldCxwcm9kdWN0VHlwZX0gZnJvbSBcIi4uLy4uL2pzL0dsb2JhbEZ1bmN0aW9uLmpzXCJcclxuIGV4cG9ydCBmdW5jdGlvbiB3ZWJNc2coY29kZSxkYXRhKSB7XHJcblx0IGNvbnNvbGUubG9nKCfmlLbliLDmlrDmtojmga89PT3jgItzdGFydCcpXHJcblx0IC8vIGNvbnNvbGUubG9nKHN0b3JlKVxyXG5cdCBjb25zb2xlLmxvZyhjb2RlKVxyXG5cdCBjb25zb2xlLmxvZyhkYXRhKVxyXG5cdCBjb25zb2xlLmxvZygn5pS25Yiw5paw5raI5oGvPT0944CLZW5kJylcclxuXHRpZihjb2RlPT0xMDAwMil7Ly8xMDAwMiA8PT09MTAwMDEg55m75b2V5Y2P6K6uICDnmbvlvZXmiJDlip9cclxuXHRcdHVuaS5zZXRTdG9yYWdlKHtcclxuXHRcdFx0a2V5OiAnc3RvcmFnZV9sb2dpbl9sYW5ndWFnZScsXHJcblx0XHRcdGRhdGE6IFwiMVwiLFxyXG5cdFx0XHRzdWNjZXNzOiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0dW5pLnNldFN0b3JhZ2Uoe1xyXG5cdFx0XHRrZXk6ICdzdG9yYWdlX2xvZ2luX3N0cicsXHJcblx0XHRcdGRhdGE6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxyXG5cdFx0XHRzdWNjZXNzOiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0Ly8gY29uc29sZS5sb2coJ3N1Y2Nlc3MnKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRzdG9yZS5jb21taXQoXCJzZXRfYWxsTG9naW5JbmZvXCIsZGF0YSlcclxuXHRcdGlmKHN0b3JlLmdldHRlcnNbJ0FsbGFsbGlzUmVsb2dpbiddPT1mYWxzZSl7XHJcblx0XHRcdC8vIG5hdmlnYXRlVG8oJy9wYWdlcy9ob21lL2hvbWUnLG51bGwpO1xyXG5cdFx0XHRjb25zb2xlLmxvZygn55m75b2V5oiQ5YqfJylcclxuXHRcdFx0XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0Y29uc29sZS5sb2coJ+aWree6v+mHjei/nuaIkOWKnycpXHJcblx0XHRcdGNvbnNvbGUubG9nKHN0b3JlLmdldHRlcnNbJ0FsbGFsbFRyeUxvZ2luRGF0YSddKVxyXG5cdFx0XHQvLyB1bmkuc2VuZFNvY2tldE1lc3NhZ2Uoey8vXHJcblx0XHRcdC8vICAgICBkYXRhOiBzZW5kRFNvY2tldChzdG9yZS5nZXR0ZXJzWydBbGxhbGxUcnlMb2dpbkRhdGEnXS5tc2csc3RvcmUuZ2V0dGVyc1snQWxsYWxsVHJ5TG9naW5EYXRhJ10ubnVtKSxcclxuXHRcdFx0Ly8gICAgIHN1Y2Nlc3MocmVzKSB7XHJcblx0XHRcdC8vICAgICB9LFxyXG5cdFx0XHQvLyAgICAgY29tcGxldGUoY29tKSB7XHJcblx0XHRcdC8vICAgICBcdGNvbnNvbGUubG9nKGNvbSlcclxuXHRcdFx0Ly8gICAgIH1cclxuXHRcdFx0Ly8gfSk7XHJcblx0XHR9XHRcclxuXHR9XHJcblx0ZWxzZSBpZihjb2RlPT0zMTAxOCl7Ly/mjqjmtYHlnLDlnYBcclxuXHRcdHN0b3JlLmNvbW1pdChcInNldF9hbGxQdXNoZXJBZGRyZXNzXCIsZGF0YS5ydG1wcHVzaClcclxuXHRcdFxyXG5cdH1cclxuXHRlbHNlIGlmKGNvZGU9PTMxMDAyKXsvLzMxMDAyICAtLS0tLTMxMDAxIO+8iOacjeWKoeerry0+5a6i5oi356uv77yJXHJcblx0XHRpZihkYXRhLmNvZGU9PTApe1xyXG5cdFx0XHRzZXRJbnRlcnZhbChmdW5jdGlvbigpe1xyXG5cdFx0XHRcdCAgY29uc29sZS5sb2coMTExKyfnm7Tmkq3lv4Pot7PmraPluLgnKVxyXG5cdFx0XHRcdCAgdmFyIG1zZyA9IEpTT04uc3RyaW5naWZ5KCAge1wic3RhdGlkeFwiOiAgMTAwMDAzNiwgICAvL+S4u+aSrWlkXHJcblx0XHRcdFx0XHRcdFx0XCJiYWNrYWRkcmVzc1wiOiAgXCJcIn0gICAgICAvL+WbnuaUvuWcsOWdgFxyXG5cdFx0XHRcdFx0XHRcdClcclxuXHRcdFx0XHR1bmkuc2VuZFNvY2tldE1lc3NhZ2Uoe1xyXG5cdFx0XHRcdCAgZGF0YTogc2VuZERTb2NrZXQobXNnLDMxMDE1KSxcclxuXHRcdFx0XHQgIHN1Y2Nlc3MocmVzKSB7XHJcblx0XHRcdFx0ICBcdC8vIGNvbnNvbGUubG9nKHJlcylcclxuXHRcdFx0XHQgIH0sXHJcblx0XHRcdFx0ICBmYWlsKGVycikge1xyXG5cdFx0XHRcdCAgXHQvLyBjb25zb2xlLmxvZyhlcnIpXHJcblx0XHRcdFx0ICB9LFxyXG5cdFx0XHRcdCAgY29tcGxldGUoY29tKSB7XHJcblx0XHRcdFx0ICBcdGNvbnNvbGUubG9nKGNvbSlcclxuXHRcdFx0XHQgIH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHQgXHJcblx0XHRcdH0sNTAwMClcclxuXHRcdH1lbHNle1xyXG5cdFx0XHR1bmkuc2hvd1RvYXN0KHtcclxuXHRcdFx0XHR0aXRsZTogZGF0YS5lcnJvcixcclxuXHRcdFx0XHRkdXJhdGlvbjogMjAwMCxcclxuXHRcdFx0XHRpY29uOlwibm9uZVwiLFxyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdH1cclxuXHRlbHNlIGlmKGNvZGU9PTEwMDAzKXsvLzEwMDAzIOeZu+W9leWksei0pei/lOWbnuS/oeaBr++8iOacjeWKoeerry0+5a6i5oi356uv77yJXHJcblx0XHRpZihkYXRhLmNvZGU9PS0yKXtcclxuXHRcdFx0bmF2aWdhdGVUbygnL3BhZ2VzL3N0YXJ0dXAvc3RhcnR1cCcsbnVsbCk7XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0dW5pLnNob3dUb2FzdCh7XHJcblx0XHRcdFx0dGl0bGU6IGRhdGEuZXJyb3IsXHJcblx0XHRcdFx0ZHVyYXRpb246IDIwMDAsXHJcblx0XHRcdFx0aWNvbjpcIm5vbmVcIixcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0XHRcclxuXHR9XHJcblx0ZWxzZSBpZihjb2RlPT0xMTAwMil7Ly8xMTAwMiDns7vnu5/mtojmga/vvIjmnI3liqHnq68tPuWuouaIt+err++8iSBva1xyXG5cdFx0dW5pLnNob3dUb2FzdCh7XHJcblx0XHRcdHRpdGxlOiBkYXRhLmNvbnRlbnQsXHJcblx0XHRcdGR1cmF0aW9uOiAxNTAwLFxyXG5cdFx0XHRpY29uOlwibm9uZVwiLFxyXG5cdFx0fSk7XHJcblx0fVxyXG5cdGVsc2UgaWYoY29kZT09MTEwMDYpey8vMTEwMDYg5pu05paw5biB5YC877yI5pyN5Yqh56uvLT7lrqLmiLfnq6/vvIlcclxuXHRcdHZhciBhcnIgPSBzdG9yZS5nZXR0ZXJzWydBbGxhbGxMb2dpbkluZm8nXTtcclxuXHRcdGFyci5jYXNoID0gZGF0YS5jYXNoO1xyXG5cdFx0c3RvcmUuY29tbWl0KFwic2V0X2FsbExvZ2luSW5mb1wiLGFycilcclxuXHR9XHJcblx0ZWxzZSBpZihjb2RlPT0xMTAyNCl7Ly8xMTAyNCDmjqjojZDop4bpopHvvIjmnI3liqHnq68tPuWuouaIt+err++8iVxyXG5cdFx0c3RvcmUuY29tbWl0KFwic2V0X2FsbEhvbWVWaWRlb0RhdGFcIixkYXRhKVxyXG5cdH1cclxuXHRlbHNlIGlmKGNvZGU9PTEwMDEwKXsvLzEwMDEwIOmHjeaWsOeZu+W9le+8iOacjeWKoeerry0+5a6i5oi356uv77yJXHJcblx0XHQvLyBjb25zb2xlLmxvZyhzdG9yZS5nZXR0ZXJzWydBbGxhbGxJc1N0YXJ0VXAnXSlcclxuXHRcdC8vIGNvbnNvbGUubG9nKHN0b3JlLmdldHRlcnNbJ0FsbGFsbElzVHJhdmFsVXNlciddKVxyXG5cdFx0aWYoc3RvcmUuZ2V0dGVyc1snQWxsYWxsSXNUcmF2YWxVc2VyJ109PWZhbHNlKXtcclxuXHRcdFx0aWYoc3RvcmUuZ2V0dGVyc1snQWxsYWxsSXNTdGFydFVwJ109PXRydWUpe1xyXG5cdFx0XHRcdHN0b3JlLmNvbW1pdChcInNldF9hbGxpc1JlbG9naW5cIix0cnVlKVxyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRjb25zb2xlLmxvZygn5Y2z5bCG5pat57q/6YeN6L+eJylcclxuXHRcdFx0XHRzdG9yZS5jb21taXQoXCJzZXRfYWxsaXNSZWxvZ2luXCIsdHJ1ZSlcclxuXHRcdFx0XHRjb25zb2xlLmxvZyhzdG9yZS5nZXR0ZXJzWydBbGxhbGxMb2dpbkluZm8nXSlcclxuXHRcdFx0XHR2YXIgYXJyYXkgPUpTT04uc3RyaW5naWZ5KHtcclxuXHRcdFx0XHRcdFwidXNlck5hbWVcIjogSlNPTi5zdHJpbmdpZnkoc3RvcmUuZ2V0dGVyc1snQWxsYWxsTG9naW5JbmZvJ10udXNlcmlkeCksXHJcblx0XHRcdFx0XHRcInB3ZFwiOiBzdG9yZS5nZXR0ZXJzWydBbGxhbGxMb2dpbkluZm8nXS5sb2dpbnRva2VuLFxyXG5cdFx0XHRcdFx0XCJkZXZJZFwiOiAnc3lzdGVtSWQoKScsXHJcblx0XHRcdFx0XHRcImRldlR5cGVcIjogJ2FuZHJvaWQnLFxyXG5cdFx0XHRcdFx0XCJwcm9kdWN0VHlwZVwiOiAzLFxyXG5cdFx0XHRcdFx0XCJpc1JlbG9naW5cIjogdHJ1ZSxcclxuXHRcdFx0XHRcdFwibG9naW5XYXlcIjogMCxcclxuXHRcdFx0XHRcdFwibGFuZ3VhZ2VcIjogMCxcclxuXHRcdFx0XHRcdFwidmVyXCI6IFwiMS4wMFwiLFxyXG5cdFx0XHRcdFx0XCJpcFwiOlwiMTI3LjAuMC4xXCJcclxuXHRcdFx0XHR9KVxyXG5cdFx0XHRcdHVuaS5zZW5kU29ja2V0TWVzc2FnZSh7Ly9cclxuXHRcdFx0XHRcdGRhdGE6IHNlbmREU29ja2V0KGFycmF5LDEwMDAxKSxcclxuXHRcdFx0XHRcdHN1Y2Nlc3MocmVzKSB7XHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0Y29tcGxldGUoY29tKSB7XHJcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKGNvbSlcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHRcclxuXHRcdFxyXG5cdFx0Ly8gc3RvcmUuY29tbWl0KFwic2V0X2FsbEhvbWVWaWRlb0RhdGFcIixkYXRhKVxyXG5cdH1cclxuXHRlbHNlIGlmKGNvZGU9PTIwMDA4KXsvLzIwMDA4IDw9PT0yMDAwN++8iOacjeWKoeerry0+5a6i5oi356uv77yJXHJcblx0XHQvLyBjb25zb2xlLmxvZyhzdG9yZS5nZXR0ZXJzWydBbGxhbGxDaGF0TGlzdCddKVxyXG5cdFx0Ly8gY29uc29sZS5sb2coZGF0YSlcclxuXHRcdHZhciBjaGF0TGlzdCA9IHN0b3JlLmdldHRlcnNbJ0FsbGFsbENoYXRMaXN0J107XHJcblx0XHR2YXIgbXNnZGF0YSA9IGRhdGE7XHJcblx0XHRjaGF0TGlzdC5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSxpbmRleCkge1xyXG5cdFx0XHQvLyBjb25zb2xlLmxvZyh2YWx1ZS51c2VyaWR4KS8v6IGK5aSp5a+56LGhaWR4XHJcblx0XHRcdG1zZ2RhdGEubXNncy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZTEsaW5kZXgxKSB7XHJcblx0XHRcdFx0aWYodmFsdWUudXNlcmlkeD09dmFsdWUxLnVzZXJpZHgpe1xyXG5cdFx0XHRcdFx0dmFsdWUubmV3TXNnRGF0YS5wdXNoKHZhbHVlMSlcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Ly8gY29uc29sZS5sb2codmFsdWUxLnVzZXJpZHgpLy/ogYrlpKnlr7nosaFpZHhcclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHRcdHN0b3JlLmNvbW1pdChcInNldF9hbGxDaGF0TGlzdFwiLGNoYXRMaXN0KVxyXG5cdFx0dmFyIG1heE1zZ0lkRGF0YSA9IFtdOy8vbXNnSWTmlbDnu4RcclxuXHRcdG1zZ2RhdGEubXNncy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZTEsaW5kZXgxKSB7XHJcblx0XHRcdG1heE1zZ0lkRGF0YS5wdXNoKHZhbHVlMS5tc2dJZCk7XHJcblx0XHRcdC8vIGNvbnNvbGUubG9nKHZhbHVlMS51c2VyaWR4KS8v6IGK5aSp5a+56LGhaWR4XHJcblx0XHR9KTtcclxuXHRcdHZhciBtYXhNc2dJZCA9IG1heE1zZ0lkRGF0YS5zb3J0KGZ1bmN0aW9uKGEsYil7XHJcblx0XHRcdHJldHVybiBiLWE7XHJcblx0XHR9KVswXTtcclxuXHRcdC8vIGNvbnNvbGUubG9nKG1heE1zZ0lkKVxyXG5cdFx0Ly8gY29uc29sZS5sb2coc3RvcmUuZ2V0dGVyc1snQWxsYWxsTG9naW5JbmZvJ10udXNlcmlkeClcclxuXHRcdGlmKG1heE1zZ0lkIT11bmRlZmluZWQpe1xyXG5cdFx0XHR2YXIgYXJyYXlSID1KU09OLnN0cmluZ2lmeSh7XHJcblx0XHRcdFx0XCJhcHBJZFwiOiAxMDAsICAgICAgICAgICAgLy8gICBpbnQgICBBUFAgSURcclxuXHRcdFx0XHRcIm1zZ0lkXCI6bWF4TXNnSWQsLy/mnIDlpKdtc2dJZFxyXG5cdFx0XHRcdFwidXNlcmlkeFwiOiBzdG9yZS5nZXR0ZXJzWydBbGxhbGxMb2dpbkluZm8nXS51c2VyaWR4LCAgIC8vICAgaW50ICAg5Y+R6YCB6ICFXHJcblx0XHRcdH0pXHJcblx0XHRcdHVuaS5zZW5kU29ja2V0TWVzc2FnZSh7Ly9cclxuXHRcdFx0ICAgIGRhdGE6IHNlbmREU29ja2V0KGFycmF5UiwyMDAwOSksLy8yMDAwOSDlrqLmiLfnq6/or7vlj5bmtojmga/noa7orqTvvIzlr7nlupTmtojmga8yMDAwOO+8iOWuouaIt+erry0+5pyN5Yqh56uv77yJXHJcblx0XHRcdCAgICBzdWNjZXNzKHJlcykge1xyXG5cdFx0XHQgICAgfSxcclxuXHRcdFx0ICAgIGNvbXBsZXRlKGNvbSkge1xyXG5cdFx0XHQgICAgXHRjb25zb2xlLmxvZyhjb20pXHJcblx0XHRcdCAgICB9XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0fVxyXG5cdGVsc2UgaWYoY29kZT09MTEwMTgpey8vMTEwMTgg6I635Y+W5Li75pKt56eB5L+h5Lu35qC857uT5p6c77yI5pyN5Yqh56uvLT7lrqLmiLfnq6/vvIlcclxuXHRcdHN0b3JlLmNvbW1pdChcInNldF9hbGxDaGF0UHJpY2VcIixkYXRhKVxyXG5cdH1cclxuXHRlbHNlIGlmKGNvZGU9PTIwMDE4KXsvLzIwMDE4IOWbnuWkjeeUqOaIt+a2iOaBr++8jOWvueW6lOa2iOaBrzIwMDE377yI5pyN5Yqh56uvLT7lrqLmiLfnq6/vvIlcclxuXHRcdC8vIOaLieWPluWOn+Wni+a2iOaBr+aIkOWKnz0944CL5byA5aeL5aSE55CGXHJcblx0XHQvLyBjb25zb2xlLmxvZyhzdG9yZS5nZXR0ZXJzWydBbGxhbGxjaGF0T2JqSW5mbyddKS8v6IGK5aSp5a+56LGh5L+h5oGvXHJcblx0XHQvLyBjb25zb2xlLmxvZyhzdG9yZS5nZXR0ZXJzWydBbGxhbGxMb2dpbkluZm8nXSkvL+iHquW3seS/oeaBr1xyXG5cdFx0Ly8gY29uc29sZS5sb2coc3RvcmUuZ2V0dGVyc1snQWxsYWxsTm9HaWZ0TGlzdCddKS8v6Ieq5bex5L+h5oGvXHJcblx0XHR2YXIgbXNnZGF0YSA9IGRhdGE7XHJcblx0XHRtc2dkYXRhLm1zZ3MuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsaW5kZXgpIHtcclxuXHRcdFx0dmFyIGhvdXJzID0gIG5ldyBEYXRlKHZhbHVlLnRpbWVzdGFtcCoxMDAwKS5nZXRIb3VycygpO1xyXG5cdFx0XHR2YXIgbWludXRzID0gIG5ldyBEYXRlKHZhbHVlLnRpbWVzdGFtcCoxMDAwKS5nZXRNaW51dGVzKCk8MTA/JzAnKyBuZXcgRGF0ZSh2YWx1ZS50aW1lc3RhbXAqMTAwMCkuZ2V0TWludXRlcygpOm5ldyBEYXRlKHZhbHVlLnRpbWVzdGFtcCoxMDAwKS5nZXRNaW51dGVzKClcclxuXHRcdFx0dmFsdWUubm93VGltZSA9aG91cnMrXCI6XCIrbWludXRzO1xyXG5cdFx0XHRpZih2YWx1ZS51c2VyaWR4PT1zdG9yZS5nZXR0ZXJzWydBbGxhbGxMb2dpbkluZm8nXS51c2VyaWR4KXsvL2RpcmVjdGlvbiDmlrnlkJEgMOS4uuiHquW3sSAxIOS4uuW9k+WJjeiBiuWkqeWvueixoSBwaG90byBcclxuXHRcdFx0XHR2YWx1ZS5kaXJlY3Rpb24gPSAwXHJcblx0XHRcdFx0dmFsdWUucGhvdG8gPSAnJ1xyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHR2YWx1ZS5kaXJlY3Rpb24gPSAxXHJcblx0XHRcdFx0dmFsdWUucGhvdG8gPSBzdG9yZS5nZXR0ZXJzWydBbGxhbGxjaGF0T2JqSW5mbyddLmhlYWRwaWMvL+OAgXRoYXQuY2hhdE9iakhlYWRwaWNcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0aWYodmFsdWUudHlwZT09NSl7Ly8xOuaWh+acrCAyLuWbvueJhyAzLuinhumikSA1LuekvOeJqSA2LuS9nOWTgVxyXG5cdFx0XHRcdHZhciB4aXRvbmcgPXN5c3RlbSgpXHJcblx0XHRcdFx0c3RvcmUuZ2V0dGVyc1snQWxsYWxsTm9HaWZ0TGlzdCddLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlMSxpbmRleDEpe1xyXG5cdFx0XHRcdFx0Ly8gY29uc29sZS5sb2codmFsdWUxKTtcclxuXHRcdFx0XHRcdGlmKHZhbHVlLmF0dGFjaC5naWZ0SWQ9PXZhbHVlMS5naWZ0SWQpe1xyXG5cdFx0XHRcdFx0XHRpZih4aXRvbmc9PSdpb3MnKXtcclxuXHRcdFx0XHRcdFx0XHR2YWx1ZS5naWZ0UGhvdG8gPSB2YWx1ZTEuaWNvbiAgLy9wbmdcclxuXHRcdFx0XHRcdFx0fWVsc2UgaWYoeGl0b25nPT0nYW5kcm9pZCcpe1xyXG5cdFx0XHRcdFx0XHRcdHZhbHVlLmdpZnRQaG90byA9IHZhbHVlMS5pY29uQ2FydG9vbiAgLy93ZWJwXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KVxyXG5cdFx0XHR9ZWxzZSBpZih2YWx1ZS50eXBlPT0yKXtcclxuXHRcdFx0XHR2YWx1ZS5jb250ZW50PUpTT04ucGFyc2UodmFsdWUuY29udGVudClcclxuXHRcdFx0XHR2YWx1ZS5naWZ0UGhvdG8gPSAnJ1xyXG5cdFx0XHR9ZWxzZSBpZih2YWx1ZS50eXBlPT0zKXtcclxuXHRcdFx0XHR2YWx1ZS5jb250ZW50PUpTT04ucGFyc2UodmFsdWUuY29udGVudClcclxuXHRcdFx0XHQvLyBjb25zb2xlLmxvZyh2YWx1ZSlcclxuXHRcdFx0XHR2YWx1ZS5naWZ0UGhvdG8gPSAnJ1xyXG5cdFx0XHR9ZWxzZSBpZih2YWx1ZS50eXBlPT02KXtcclxuXHRcdFx0XHR2YWx1ZS5jb250ZW50PUpTT04ucGFyc2UodmFsdWUuY29udGVudClcclxuXHRcdFx0XHQvLyBjb25zb2xlLmxvZyh2YWx1ZSlcclxuXHRcdFx0XHR2YWx1ZS5naWZ0UGhvdG8gPSAnJ1xyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHR2YWx1ZS5naWZ0UGhvdG8gPSAnJ1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdHN0b3JlLmNvbW1pdChcInNldF9hbGxDaGF0T2JqVG9PYmpMaXN0XCIsbXNnZGF0YSlcclxuXHR9XHJcblx0ZWxzZSBpZihjb2RlPT0yMDAwMyl7Ly8yMDAwMz09PT4yMDAwNCDmjqjpgIHmtojmga/nu5nlrqLmiLfnq6/vvIjmnI3liqHnq68tPuWuouaIt+err++8iUHlj5HpgIHmtojmga/nu5lC77yMQuWmguaenOWcqOe6v+eahOivne+8jOS8muaOqOmAgea2iOaBr+e7mUJcclxuXHRcdHN0b3JlLmNvbW1pdChcInNldF9hbGxDaGF0UGFnZUlzTmV3XCIsZGF0YSlcclxuXHRcdGNvbnNvbGUubG9nKHN0b3JlLmdldHRlcnNbJ0FsbGFsbElzQ2hhdHBvcCddKVxyXG5cdFx0aWYoc3RvcmUuZ2V0dGVyc1snQWxsYWxsSXNDaGF0cG9wJ109PWZhbHNlKXsvL+S4jeaYr3BvcCDkuI3lnZDlpITnkIZcclxuXHRcdFx0XHJcblx0XHR9ZWxzZSBpZihzdG9yZS5nZXR0ZXJzWydBbGxhbGxJc0NoYXRwb3AnXT09dHJ1ZSl7XHJcblx0XHRcdHZhciBhcnJheSA9SlNPTi5zdHJpbmdpZnkoe1x0XHJcblx0XHRcdFx0XCJhcHBJZFwiOiAxMDAsICAgICAgICAgICAgLy9BUFAgSURcclxuXHRcdFx0XHRcIm1zZ0lkXCI6IGRhdGEubXNnSWQsICAvL+a2iOaBr0lEXHJcblx0XHRcdFx0XCJ1c2VyaWR4XCI6IE51bWJlcihzdG9yZS5nZXR0ZXJzWydBbGxhbGxMb2dpbkluZm8nXS51c2VyaWR4KSwgICAgICAgLy/nlKjmiLfoh6rlt7HnmoQgaWR4XHJcblx0XHRcdFx0XCJmcm9tVXNlcmlkeFwiOk51bWJlcihkYXRhLnVzZXJpZHgpLFx0XHQvL+WvueW6lCBzdHLph4zpnaLnmoQgdXNlcmlkeFxyXG5cdFx0XHRcdFwidG9Vc2VyaWR4XCI6TnVtYmVyKGRhdGEudG9Vc2VyaWR4KSxcdC8v5a+55bqUIHN0cumHjOmdoueahCB0b3VzZXJpZHhcclxuXHRcdFx0fSlcclxuXHRcdFx0dW5pLnNlbmRTb2NrZXRNZXNzYWdlKHsvL1xyXG5cdFx0XHQgICAgZGF0YTogc2VuZERTb2NrZXQoYXJyYXksMjAwMDQpLFxyXG5cdFx0XHQgICAgc3VjY2VzcyhyZXMpIHt9LFxyXG5cdFx0XHQgICAgY29tcGxldGUoY29tKSB7XHJcblx0XHRcdCAgICBcdGNvbnNvbGUubG9nKGNvbSlcclxuXHRcdFx0ICAgIH1cclxuXHRcdFx0fSk7XHJcblx0XHRcdC8vIOWkhOeQhuaUtuWIsOeahOa2iOaBr1xyXG5cdFx0XHR2YXIgdmFsdWUgPSBkYXRhO1xyXG5cdFx0XHR2YXIgaG91cnMgPSAgbmV3IERhdGUodmFsdWUudGltZXN0YW1wKjEwMDApLmdldEhvdXJzKCk7XHJcblx0XHRcdHZhciBtaW51dHMgPSAgbmV3IERhdGUodmFsdWUudGltZXN0YW1wKjEwMDApLmdldE1pbnV0ZXMoKTwxMD8nMCcrIG5ldyBEYXRlKHZhbHVlLnRpbWVzdGFtcCoxMDAwKS5nZXRNaW51dGVzKCk6bmV3IERhdGUodmFsdWUudGltZXN0YW1wKjEwMDApLmdldE1pbnV0ZXMoKVxyXG5cdFx0XHR2YWx1ZS5ub3dUaW1lID1ob3VycytcIjpcIittaW51dHM7XHJcblx0XHRcdGlmKHZhbHVlLnVzZXJpZHg9PXN0b3JlLmdldHRlcnNbJ0FsbGFsbExvZ2luSW5mbyddLnVzZXJpZHgpey8vZGlyZWN0aW9uIOaWueWQkSAw5Li66Ieq5bexIDEg5Li65b2T5YmN6IGK5aSp5a+56LGhIHBob3RvIFxyXG5cdFx0XHRcdHZhbHVlLmRpcmVjdGlvbiA9IDBcclxuXHRcdFx0XHR2YWx1ZS5waG90byA9ICcnXHJcblx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdHZhbHVlLmRpcmVjdGlvbiA9IDFcclxuXHRcdFx0XHR2YWx1ZS5waG90byA9IHN0b3JlLmdldHRlcnNbJ0FsbGFsbGNoYXRPYmpJbmZvJ10uaGVhZHBpYy8v5a+56LGh55qEXHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdGlmKHZhbHVlLnR5cGU9PTUpey8vMTrmlofmnKwgMi7lm77niYcgMy7op4bpopEgNS7npLzniakgNi7kvZzlk4FcclxuXHRcdFx0XHR2YXIgeGl0b25nID1zeXN0ZW0oKVxyXG5cdFx0XHRcdHN0b3JlLmdldHRlcnNbJ0FsbGFsbE5vR2lmdExpc3QnXS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZTEsaW5kZXgxKXtcclxuXHRcdFx0XHRcdC8vIGNvbnNvbGUubG9nKHZhbHVlMSk7XHJcblx0XHRcdFx0XHRpZih2YWx1ZS5hdHRhY2guZ2lmdElkPT12YWx1ZTEuZ2lmdElkKXtcclxuXHRcdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coeGl0b25nKVxyXG5cdFx0XHRcdFx0XHRpZih4aXRvbmc9PSdpb3MnKXtcclxuXHRcdFx0XHRcdFx0XHR2YWx1ZS5naWZ0UGhvdG8gPSB2YWx1ZTEuaWNvbiAgLy9wbmdcclxuXHRcdFx0XHRcdFx0fWVsc2UgaWYoeGl0b25nPT0nYW5kcm9pZCcpe1xyXG5cdFx0XHRcdFx0XHRcdHZhbHVlLmdpZnRQaG90byA9IHZhbHVlMS5pY29uQ2FydG9vbiAgLy93ZWJwXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KVxyXG5cdFx0XHR9ZWxzZSBpZih2YWx1ZS50eXBlPT0yKXtcclxuXHRcdFx0XHR2YWx1ZS5jb250ZW50PUpTT04ucGFyc2UodmFsdWUuY29udGVudClcclxuXHRcdFx0XHR2YWx1ZS5naWZ0UGhvdG8gPSAnJ1xyXG5cdFx0XHR9ZWxzZSBpZih2YWx1ZS50eXBlPT0zKXtcclxuXHRcdFx0XHR2YWx1ZS5jb250ZW50PUpTT04ucGFyc2UodmFsdWUuY29udGVudClcclxuXHRcdFx0XHQvLyBjb25zb2xlLmxvZyh2YWx1ZSlcclxuXHRcdFx0XHR2YWx1ZS5naWZ0UGhvdG8gPSAnJ1xyXG5cdFx0XHR9ZWxzZSBpZih2YWx1ZS50eXBlPT02KXtcclxuXHRcdFx0XHR2YWx1ZS5jb250ZW50PUpTT04ucGFyc2UodmFsdWUuY29udGVudClcclxuXHRcdFx0XHQvLyBjb25zb2xlLmxvZyh2YWx1ZSlcclxuXHRcdFx0XHR2YWx1ZS5naWZ0UGhvdG8gPSAnJ1xyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHR2YWx1ZS5naWZ0UGhvdG8gPSAnJ1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRjb25zb2xlLmxvZyhzdG9yZS5nZXR0ZXJzWydBbGxhbGxjaGF0T2JqSW5mbyddKVxyXG5cdFx0XHRpZih2YWx1ZS51c2VyaWR4PT1zdG9yZS5nZXR0ZXJzWydBbGxhbGxjaGF0T2JqSW5mbyddLnVzZXJpZHgpe1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKHN0b3JlLmdldHRlcnNbJ0FsbGFsbENoYXRPYmpUb09iakxpc3QnXSlcclxuXHRcdFx0XHR2YXIgbmV3QXJyID0gc3RvcmUuZ2V0dGVyc1snQWxsYWxsQ2hhdE9ialRvT2JqTGlzdCddO1xyXG5cdFx0XHRcdG5ld0Fyci5tc2dzLnB1c2godmFsdWUpXHJcblx0XHRcdFx0c3RvcmUuY29tbWl0KFwic2V0X2FsbENoYXRPYmpUb09iakxpc3RcIixuZXdBcnIpXHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0XHJcblx0fVxyXG5cdGVsc2UgaWYoY29kZT09MjAwMDQpey8vMjAwMDQ8PT09MjAwMDNcclxuXHRcdGNvbnNvbGUubG9nKDIwMDA0Kyflm57lpI3mnI3liqHlmagg5pS25Yiw5raI5oGv5oiQ5YqfJylcclxuXHR9XHJcblx0ZWxzZSBpZihjb2RlPT0yMDAwMil7Ly8yMDAwMjw9PT0yMDAwMSDmtojmga/mjqXmlLbnoa7orqTvvIjmnI3liqHnq68tPuWuouaIt+err++8iSDmnI3liqHlmajmmK/lkKbmiJDlip/mjqXnurPkuobnlKjmiLflj5HmnaXnmoTmtojmga9cclxuXHRcdGNvbnNvbGUubG9nKDIwMDAyKyflm57lpI3mnI3liqHlmagg5pS25Yiw5raI5oGv5oiQ5YqfJylcclxuXHRcdGNvbnNvbGUubG9nKHN0b3JlLmdldHRlcnNbJ0FsbGFsbGNoYXRPYmpJbmZvJ10pXHJcblx0XHR2YXIgYXJyYXkgPUpTT04uc3RyaW5naWZ5KHtcdFxyXG5cdFx0XHRcImFwcElkXCI6IDEwMCwgICAgICAgICAgICAvL0FQUCBJRFxyXG5cdFx0XHRcIm1zZ0lkXCI6IDAsICAvL+a2iOaBr0lEXHJcblx0XHRcdFwidXNlcmlkeFwiOiBOdW1iZXIoc3RvcmUuZ2V0dGVyc1snQWxsYWxsTG9naW5JbmZvJ10udXNlcmlkeCksICAgICAgIC8v55So5oi3SURcclxuXHRcdFx0XCJ0b1VzZXJpZHhcIjpOdW1iZXIoc3RvcmUuZ2V0dGVyc1snQWxsYWxsY2hhdE9iakluZm8nXS51c2VyaWR4KSxcclxuXHRcdH0pXHJcblx0XHR1bmkuc2VuZFNvY2tldE1lc3NhZ2Uoey8vXHJcblx0XHQgICAgZGF0YTogc2VuZERTb2NrZXQoYXJyYXksMjAwMTcpLFxyXG5cdFx0ICAgIHN1Y2Nlc3MocmVzKSB7fSxcclxuXHRcdCAgICBjb21wbGV0ZShjb20pIHtcclxuXHRcdCAgICBcdGNvbnNvbGUubG9nKGNvbSlcclxuXHRcdCAgICB9XHJcblx0XHR9KTtcclxuXHR9XHJcblx0ZWxzZSBpZihjb2RlPT0xMTAwOCl7Ly8xMTAwODw9PT0xMTAwNyAxMTAwOCDlhbPms6jmiJblj5bmtojlhbPms6jnu5PmnpzvvIjmnI3liqHnq68tPuWuouaIt+err++8iVxyXG5cdFx0Ly8gY29uc29sZS5sb2coMTEwMDgrJ+WbnuWkjeacjeWKoeWZqCDmlLbliLDmtojmga/miJDlip8nKVxyXG5cdFx0Ly8gY29uc29sZS5sb2coc3RvcmUuZ2V0dGVyc1snQWxsYWxsRm9sbG93U3RhdHVzJ10pXHJcblx0XHRpZihzdG9yZS5nZXR0ZXJzWydBbGxhbGxGb2xsb3dTdGF0dXMnXT09MCl7XHJcblx0XHRcdHN0b3JlLmNvbW1pdChcInNldF9hbGxGb2xsb3dTdGF0dXNcIiwxKVxyXG5cdFx0fWVsc2UgaWYoc3RvcmUuZ2V0dGVyc1snQWxsYWxsRm9sbG93U3RhdHVzJ109PTEpe1xyXG5cdFx0XHRzdG9yZS5jb21taXQoXCJzZXRfYWxsRm9sbG93U3RhdHVzXCIsMClcclxuXHRcdH1cclxuXHRcdFxyXG5cdH1cclxuXHRlbHNlIGlmKGNvZGU9PTExMDEwKXsvLzExMDEwPD09PTExMDA5IDExMDEwIOaLiem7keaIluWPlua2iOaLiem7kee7k+aenO+8iOacjeWKoeerry0+5a6i5oi356uv77yJXHJcblx0XHRpZihzdG9yZS5nZXR0ZXJzWydBbGxhbGxCbGFja1N0YXR1cyddPT0wKXtcclxuXHRcdFx0c3RvcmUuY29tbWl0KFwic2V0X2FsbEJsYWNrU3RhdHVzXCIsMSlcclxuXHRcdFx0dW5pLnNob3dUb2FzdCh7XHJcblx0XHRcdFx0dGl0bGU6ICfmi4npu5HmiJDlip8nLFxyXG5cdFx0XHRcdGR1cmF0aW9uOiAxMDAwLFxyXG5cdFx0XHRcdGljb246XCJub25lXCIsXHJcblx0XHRcdFx0c3VjY2VzczogZnVuY3Rpb24gKCkge31cclxuXHRcdFx0fSk7XHJcblx0XHR9ZWxzZSBpZihzdG9yZS5nZXR0ZXJzWydBbGxhbGxCbGFja1N0YXR1cyddPT0xKXtcclxuXHRcdFx0c3RvcmUuY29tbWl0KFwic2V0X2FsbEJsYWNrU3RhdHVzXCIsMClcclxuXHRcdFx0dW5pLnNob3dUb2FzdCh7XHJcblx0XHRcdFx0dGl0bGU6ICfop6PpmaTmiJDlip8nLFxyXG5cdFx0XHRcdGR1cmF0aW9uOiAxMDAwLFxyXG5cdFx0XHRcdGljb246XCJub25lXCIsXHJcblx0XHRcdFx0c3VjY2VzczogZnVuY3Rpb24gKCkge31cclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdGVsc2UgaWYoY29kZT09MTEwMTIpey8vMTEwMTI8PT09MTEwMTEgMTEwMTIg6K6+572u5Zac5aW957uT5p6c77yI5pyN5Yqh56uvLT7lrqLmiLfnq6/vvInvvIlcclxuXHRcdHVuaS5zaG93VG9hc3Qoe1xyXG5cdFx0XHR0aXRsZTogJ+iuvue9ruaIkOWKnycsXHJcblx0XHRcdGR1cmF0aW9uOiAxMDAwLFxyXG5cdFx0XHRpY29uOlwibm9uZVwiLFxyXG5cdFx0XHRzdWNjZXNzOiBmdW5jdGlvbiAoKSB7fVxyXG5cdFx0fSk7XHJcblx0XHR2YXIgYXJyID0gc3RvcmUuZ2V0dGVyc1snQWxsYWxsTG9naW5JbmZvJ107XHJcblx0XHRhcnIucHJlZmVyZW5jZSA9IHN0b3JlLmdldHRlcnNbJ0FsbGFsbFNleFN0YXR1cyddXHJcblx0XHRzdG9yZS5jb21taXQoXCJzZXRfYWxsTG9naW5JbmZvXCIsYXJyKVxyXG5cdFx0Ly8gaWYoc3RvcmUuZ2V0dGVyc1snQWxsYWxsQmxhY2tTdGF0dXMnXT09MCl7XHJcblx0XHQvLyBcdHN0b3JlLmNvbW1pdChcInNldF9hbGxCbGFja1N0YXR1c1wiLDEpXHJcblx0XHQvLyB9ZWxzZSBpZihzdG9yZS5nZXR0ZXJzWydBbGxhbGxCbGFja1N0YXR1cyddPT0xKXtcclxuXHRcdC8vIFx0c3RvcmUuY29tbWl0KFwic2V0X2FsbEJsYWNrU3RhdHVzXCIsMClcclxuXHRcdC8vIH1cclxuXHR9XHJcblx0ZWxzZSBpZihjb2RlPT0zMTAwNil7Ly8zMTAwNjw9PT0zMTAwNSAzMTAwNiDov5vlhaXnm7Tmkq3pl7Tnoa7orqTvvIjmnI3liqHnq68tPuWuouaIt+err++8iVxyXG5cdFx0Y29uc29sZS5sb2coZGF0YSlcclxuXHRcdGlmKGRhdGEuY29kZSA9PSAwKXtcclxuXHRcdFx0c3RvcmUuY29tbWl0KFwic2V0X2FsbExpdmVSb29tTnVtXCIsZGF0YS51c2Vyc3VtKVxyXG5cdFx0XHRzdG9yZS5jb21taXQoXCJzZXRfYWxsTGl2ZUNoYXRMaXN0XCIsW10pXHJcblx0XHRcdHN0b3JlLmNvbW1pdChcInNldF9hbGxMaXZlR2lmdExpc3RcIixbXSlcclxuXHRcdFx0Ly8gbmF2aWdhdGVUbygnL3BhZ2VzL2xpdmVyb29tL2xpdmVyb29tJyxudWxsKTtcclxuXHRcdH1lbHNle1xyXG5cdFx0XHR1bmkuc2hvd1RvYXN0KHtcclxuXHRcdFx0XHR0aXRsZTogZGF0YS5lcnJvcixcclxuXHRcdFx0XHRkdXJhdGlvbjogMTAwMCxcclxuXHRcdFx0XHRpY29uOlwibm9uZVwiLFxyXG5cdFx0XHRcdFx0c3VjY2VzcyhyZXMpIHt9LFxyXG5cdFx0XHRcdFx0ZmFpbChlcnIpIHt9LFxyXG5cdFx0XHRcdFx0Y29tcGxldGUoY29tKSB7XHJcblx0XHRcdFx0XHRcdG5hdmlnYXRlVG8oJy9wYWdlcy9ob21lL2hvbWUnLG51bGwpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdH1cclxuXHRlbHNlIGlmKGNvZGU9PTMxMDE0KXsvLzMxMDE0ICAgIDMxMDE0IOW9k+WJjeebtOaSremXtOS6uuaVsOabtOaWsO+8iOacjeWKoeerry0+5a6i5oi356uv77yJXHJcblx0XHRzdG9yZS5jb21taXQoXCJzZXRfYWxsTGl2ZVJvb21OdW1cIixkYXRhLnVzZXJzdW0pXHJcblx0fVxyXG5cdGVsc2UgaWYoY29kZT09MzEwMTMpey8vMzEwMTM8PT09MzEwMDnnpLzniakgYW5kIOa2iOaBryAzMTAxMSDnvqTlj5HnpLznianku6Xlj4rogYrlpKnmtojmga8g77yI5pyN5Yqh56uvLT7lrqLmiLfnq6/vvIlcclxuXHRcdC8vIHtcclxuXHRcdC8vIFx0XCJ0eXBlXCI6IDEsICAgICAgICAgICAgICAgICAvL+a2iOaBr+exu+WeiyAx5paH5a2X6IGK5aSpICAy6YCB56S8XHJcblx0XHQvLyBcdFwidXNlcm5pY2tcIjogXCJcIiwgICAgICAgICAgICAvL+eUqOaIt+aYteensFxyXG5cdFx0Ly8gXHRcImNvbnRlbnRcIjogIFwiXCIsICAgLy/mtojmga/lhoXlrrlcclxuXHRcdC8vIFx0XCJ0aW1lc3RhbXBcIjogMTQ3ODk3OTg5LCAgICAgICAgICAgIC8v5pe26Ze05oizXHJcblx0XHQvLyBcdFwiYXR0YWNoXCI6ICB7XCJnaWZ0aWRcIjogMTEsXCJudW1cIjogNX0gLy/npLznianlhoXlrrkg56S854mpaWQg56S854mp5pWw6YePXHJcblx0XHQvLyB9O1xyXG5cdFx0Y29uc29sZS5sb2coZGF0YSlcclxuXHRcdGlmKGRhdGEudHlwZT09MSl7Ly8g5paH5a2X6IGK5aSp5aSE55CGXHJcblx0XHRcdHZhciBjaGF0QXJyYXkgPSBzdG9yZS5nZXR0ZXJzWydBbGxhbGxMaXZlQ2hhdExpc3QnXTtcclxuXHRcdFx0Y29uc29sZS5sb2coY2hhdEFycmF5KVxyXG5cdFx0XHRjb25zb2xlLmxvZyhjaGF0QXJyYXkubGVuZ3RoKVxyXG5cdFx0XHRpZihjaGF0QXJyYXkubGVuZ3RoIDwgNil7Ly9cclxuXHRcdFx0XHRjaGF0QXJyYXkucHVzaChkYXRhKVxyXG5cdFx0XHRcdHN0b3JlLmNvbW1pdChcInNldF9hbGxMaXZlQ2hhdExpc3RcIixjaGF0QXJyYXkpXHJcblx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdGNoYXRBcnJheS5zaGlmdCgpXHJcblx0XHRcdFx0Y2hhdEFycmF5LnB1c2goZGF0YSlcclxuXHRcdFx0XHRzdG9yZS5jb21taXQoXCJzZXRfYWxsTGl2ZUNoYXRMaXN0XCIsY2hhdEFycmF5KVxyXG5cdFx0XHR9XHJcblx0XHR9ZWxzZSBpZihkYXRhLnR5cGU9PTIpey8vIOekvOeJqeWxleekuuWkhOeQhlxyXG5cdFx0XHR2YXIgZ2lmdEFycmF5ID0gc3RvcmUuZ2V0dGVyc1snQWxsYWxsTGl2ZUdpZnRMaXN0J107XHJcblx0XHRcdGdpZnRBcnJheSA9IFtdO1xyXG5cdFx0XHR2YXIgbm9HaWZ0RGF0YSA9IHN0b3JlLmdldHRlcnNbJ0FsbGFsbE5vR2lmdExpc3QnXTtcclxuXHRcdFx0bm9HaWZ0RGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0saW5kZXgpe1xyXG5cdFx0XHRcdGlmKGl0ZW0uZ2lmdElkPT1kYXRhLmF0dGFjaC5naWZ0aWQpe1xyXG5cdFx0XHRcdFx0ZGF0YS5pY29uID0gaXRlbS5pY29uO1xyXG5cdFx0XHRcdFx0ZGF0YS5pY29uQ2FydG9vbiA9IGl0ZW0uaWNvbjtcclxuXHRcdFx0XHRcdGRhdGEuZ2lmdE5hbWUgPSBpdGVtLmNvbnRlbnQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KVxyXG5cdFx0XHR2YXIgY2hhdEFycmF5ID0gc3RvcmUuZ2V0dGVyc1snQWxsYWxsTGl2ZUNoYXRMaXN0J107XHJcblx0XHRcdGNvbnNvbGUubG9nKGNoYXRBcnJheSlcclxuXHRcdFx0Y29uc29sZS5sb2coY2hhdEFycmF5Lmxlbmd0aClcclxuXHRcdFx0aWYoY2hhdEFycmF5Lmxlbmd0aCA8IDYpey8vXHJcblx0XHRcdFx0Y2hhdEFycmF5LnB1c2goZGF0YSlcclxuXHRcdFx0XHRzdG9yZS5jb21taXQoXCJzZXRfYWxsTGl2ZUNoYXRMaXN0XCIsY2hhdEFycmF5KVxyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRjaGF0QXJyYXkuc2hpZnQoKVxyXG5cdFx0XHRcdGNoYXRBcnJheS5wdXNoKGRhdGEpXHJcblx0XHRcdFx0c3RvcmUuY29tbWl0KFwic2V0X2FsbExpdmVDaGF0TGlzdFwiLGNoYXRBcnJheSlcclxuXHRcdFx0fVxyXG5cdFx0XHQvLyDlsZXnpLrnpLznialcclxuXHRcdFx0Z2lmdEFycmF5LnB1c2goZGF0YSlcclxuXHRcdFx0c3RvcmUuY29tbWl0KFwic2V0X2FsbExpdmVHaWZ0TGlzdFwiLGdpZnRBcnJheSlcclxuXHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpe1xyXG5cdFx0XHRcdHN0b3JlLmNvbW1pdChcInNldF9hbGxMaXZlR2lmdExpc3RcIixbXSlcclxuXHRcdFx0fSwxNTAwKVxyXG5cdFx0fWVsc2UgaWYoZGF0YS50eXBlPT0zKXtcclxuXHRcdFx0dmFyIHN5c3RlbW1zZyA9IGRhdGEudXNlcm5pY2sgKyBkYXRhLmNvbnRlbnQ7XHJcblx0XHRcdHN0b3JlLmNvbW1pdChcInNldF9hbGxTeXN0ZW1Nc2dcIixzeXN0ZW1tc2cpXHJcblx0XHR9XHJcblx0fVxyXG5cdGVsc2UgaWYoY29kZT09MzEwMDgpey8vMzEwMDg8PT09MzEwMDcgMzEwMDgg56a75byA55u05pKt6Ze056Gu6K6k77yI5pyN5Yqh56uvLT7lrqLmiLfnq6/vvIlcclxuXHRcdFxyXG5cdH1cclxuXHRlbHNlIGlmKGNvZGU9PTMxMDE2KXsvLzMxMDE2PD09PSAgICAzMTAxNiDkuLvmkq3mlq3nur/ph43ov57vvIznlKjmiLfmm7TmlrDnm7Tmkq3lnLDlnYDvvIjmnI3liqHnq68tPuWuouaIt+err++8iVxyXG5cdFx0Ly/kuLvmkq3mlq3nur/ph43ov57miL/pl7RpZOWPmOWMllxyXG5cdFx0c3RvcmUuY29tbWl0KFwic2V0X2FsbFJvb21pZFwiLGRhdGEubGl2ZWFkZHJlc3MpXHJcblx0fVxyXG5cdGVsc2UgaWYoY29kZT09MTEwMTYpey8vMTEwMTY8PT09MTEwMTUg6K6+572u5Liq5oCn562+5ZCNLS0tLS0tXHJcblx0XHQvLyBjb25zb2xlLmxvZygn5pS25Yiw5paw5raI5oGvPT0944CLJytjb2RlKVxyXG5cdFx0Ly8gY29uc29sZS5sb2coZGF0YSlcclxuXHRcdC8vIGNvbnNvbGUubG9nKHN0b3JlKVxyXG5cdFx0dW5pLnNob3dUb2FzdCh7XHJcblx0XHRcdHRpdGxlOmRhdGEuZXJyb3IsXHJcblx0XHRcdGR1cmF0aW9uOiAxNTAwLFxyXG5cdFx0XHRpY29uOlwibm9uZVwiLFxyXG5cdFx0XHRzdWNjZXNzKHJlcykge1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRmYWlsKGVycikge1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRjb21wbGV0ZShjb20pIHtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fVxyXG5cdGVsc2UgaWYoY29kZT09MTEwMDEpey8vMTEwMDE8PT09MTEwMDBcclxuXHRcdC8vIGNvbnNvbGUubG9nKCfmlLbliLDmlrDmtojmga89PT3jgIsnK2NvZGUpXHJcblx0XHQvLyBjb25zb2xlLmxvZyhkYXRhKVxyXG5cdFx0Ly8gY29uc29sZS5sb2coc3RvcmUpXHJcblx0XHQvLyB1bmkuc2hvd1RvYXN0KHtcclxuXHRcdC8vIFx0dGl0bGU6ICforr7nva7miJDlip8nLFxyXG5cdFx0Ly8gXHRkdXJhdGlvbjogNTAwMCxcclxuXHRcdC8vIFx0aWNvbjpcIm5vbmVcIixcclxuXHRcdC8vIFx0XHRzdWNjZXNzKHJlcykge1xyXG5cdFx0Ly8gXHRcdFx0Ly8gY29uc29sZS5sb2coMTExMilcclxuXHRcdC8vIFx0XHR9LFxyXG5cdFx0Ly8gXHRcdGZhaWwoZXJyKSB7XHJcblx0XHQvLyBcdFx0XHQvLyBjb25zb2xlLmxvZygyMjIzKVxyXG5cdFx0Ly8gXHRcdH0sXHJcblx0XHQvLyBcdFx0Y29tcGxldGUoY29tKSB7XHJcblx0XHQvLyBcdFx0XHQvLyBjb25zb2xlLmxvZygzMzM0KVxyXG5cdFx0Ly8gXHRcdH1cclxuXHRcdC8vIH0pO1xyXG5cdH1cclxuXHQgXHJcblx0IC8vIEhhbmRsZS5kbzExMCgpXHJcbiB9Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///23\n");

/***/ }),
/* 24 */
/*!*********************************************************************************************!*\
  !*** C:/Users/TG/Documents/HBuilderProjects/livePusherT_android/lib/crypto-js/crypto-js.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval(";(function (root, factory) {\n  if (true) {\n    // CommonJS\n    module.exports = exports = factory();\n  } else\n  {}\n})(this, function () {\n\n  /**\n                       * CryptoJS core components.\n                       */\n  var CryptoJS = CryptoJS || function (Math, undefined) {\n    /*\n                                                          * Local polyfil of Object.create\n                                                          */\n    var create = Object.create || function () {\n      function F() {};\n\n      return function (obj) {\n        var subtype;\n\n        F.prototype = obj;\n\n        subtype = new F();\n\n        F.prototype = null;\n\n        return subtype;\n      };\n    }();\n\n    /**\n          * CryptoJS namespace.\n          */\n    var C = {};\n\n    /**\n                 * Library namespace.\n                 */\n    var C_lib = C.lib = {};\n\n    /**\n                             * Base object for prototypal inheritance.\n                             */\n    var Base = C_lib.Base = function () {\n\n\n      return {\n        /**\n                * Creates a new object that inherits from this object.\n                *\n                * @param {Object} overrides Properties to copy into the new object.\n                *\n                * @return {Object} The new object.\n                *\n                * @static\n                *\n                * @example\n                *\n                *     var MyType = CryptoJS.lib.Base.extend({\n                *         field: 'value',\n                *\n                *         method: function () {\n                *         }\n                *     });\n                */\n        extend: function extend(overrides) {\n          // Spawn\n          var subtype = create(this);\n\n          // Augment\n          if (overrides) {\n            subtype.mixIn(overrides);\n          }\n\n          // Create default initializer\n          if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {\n            subtype.init = function () {\n              subtype.$super.init.apply(this, arguments);\n            };\n          }\n\n          // Initializer's prototype is the subtype object\n          subtype.init.prototype = subtype;\n\n          // Reference supertype\n          subtype.$super = this;\n\n          return subtype;\n        },\n\n        /**\n            * Extends this object and runs the init method.\n            * Arguments to create() will be passed to init().\n            *\n            * @return {Object} The new object.\n            *\n            * @static\n            *\n            * @example\n            *\n            *     var instance = MyType.create();\n            */\n        create: function create() {\n          var instance = this.extend();\n          instance.init.apply(instance, arguments);\n\n          return instance;\n        },\n\n        /**\n            * Initializes a newly created object.\n            * Override this method to add some logic when your objects are created.\n            *\n            * @example\n            *\n            *     var MyType = CryptoJS.lib.Base.extend({\n            *         init: function () {\n            *             // ...\n            *         }\n            *     });\n            */\n        init: function init() {\n        },\n\n        /**\n            * Copies properties into this object.\n            *\n            * @param {Object} properties The properties to mix in.\n            *\n            * @example\n            *\n            *     MyType.mixIn({\n            *         field: 'value'\n            *     });\n            */\n        mixIn: function mixIn(properties) {\n          for (var propertyName in properties) {\n            if (properties.hasOwnProperty(propertyName)) {\n              this[propertyName] = properties[propertyName];\n            }\n          }\n\n          // IE won't copy toString using the loop above\n          if (properties.hasOwnProperty('toString')) {\n            this.toString = properties.toString;\n          }\n        },\n\n        /**\n            * Creates a copy of this object.\n            *\n            * @return {Object} The clone.\n            *\n            * @example\n            *\n            *     var clone = instance.clone();\n            */\n        clone: function clone() {\n          return this.init.prototype.extend(this);\n        } };\n\n    }();\n\n    /**\n          * An array of 32-bit words.\n          *\n          * @property {Array} words The array of 32-bit words.\n          * @property {number} sigBytes The number of significant bytes in this word array.\n          */\n    var WordArray = C_lib.WordArray = Base.extend({\n      /**\n                                                     * Initializes a newly created word array.\n                                                     *\n                                                     * @param {Array} words (Optional) An array of 32-bit words.\n                                                     * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n                                                     *\n                                                     * @example\n                                                     *\n                                                     *     var wordArray = CryptoJS.lib.WordArray.create();\n                                                     *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n                                                     *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n                                                     */\n      init: function init(words, sigBytes) {\n        words = this.words = words || [];\n\n        if (sigBytes != undefined) {\n          this.sigBytes = sigBytes;\n        } else {\n          this.sigBytes = words.length * 4;\n        }\n      },\n\n      /**\n          * Converts this word array to a string.\n          *\n          * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n          *\n          * @return {string} The stringified word array.\n          *\n          * @example\n          *\n          *     var string = wordArray + '';\n          *     var string = wordArray.toString();\n          *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n          */\n      toString: function toString(encoder) {\n        return (encoder || Hex).stringify(this);\n      },\n\n      /**\n          * Concatenates a word array to this word array.\n          *\n          * @param {WordArray} wordArray The word array to append.\n          *\n          * @return {WordArray} This word array.\n          *\n          * @example\n          *\n          *     wordArray1.concat(wordArray2);\n          */\n      concat: function concat(wordArray) {\n        // Shortcuts\n        var thisWords = this.words;\n        var thatWords = wordArray.words;\n        var thisSigBytes = this.sigBytes;\n        var thatSigBytes = wordArray.sigBytes;\n\n        // Clamp excess bits\n        this.clamp();\n\n        // Concat\n        if (thisSigBytes % 4) {\n          // Copy one byte at a time\n          for (var i = 0; i < thatSigBytes; i++) {\n            var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n            thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;\n          }\n        } else {\n          // Copy one word at a time\n          for (var i = 0; i < thatSigBytes; i += 4) {\n            thisWords[thisSigBytes + i >>> 2] = thatWords[i >>> 2];\n          }\n        }\n        this.sigBytes += thatSigBytes;\n\n        // Chainable\n        return this;\n      },\n\n      /**\n          * Removes insignificant bits.\n          *\n          * @example\n          *\n          *     wordArray.clamp();\n          */\n      clamp: function clamp() {\n        // Shortcuts\n        var words = this.words;\n        var sigBytes = this.sigBytes;\n\n        // Clamp\n        words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;\n        words.length = Math.ceil(sigBytes / 4);\n      },\n\n      /**\n          * Creates a copy of this word array.\n          *\n          * @return {WordArray} The clone.\n          *\n          * @example\n          *\n          *     var clone = wordArray.clone();\n          */\n      clone: function clone() {\n        var clone = Base.clone.call(this);\n        clone.words = this.words.slice(0);\n\n        return clone;\n      },\n\n      /**\n          * Creates a word array filled with random bytes.\n          *\n          * @param {number} nBytes The number of random bytes to generate.\n          *\n          * @return {WordArray} The random word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.lib.WordArray.random(16);\n          */\n      random: function random(nBytes) {\n        var words = [];\n\n        var r = function r(m_w) {\n          var m_w = m_w;\n          var m_z = 0x3ade68b1;\n          var mask = 0xffffffff;\n\n          return function () {\n            m_z = 0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10) & mask;\n            m_w = 0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10) & mask;\n            var result = (m_z << 0x10) + m_w & mask;\n            result /= 0x100000000;\n            result += 0.5;\n            return result * (Math.random() > .5 ? 1 : -1);\n          };\n        };\n\n        for (var i = 0, rcache; i < nBytes; i += 4) {\n          var _r = r((rcache || Math.random()) * 0x100000000);\n\n          rcache = _r() * 0x3ade67b7;\n          words.push(_r() * 0x100000000 | 0);\n        }\n\n        return new WordArray.init(words, nBytes);\n      } });\n\n\n    /**\n             * Encoder namespace.\n             */\n    var C_enc = C.enc = {};\n\n    /**\n                             * Hex encoding strategy.\n                             */\n    var Hex = C_enc.Hex = {\n      /**\n                             * Converts a word array to a hex string.\n                             *\n                             * @param {WordArray} wordArray The word array.\n                             *\n                             * @return {string} The hex string.\n                             *\n                             * @static\n                             *\n                             * @example\n                             *\n                             *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n                             */\n      stringify: function stringify(wordArray) {\n        // Shortcuts\n        var words = wordArray.words;\n        var sigBytes = wordArray.sigBytes;\n\n        // Convert\n        var hexChars = [];\n        for (var i = 0; i < sigBytes; i++) {\n          var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n          hexChars.push((bite >>> 4).toString(16));\n          hexChars.push((bite & 0x0f).toString(16));\n        }\n\n        return hexChars.join('');\n      },\n\n      /**\n          * Converts a hex string to a word array.\n          *\n          * @param {string} hexStr The hex string.\n          *\n          * @return {WordArray} The word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n          */\n      parse: function parse(hexStr) {\n        // Shortcut\n        var hexStrLength = hexStr.length;\n\n        // Convert\n        var words = [];\n        for (var i = 0; i < hexStrLength; i += 2) {\n          words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;\n        }\n\n        return new WordArray.init(words, hexStrLength / 2);\n      } };\n\n\n    /**\n            * Latin1 encoding strategy.\n            */\n    var Latin1 = C_enc.Latin1 = {\n      /**\n                                   * Converts a word array to a Latin1 string.\n                                   *\n                                   * @param {WordArray} wordArray The word array.\n                                   *\n                                   * @return {string} The Latin1 string.\n                                   *\n                                   * @static\n                                   *\n                                   * @example\n                                   *\n                                   *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n                                   */\n      stringify: function stringify(wordArray) {\n        // Shortcuts\n        var words = wordArray.words;\n        var sigBytes = wordArray.sigBytes;\n\n        // Convert\n        var latin1Chars = [];\n        for (var i = 0; i < sigBytes; i++) {\n          var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n          latin1Chars.push(String.fromCharCode(bite));\n        }\n\n        return latin1Chars.join('');\n      },\n\n      /**\n          * Converts a Latin1 string to a word array.\n          *\n          * @param {string} latin1Str The Latin1 string.\n          *\n          * @return {WordArray} The word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n          */\n      parse: function parse(latin1Str) {\n        // Shortcut\n        var latin1StrLength = latin1Str.length;\n\n        // Convert\n        var words = [];\n        for (var i = 0; i < latin1StrLength; i++) {\n          words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;\n        }\n\n        return new WordArray.init(words, latin1StrLength);\n      } };\n\n\n    /**\n            * UTF-8 encoding strategy.\n            */\n    var Utf8 = C_enc.Utf8 = {\n      /**\n                               * Converts a word array to a UTF-8 string.\n                               *\n                               * @param {WordArray} wordArray The word array.\n                               *\n                               * @return {string} The UTF-8 string.\n                               *\n                               * @static\n                               *\n                               * @example\n                               *\n                               *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n                               */\n      stringify: function stringify(wordArray) {\n        try {\n          return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n        } catch (e) {\n          throw new Error('Malformed UTF-8 data');\n        }\n      },\n\n      /**\n          * Converts a UTF-8 string to a word array.\n          *\n          * @param {string} utf8Str The UTF-8 string.\n          *\n          * @return {WordArray} The word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n          */\n      parse: function parse(utf8Str) {\n        return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n      } };\n\n\n    /**\n            * Abstract buffered block algorithm template.\n            *\n            * The property blockSize must be implemented in a concrete subtype.\n            *\n            * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n            */\n    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n      /**\n                                                                               * Resets this block algorithm's data buffer to its initial state.\n                                                                               *\n                                                                               * @example\n                                                                               *\n                                                                               *     bufferedBlockAlgorithm.reset();\n                                                                               */\n      reset: function reset() {\n        // Initial values\n        this._data = new WordArray.init();\n        this._nDataBytes = 0;\n      },\n\n      /**\n          * Adds new data to this block algorithm's buffer.\n          *\n          * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n          *\n          * @example\n          *\n          *     bufferedBlockAlgorithm._append('data');\n          *     bufferedBlockAlgorithm._append(wordArray);\n          */\n      _append: function _append(data) {\n        // Convert string to WordArray, else assume WordArray already\n        if (typeof data == 'string') {\n          data = Utf8.parse(data);\n        }\n\n        // Append\n        this._data.concat(data);\n        this._nDataBytes += data.sigBytes;\n      },\n\n      /**\n          * Processes available data blocks.\n          *\n          * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n          *\n          * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n          *\n          * @return {WordArray} The processed data.\n          *\n          * @example\n          *\n          *     var processedData = bufferedBlockAlgorithm._process();\n          *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n          */\n      _process: function _process(doFlush) {\n        // Shortcuts\n        var data = this._data;\n        var dataWords = data.words;\n        var dataSigBytes = data.sigBytes;\n        var blockSize = this.blockSize;\n        var blockSizeBytes = blockSize * 4;\n\n        // Count blocks ready\n        var nBlocksReady = dataSigBytes / blockSizeBytes;\n        if (doFlush) {\n          // Round up to include partial blocks\n          nBlocksReady = Math.ceil(nBlocksReady);\n        } else {\n          // Round down to include only full blocks,\n          // less the number of blocks that must remain in the buffer\n          nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n        }\n\n        // Count words ready\n        var nWordsReady = nBlocksReady * blockSize;\n\n        // Count bytes ready\n        var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n        // Process blocks\n        if (nWordsReady) {\n          for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n            // Perform concrete-algorithm logic\n            this._doProcessBlock(dataWords, offset);\n          }\n\n          // Remove processed words\n          var processedWords = dataWords.splice(0, nWordsReady);\n          data.sigBytes -= nBytesReady;\n        }\n\n        // Return processed words\n        return new WordArray.init(processedWords, nBytesReady);\n      },\n\n      /**\n          * Creates a copy of this object.\n          *\n          * @return {Object} The clone.\n          *\n          * @example\n          *\n          *     var clone = bufferedBlockAlgorithm.clone();\n          */\n      clone: function clone() {\n        var clone = Base.clone.call(this);\n        clone._data = this._data.clone();\n\n        return clone;\n      },\n\n      _minBufferSize: 0 });\n\n\n    /**\n                             * Abstract hasher template.\n                             *\n                             * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n                             */\n    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n      /**\n                                                                 * Configuration options.\n                                                                 */\n      cfg: Base.extend(),\n\n      /**\n                           * Initializes a newly created hasher.\n                           *\n                           * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n                           *\n                           * @example\n                           *\n                           *     var hasher = CryptoJS.algo.SHA256.create();\n                           */\n      init: function init(cfg) {\n        // Apply config defaults\n        this.cfg = this.cfg.extend(cfg);\n\n        // Set initial values\n        this.reset();\n      },\n\n      /**\n          * Resets this hasher to its initial state.\n          *\n          * @example\n          *\n          *     hasher.reset();\n          */\n      reset: function reset() {\n        // Reset data buffer\n        BufferedBlockAlgorithm.reset.call(this);\n\n        // Perform concrete-hasher logic\n        this._doReset();\n      },\n\n      /**\n          * Updates this hasher with a message.\n          *\n          * @param {WordArray|string} messageUpdate The message to append.\n          *\n          * @return {Hasher} This hasher.\n          *\n          * @example\n          *\n          *     hasher.update('message');\n          *     hasher.update(wordArray);\n          */\n      update: function update(messageUpdate) {\n        // Append\n        this._append(messageUpdate);\n\n        // Update the hash\n        this._process();\n\n        // Chainable\n        return this;\n      },\n\n      /**\n          * Finalizes the hash computation.\n          * Note that the finalize operation is effectively a destructive, read-once operation.\n          *\n          * @param {WordArray|string} messageUpdate (Optional) A final message update.\n          *\n          * @return {WordArray} The hash.\n          *\n          * @example\n          *\n          *     var hash = hasher.finalize();\n          *     var hash = hasher.finalize('message');\n          *     var hash = hasher.finalize(wordArray);\n          */\n      finalize: function finalize(messageUpdate) {\n        // Final message update\n        if (messageUpdate) {\n          this._append(messageUpdate);\n        }\n\n        // Perform concrete-hasher logic\n        var hash = this._doFinalize();\n\n        return hash;\n      },\n\n      blockSize: 512 / 32,\n\n      /**\n                            * Creates a shortcut function to a hasher's object interface.\n                            *\n                            * @param {Hasher} hasher The hasher to create a helper for.\n                            *\n                            * @return {Function} The shortcut function.\n                            *\n                            * @static\n                            *\n                            * @example\n                            *\n                            *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n                            */\n      _createHelper: function _createHelper(hasher) {\n        return function (message, cfg) {\n          return new hasher.init(cfg).finalize(message);\n        };\n      },\n\n      /**\n          * Creates a shortcut function to the HMAC's object interface.\n          *\n          * @param {Hasher} hasher The hasher to use in this HMAC helper.\n          *\n          * @return {Function} The shortcut function.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n          */\n      _createHmacHelper: function _createHmacHelper(hasher) {\n        return function (message, key) {\n          return new C_algo.HMAC.init(hasher, key).finalize(message);\n        };\n      } });\n\n\n    /**\n             * Algorithm namespace.\n             */\n    var C_algo = C.algo = {};\n\n    return C;\n  }(Math);\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var C_enc = C.enc;\n\n    /**\n                        * Base64 encoding strategy.\n                        */\n    var Base64 = C_enc.Base64 = {\n      /**\n                                   * Converts a word array to a Base64 string.\n                                   *\n                                   * @param {WordArray} wordArray The word array.\n                                   *\n                                   * @return {string} The Base64 string.\n                                   *\n                                   * @static\n                                   *\n                                   * @example\n                                   *\n                                   *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n                                   */\n      stringify: function stringify(wordArray) {\n        // Shortcuts\n        var words = wordArray.words;\n        var sigBytes = wordArray.sigBytes;\n        var map = this._map;\n\n        // Clamp excess bits\n        wordArray.clamp();\n\n        // Convert\n        var base64Chars = [];\n        for (var i = 0; i < sigBytes; i += 3) {\n          var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n          var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;\n          var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;\n\n          var triplet = byte1 << 16 | byte2 << 8 | byte3;\n\n          for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {\n            base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));\n          }\n        }\n\n        // Add padding\n        var paddingChar = map.charAt(64);\n        if (paddingChar) {\n          while (base64Chars.length % 4) {\n            base64Chars.push(paddingChar);\n          }\n        }\n\n        return base64Chars.join('');\n      },\n\n      /**\n          * Converts a Base64 string to a word array.\n          *\n          * @param {string} base64Str The Base64 string.\n          *\n          * @return {WordArray} The word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n          */\n      parse: function parse(base64Str) {\n        // Shortcuts\n        var base64StrLength = base64Str.length;\n        var map = this._map;\n        var reverseMap = this._reverseMap;\n\n        if (!reverseMap) {\n          reverseMap = this._reverseMap = [];\n          for (var j = 0; j < map.length; j++) {\n            reverseMap[map.charCodeAt(j)] = j;\n          }\n        }\n\n        // Ignore padding\n        var paddingChar = map.charAt(64);\n        if (paddingChar) {\n          var paddingIndex = base64Str.indexOf(paddingChar);\n          if (paddingIndex !== -1) {\n            base64StrLength = paddingIndex;\n          }\n        }\n\n        // Convert\n        return parseLoop(base64Str, base64StrLength, reverseMap);\n\n      },\n\n      _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=' };\n\n\n    function parseLoop(base64Str, base64StrLength, reverseMap) {\n      var words = [];\n      var nBytes = 0;\n      for (var i = 0; i < base64StrLength; i++) {\n        if (i % 4) {\n          var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;\n          var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;\n          words[nBytes >>> 2] |= (bits1 | bits2) << 24 - nBytes % 4 * 8;\n          nBytes++;\n        }\n      }\n      return WordArray.create(words, nBytes);\n    }\n  })();\n\n\n  (function (Math) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var Hasher = C_lib.Hasher;\n    var C_algo = C.algo;\n\n    // Constants table\n    var T = [];\n\n    // Compute constants\n    (function () {\n      for (var i = 0; i < 64; i++) {\n        T[i] = Math.abs(Math.sin(i + 1)) * 0x100000000 | 0;\n      }\n    })();\n\n    /**\n           * MD5 hash algorithm.\n           */\n    var MD5 = C_algo.MD5 = Hasher.extend({\n      _doReset: function _doReset() {\n        this._hash = new WordArray.init([\n        0x67452301, 0xefcdab89,\n        0x98badcfe, 0x10325476]);\n\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        // Swap endian\n        for (var i = 0; i < 16; i++) {\n          // Shortcuts\n          var offset_i = offset + i;\n          var M_offset_i = M[offset_i];\n\n          M[offset_i] =\n          (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff |\n          (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;\n\n        }\n\n        // Shortcuts\n        var H = this._hash.words;\n\n        var M_offset_0 = M[offset + 0];\n        var M_offset_1 = M[offset + 1];\n        var M_offset_2 = M[offset + 2];\n        var M_offset_3 = M[offset + 3];\n        var M_offset_4 = M[offset + 4];\n        var M_offset_5 = M[offset + 5];\n        var M_offset_6 = M[offset + 6];\n        var M_offset_7 = M[offset + 7];\n        var M_offset_8 = M[offset + 8];\n        var M_offset_9 = M[offset + 9];\n        var M_offset_10 = M[offset + 10];\n        var M_offset_11 = M[offset + 11];\n        var M_offset_12 = M[offset + 12];\n        var M_offset_13 = M[offset + 13];\n        var M_offset_14 = M[offset + 14];\n        var M_offset_15 = M[offset + 15];\n\n        // Working varialbes\n        var a = H[0];\n        var b = H[1];\n        var c = H[2];\n        var d = H[3];\n\n        // Computation\n        a = FF(a, b, c, d, M_offset_0, 7, T[0]);\n        d = FF(d, a, b, c, M_offset_1, 12, T[1]);\n        c = FF(c, d, a, b, M_offset_2, 17, T[2]);\n        b = FF(b, c, d, a, M_offset_3, 22, T[3]);\n        a = FF(a, b, c, d, M_offset_4, 7, T[4]);\n        d = FF(d, a, b, c, M_offset_5, 12, T[5]);\n        c = FF(c, d, a, b, M_offset_6, 17, T[6]);\n        b = FF(b, c, d, a, M_offset_7, 22, T[7]);\n        a = FF(a, b, c, d, M_offset_8, 7, T[8]);\n        d = FF(d, a, b, c, M_offset_9, 12, T[9]);\n        c = FF(c, d, a, b, M_offset_10, 17, T[10]);\n        b = FF(b, c, d, a, M_offset_11, 22, T[11]);\n        a = FF(a, b, c, d, M_offset_12, 7, T[12]);\n        d = FF(d, a, b, c, M_offset_13, 12, T[13]);\n        c = FF(c, d, a, b, M_offset_14, 17, T[14]);\n        b = FF(b, c, d, a, M_offset_15, 22, T[15]);\n\n        a = GG(a, b, c, d, M_offset_1, 5, T[16]);\n        d = GG(d, a, b, c, M_offset_6, 9, T[17]);\n        c = GG(c, d, a, b, M_offset_11, 14, T[18]);\n        b = GG(b, c, d, a, M_offset_0, 20, T[19]);\n        a = GG(a, b, c, d, M_offset_5, 5, T[20]);\n        d = GG(d, a, b, c, M_offset_10, 9, T[21]);\n        c = GG(c, d, a, b, M_offset_15, 14, T[22]);\n        b = GG(b, c, d, a, M_offset_4, 20, T[23]);\n        a = GG(a, b, c, d, M_offset_9, 5, T[24]);\n        d = GG(d, a, b, c, M_offset_14, 9, T[25]);\n        c = GG(c, d, a, b, M_offset_3, 14, T[26]);\n        b = GG(b, c, d, a, M_offset_8, 20, T[27]);\n        a = GG(a, b, c, d, M_offset_13, 5, T[28]);\n        d = GG(d, a, b, c, M_offset_2, 9, T[29]);\n        c = GG(c, d, a, b, M_offset_7, 14, T[30]);\n        b = GG(b, c, d, a, M_offset_12, 20, T[31]);\n\n        a = HH(a, b, c, d, M_offset_5, 4, T[32]);\n        d = HH(d, a, b, c, M_offset_8, 11, T[33]);\n        c = HH(c, d, a, b, M_offset_11, 16, T[34]);\n        b = HH(b, c, d, a, M_offset_14, 23, T[35]);\n        a = HH(a, b, c, d, M_offset_1, 4, T[36]);\n        d = HH(d, a, b, c, M_offset_4, 11, T[37]);\n        c = HH(c, d, a, b, M_offset_7, 16, T[38]);\n        b = HH(b, c, d, a, M_offset_10, 23, T[39]);\n        a = HH(a, b, c, d, M_offset_13, 4, T[40]);\n        d = HH(d, a, b, c, M_offset_0, 11, T[41]);\n        c = HH(c, d, a, b, M_offset_3, 16, T[42]);\n        b = HH(b, c, d, a, M_offset_6, 23, T[43]);\n        a = HH(a, b, c, d, M_offset_9, 4, T[44]);\n        d = HH(d, a, b, c, M_offset_12, 11, T[45]);\n        c = HH(c, d, a, b, M_offset_15, 16, T[46]);\n        b = HH(b, c, d, a, M_offset_2, 23, T[47]);\n\n        a = II(a, b, c, d, M_offset_0, 6, T[48]);\n        d = II(d, a, b, c, M_offset_7, 10, T[49]);\n        c = II(c, d, a, b, M_offset_14, 15, T[50]);\n        b = II(b, c, d, a, M_offset_5, 21, T[51]);\n        a = II(a, b, c, d, M_offset_12, 6, T[52]);\n        d = II(d, a, b, c, M_offset_3, 10, T[53]);\n        c = II(c, d, a, b, M_offset_10, 15, T[54]);\n        b = II(b, c, d, a, M_offset_1, 21, T[55]);\n        a = II(a, b, c, d, M_offset_8, 6, T[56]);\n        d = II(d, a, b, c, M_offset_15, 10, T[57]);\n        c = II(c, d, a, b, M_offset_6, 15, T[58]);\n        b = II(b, c, d, a, M_offset_13, 21, T[59]);\n        a = II(a, b, c, d, M_offset_4, 6, T[60]);\n        d = II(d, a, b, c, M_offset_11, 10, T[61]);\n        c = II(c, d, a, b, M_offset_2, 15, T[62]);\n        b = II(b, c, d, a, M_offset_9, 21, T[63]);\n\n        // Intermediate hash value\n        H[0] = H[0] + a | 0;\n        H[1] = H[1] + b | 0;\n        H[2] = H[2] + c | 0;\n        H[3] = H[3] + d | 0;\n      },\n\n      _doFinalize: function _doFinalize() {\n        // Shortcuts\n        var data = this._data;\n        var dataWords = data.words;\n\n        var nBitsTotal = this._nDataBytes * 8;\n        var nBitsLeft = data.sigBytes * 8;\n\n        // Add padding\n        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n\n        var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);\n        var nBitsTotalL = nBitsTotal;\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] =\n        (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 0x00ff00ff |\n        (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 0xff00ff00;\n\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] =\n        (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 0x00ff00ff |\n        (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 0xff00ff00;\n\n\n        data.sigBytes = (dataWords.length + 1) * 4;\n\n        // Hash final blocks\n        this._process();\n\n        // Shortcuts\n        var hash = this._hash;\n        var H = hash.words;\n\n        // Swap endian\n        for (var i = 0; i < 4; i++) {\n          // Shortcut\n          var H_i = H[i];\n\n          H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff |\n          (H_i << 24 | H_i >>> 8) & 0xff00ff00;\n        }\n\n        // Return final computed hash\n        return hash;\n      },\n\n      clone: function clone() {\n        var clone = Hasher.clone.call(this);\n        clone._hash = this._hash.clone();\n\n        return clone;\n      } });\n\n\n    function FF(a, b, c, d, x, s, t) {\n      var n = a + (b & c | ~b & d) + x + t;\n      return (n << s | n >>> 32 - s) + b;\n    }\n\n    function GG(a, b, c, d, x, s, t) {\n      var n = a + (b & d | c & ~d) + x + t;\n      return (n << s | n >>> 32 - s) + b;\n    }\n\n    function HH(a, b, c, d, x, s, t) {\n      var n = a + (b ^ c ^ d) + x + t;\n      return (n << s | n >>> 32 - s) + b;\n    }\n\n    function II(a, b, c, d, x, s, t) {\n      var n = a + (c ^ (b | ~d)) + x + t;\n      return (n << s | n >>> 32 - s) + b;\n    }\n\n    /**\n       * Shortcut function to the hasher's object interface.\n       *\n       * @param {WordArray|string} message The message to hash.\n       *\n       * @return {WordArray} The hash.\n       *\n       * @static\n       *\n       * @example\n       *\n       *     var hash = CryptoJS.MD5('message');\n       *     var hash = CryptoJS.MD5(wordArray);\n       */\n    C.MD5 = Hasher._createHelper(MD5);\n\n    /**\n                                        * Shortcut function to the HMAC's object interface.\n                                        *\n                                        * @param {WordArray|string} message The message to hash.\n                                        * @param {WordArray|string} key The secret key.\n                                        *\n                                        * @return {WordArray} The HMAC.\n                                        *\n                                        * @static\n                                        *\n                                        * @example\n                                        *\n                                        *     var hmac = CryptoJS.HmacMD5(message, key);\n                                        */\n    C.HmacMD5 = Hasher._createHmacHelper(MD5);\n  })(Math);\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var Hasher = C_lib.Hasher;\n    var C_algo = C.algo;\n\n    // Reusable object\n    var W = [];\n\n    /**\n                 * SHA-1 hash algorithm.\n                 */\n    var SHA1 = C_algo.SHA1 = Hasher.extend({\n      _doReset: function _doReset() {\n        this._hash = new WordArray.init([\n        0x67452301, 0xefcdab89,\n        0x98badcfe, 0x10325476,\n        0xc3d2e1f0]);\n\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        // Shortcut\n        var H = this._hash.words;\n\n        // Working variables\n        var a = H[0];\n        var b = H[1];\n        var c = H[2];\n        var d = H[3];\n        var e = H[4];\n\n        // Computation\n        for (var i = 0; i < 80; i++) {\n          if (i < 16) {\n            W[i] = M[offset + i] | 0;\n          } else {\n            var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n            W[i] = n << 1 | n >>> 31;\n          }\n\n          var t = (a << 5 | a >>> 27) + e + W[i];\n          if (i < 20) {\n            t += (b & c | ~b & d) + 0x5a827999;\n          } else if (i < 40) {\n            t += (b ^ c ^ d) + 0x6ed9eba1;\n          } else if (i < 60) {\n            t += (b & c | b & d | c & d) - 0x70e44324;\n          } else /* if (i < 80) */{\n              t += (b ^ c ^ d) - 0x359d3e2a;\n            }\n\n          e = d;\n          d = c;\n          c = b << 30 | b >>> 2;\n          b = a;\n          a = t;\n        }\n\n        // Intermediate hash value\n        H[0] = H[0] + a | 0;\n        H[1] = H[1] + b | 0;\n        H[2] = H[2] + c | 0;\n        H[3] = H[3] + d | 0;\n        H[4] = H[4] + e | 0;\n      },\n\n      _doFinalize: function _doFinalize() {\n        // Shortcuts\n        var data = this._data;\n        var dataWords = data.words;\n\n        var nBitsTotal = this._nDataBytes * 8;\n        var nBitsLeft = data.sigBytes * 8;\n\n        // Add padding\n        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;\n        data.sigBytes = dataWords.length * 4;\n\n        // Hash final blocks\n        this._process();\n\n        // Return final computed hash\n        return this._hash;\n      },\n\n      clone: function clone() {\n        var clone = Hasher.clone.call(this);\n        clone._hash = this._hash.clone();\n\n        return clone;\n      } });\n\n\n    /**\n             * Shortcut function to the hasher's object interface.\n             *\n             * @param {WordArray|string} message The message to hash.\n             *\n             * @return {WordArray} The hash.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var hash = CryptoJS.SHA1('message');\n             *     var hash = CryptoJS.SHA1(wordArray);\n             */\n    C.SHA1 = Hasher._createHelper(SHA1);\n\n    /**\n                                          * Shortcut function to the HMAC's object interface.\n                                          *\n                                          * @param {WordArray|string} message The message to hash.\n                                          * @param {WordArray|string} key The secret key.\n                                          *\n                                          * @return {WordArray} The HMAC.\n                                          *\n                                          * @static\n                                          *\n                                          * @example\n                                          *\n                                          *     var hmac = CryptoJS.HmacSHA1(message, key);\n                                          */\n    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);\n  })();\n\n\n  (function (Math) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var Hasher = C_lib.Hasher;\n    var C_algo = C.algo;\n\n    // Initialization and round constants tables\n    var H = [];\n    var K = [];\n\n    // Compute constants\n    (function () {\n      function isPrime(n) {\n        var sqrtN = Math.sqrt(n);\n        for (var factor = 2; factor <= sqrtN; factor++) {\n          if (!(n % factor)) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n      function getFractionalBits(n) {\n        return (n - (n | 0)) * 0x100000000 | 0;\n      }\n\n      var n = 2;\n      var nPrime = 0;\n      while (nPrime < 64) {\n        if (isPrime(n)) {\n          if (nPrime < 8) {\n            H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\n          }\n          K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\n\n          nPrime++;\n        }\n\n        n++;\n      }\n    })();\n\n    // Reusable object\n    var W = [];\n\n    /**\n                 * SHA-256 hash algorithm.\n                 */\n    var SHA256 = C_algo.SHA256 = Hasher.extend({\n      _doReset: function _doReset() {\n        this._hash = new WordArray.init(H.slice(0));\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        // Shortcut\n        var H = this._hash.words;\n\n        // Working variables\n        var a = H[0];\n        var b = H[1];\n        var c = H[2];\n        var d = H[3];\n        var e = H[4];\n        var f = H[5];\n        var g = H[6];\n        var h = H[7];\n\n        // Computation\n        for (var i = 0; i < 64; i++) {\n          if (i < 16) {\n            W[i] = M[offset + i] | 0;\n          } else {\n            var gamma0x = W[i - 15];\n            var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (\n            gamma0x << 14 | gamma0x >>> 18) ^\n            gamma0x >>> 3;\n\n            var gamma1x = W[i - 2];\n            var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (\n            gamma1x << 13 | gamma1x >>> 19) ^\n            gamma1x >>> 10;\n\n            W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n          }\n\n          var ch = e & f ^ ~e & g;\n          var maj = a & b ^ a & c ^ b & c;\n\n          var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);\n          var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);\n\n          var t1 = h + sigma1 + ch + K[i] + W[i];\n          var t2 = sigma0 + maj;\n\n          h = g;\n          g = f;\n          f = e;\n          e = d + t1 | 0;\n          d = c;\n          c = b;\n          b = a;\n          a = t1 + t2 | 0;\n        }\n\n        // Intermediate hash value\n        H[0] = H[0] + a | 0;\n        H[1] = H[1] + b | 0;\n        H[2] = H[2] + c | 0;\n        H[3] = H[3] + d | 0;\n        H[4] = H[4] + e | 0;\n        H[5] = H[5] + f | 0;\n        H[6] = H[6] + g | 0;\n        H[7] = H[7] + h | 0;\n      },\n\n      _doFinalize: function _doFinalize() {\n        // Shortcuts\n        var data = this._data;\n        var dataWords = data.words;\n\n        var nBitsTotal = this._nDataBytes * 8;\n        var nBitsLeft = data.sigBytes * 8;\n\n        // Add padding\n        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;\n        data.sigBytes = dataWords.length * 4;\n\n        // Hash final blocks\n        this._process();\n\n        // Return final computed hash\n        return this._hash;\n      },\n\n      clone: function clone() {\n        var clone = Hasher.clone.call(this);\n        clone._hash = this._hash.clone();\n\n        return clone;\n      } });\n\n\n    /**\n             * Shortcut function to the hasher's object interface.\n             *\n             * @param {WordArray|string} message The message to hash.\n             *\n             * @return {WordArray} The hash.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var hash = CryptoJS.SHA256('message');\n             *     var hash = CryptoJS.SHA256(wordArray);\n             */\n    C.SHA256 = Hasher._createHelper(SHA256);\n\n    /**\n                                              * Shortcut function to the HMAC's object interface.\n                                              *\n                                              * @param {WordArray|string} message The message to hash.\n                                              * @param {WordArray|string} key The secret key.\n                                              *\n                                              * @return {WordArray} The HMAC.\n                                              *\n                                              * @static\n                                              *\n                                              * @example\n                                              *\n                                              *     var hmac = CryptoJS.HmacSHA256(message, key);\n                                              */\n    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);\n  })(Math);\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var C_enc = C.enc;\n\n    /**\n                        * UTF-16 BE encoding strategy.\n                        */\n    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {\n      /**\n                                                   * Converts a word array to a UTF-16 BE string.\n                                                   *\n                                                   * @param {WordArray} wordArray The word array.\n                                                   *\n                                                   * @return {string} The UTF-16 BE string.\n                                                   *\n                                                   * @static\n                                                   *\n                                                   * @example\n                                                   *\n                                                   *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);\n                                                   */\n      stringify: function stringify(wordArray) {\n        // Shortcuts\n        var words = wordArray.words;\n        var sigBytes = wordArray.sigBytes;\n\n        // Convert\n        var utf16Chars = [];\n        for (var i = 0; i < sigBytes; i += 2) {\n          var codePoint = words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff;\n          utf16Chars.push(String.fromCharCode(codePoint));\n        }\n\n        return utf16Chars.join('');\n      },\n\n      /**\n          * Converts a UTF-16 BE string to a word array.\n          *\n          * @param {string} utf16Str The UTF-16 BE string.\n          *\n          * @return {WordArray} The word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);\n          */\n      parse: function parse(utf16Str) {\n        // Shortcut\n        var utf16StrLength = utf16Str.length;\n\n        // Convert\n        var words = [];\n        for (var i = 0; i < utf16StrLength; i++) {\n          words[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;\n        }\n\n        return WordArray.create(words, utf16StrLength * 2);\n      } };\n\n\n    /**\n            * UTF-16 LE encoding strategy.\n            */\n    C_enc.Utf16LE = {\n      /**\n                       * Converts a word array to a UTF-16 LE string.\n                       *\n                       * @param {WordArray} wordArray The word array.\n                       *\n                       * @return {string} The UTF-16 LE string.\n                       *\n                       * @static\n                       *\n                       * @example\n                       *\n                       *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);\n                       */\n      stringify: function stringify(wordArray) {\n        // Shortcuts\n        var words = wordArray.words;\n        var sigBytes = wordArray.sigBytes;\n\n        // Convert\n        var utf16Chars = [];\n        for (var i = 0; i < sigBytes; i += 2) {\n          var codePoint = swapEndian(words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff);\n          utf16Chars.push(String.fromCharCode(codePoint));\n        }\n\n        return utf16Chars.join('');\n      },\n\n      /**\n          * Converts a UTF-16 LE string to a word array.\n          *\n          * @param {string} utf16Str The UTF-16 LE string.\n          *\n          * @return {WordArray} The word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);\n          */\n      parse: function parse(utf16Str) {\n        // Shortcut\n        var utf16StrLength = utf16Str.length;\n\n        // Convert\n        var words = [];\n        for (var i = 0; i < utf16StrLength; i++) {\n          words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);\n        }\n\n        return WordArray.create(words, utf16StrLength * 2);\n      } };\n\n\n    function swapEndian(word) {\n      return word << 8 & 0xff00ff00 | word >>> 8 & 0x00ff00ff;\n    }\n  })();\n\n\n  (function () {\n    // Check if typed arrays are supported\n    if (typeof ArrayBuffer != 'function') {\n      return;\n    }\n\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n\n    // Reference original init\n    var superInit = WordArray.init;\n\n    // Augment WordArray.init to handle typed arrays\n    var subInit = WordArray.init = function (typedArray) {\n      // Convert buffers to uint8\n      if (typedArray instanceof ArrayBuffer) {\n        typedArray = new Uint8Array(typedArray);\n      }\n\n      // Convert other array views to uint8\n      if (\n      typedArray instanceof Int8Array ||\n      typeof Uint8ClampedArray !== \"undefined\" && typedArray instanceof Uint8ClampedArray ||\n      typedArray instanceof Int16Array ||\n      typedArray instanceof Uint16Array ||\n      typedArray instanceof Int32Array ||\n      typedArray instanceof Uint32Array ||\n      typedArray instanceof Float32Array ||\n      typedArray instanceof Float64Array)\n      {\n        typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n      }\n\n      // Handle Uint8Array\n      if (typedArray instanceof Uint8Array) {\n        // Shortcut\n        var typedArrayByteLength = typedArray.byteLength;\n\n        // Extract bytes\n        var words = [];\n        for (var i = 0; i < typedArrayByteLength; i++) {\n          words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;\n        }\n\n        // Initialize this word array\n        superInit.call(this, words, typedArrayByteLength);\n      } else {\n        // Else call normal init\n        superInit.apply(this, arguments);\n      }\n    };\n\n    subInit.prototype = WordArray;\n  })();\n\n\n  /** @preserve\n        (c) 2012 by Cédric Mesnil. All rights reserved.\n        \tRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n        \t    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n            - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n        \tTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n        */\n\n\n\n\n  (function (Math) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var Hasher = C_lib.Hasher;\n    var C_algo = C.algo;\n\n    // Constants table\n    var _zl = WordArray.create([\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n    7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n    3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n    1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n    4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13]);\n    var _zr = WordArray.create([\n    5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n    6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n    15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n    8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n    12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]);\n    var _sl = WordArray.create([\n    11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n    7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n    11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n    11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n    9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6]);\n    var _sr = WordArray.create([\n    8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n    9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n    9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n    15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n    8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]);\n\n    var _hl = WordArray.create([0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);\n    var _hr = WordArray.create([0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);\n\n    /**\n                                                                                               * RIPEMD160 hash algorithm.\n                                                                                               */\n    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({\n      _doReset: function _doReset() {\n        this._hash = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n\n        // Swap endian\n        for (var i = 0; i < 16; i++) {\n          // Shortcuts\n          var offset_i = offset + i;\n          var M_offset_i = M[offset_i];\n\n          // Swap\n          M[offset_i] =\n          (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff |\n          (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;\n\n        }\n        // Shortcut\n        var H = this._hash.words;\n        var hl = _hl.words;\n        var hr = _hr.words;\n        var zl = _zl.words;\n        var zr = _zr.words;\n        var sl = _sl.words;\n        var sr = _sr.words;\n\n        // Working variables\n        var al, bl, cl, dl, el;\n        var ar, br, cr, dr, er;\n\n        ar = al = H[0];\n        br = bl = H[1];\n        cr = cl = H[2];\n        dr = dl = H[3];\n        er = el = H[4];\n        // Computation\n        var t;\n        for (var i = 0; i < 80; i += 1) {\n          t = al + M[offset + zl[i]] | 0;\n          if (i < 16) {\n            t += f1(bl, cl, dl) + hl[0];\n          } else if (i < 32) {\n            t += f2(bl, cl, dl) + hl[1];\n          } else if (i < 48) {\n            t += f3(bl, cl, dl) + hl[2];\n          } else if (i < 64) {\n            t += f4(bl, cl, dl) + hl[3];\n          } else {// if (i<80) {\n            t += f5(bl, cl, dl) + hl[4];\n          }\n          t = t | 0;\n          t = rotl(t, sl[i]);\n          t = t + el | 0;\n          al = el;\n          el = dl;\n          dl = rotl(cl, 10);\n          cl = bl;\n          bl = t;\n\n          t = ar + M[offset + zr[i]] | 0;\n          if (i < 16) {\n            t += f5(br, cr, dr) + hr[0];\n          } else if (i < 32) {\n            t += f4(br, cr, dr) + hr[1];\n          } else if (i < 48) {\n            t += f3(br, cr, dr) + hr[2];\n          } else if (i < 64) {\n            t += f2(br, cr, dr) + hr[3];\n          } else {// if (i<80) {\n            t += f1(br, cr, dr) + hr[4];\n          }\n          t = t | 0;\n          t = rotl(t, sr[i]);\n          t = t + er | 0;\n          ar = er;\n          er = dr;\n          dr = rotl(cr, 10);\n          cr = br;\n          br = t;\n        }\n        // Intermediate hash value\n        t = H[1] + cl + dr | 0;\n        H[1] = H[2] + dl + er | 0;\n        H[2] = H[3] + el + ar | 0;\n        H[3] = H[4] + al + br | 0;\n        H[4] = H[0] + bl + cr | 0;\n        H[0] = t;\n      },\n\n      _doFinalize: function _doFinalize() {\n        // Shortcuts\n        var data = this._data;\n        var dataWords = data.words;\n\n        var nBitsTotal = this._nDataBytes * 8;\n        var nBitsLeft = data.sigBytes * 8;\n\n        // Add padding\n        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] =\n        (nBitsTotal << 8 | nBitsTotal >>> 24) & 0x00ff00ff |\n        (nBitsTotal << 24 | nBitsTotal >>> 8) & 0xff00ff00;\n\n        data.sigBytes = (dataWords.length + 1) * 4;\n\n        // Hash final blocks\n        this._process();\n\n        // Shortcuts\n        var hash = this._hash;\n        var H = hash.words;\n\n        // Swap endian\n        for (var i = 0; i < 5; i++) {\n          // Shortcut\n          var H_i = H[i];\n\n          // Swap\n          H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff |\n          (H_i << 24 | H_i >>> 8) & 0xff00ff00;\n        }\n\n        // Return final computed hash\n        return hash;\n      },\n\n      clone: function clone() {\n        var clone = Hasher.clone.call(this);\n        clone._hash = this._hash.clone();\n\n        return clone;\n      } });\n\n\n\n    function f1(x, y, z) {\n      return x ^ y ^ z;\n\n    }\n\n    function f2(x, y, z) {\n      return x & y | ~x & z;\n    }\n\n    function f3(x, y, z) {\n      return (x | ~y) ^ z;\n    }\n\n    function f4(x, y, z) {\n      return x & z | y & ~z;\n    }\n\n    function f5(x, y, z) {\n      return x ^ (y | ~z);\n\n    }\n\n    function rotl(x, n) {\n      return x << n | x >>> 32 - n;\n    }\n\n\n    /**\n       * Shortcut function to the hasher's object interface.\n       *\n       * @param {WordArray|string} message The message to hash.\n       *\n       * @return {WordArray} The hash.\n       *\n       * @static\n       *\n       * @example\n       *\n       *     var hash = CryptoJS.RIPEMD160('message');\n       *     var hash = CryptoJS.RIPEMD160(wordArray);\n       */\n    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);\n\n    /**\n                                                    * Shortcut function to the HMAC's object interface.\n                                                    *\n                                                    * @param {WordArray|string} message The message to hash.\n                                                    * @param {WordArray|string} key The secret key.\n                                                    *\n                                                    * @return {WordArray} The HMAC.\n                                                    *\n                                                    * @static\n                                                    *\n                                                    * @example\n                                                    *\n                                                    *     var hmac = CryptoJS.HmacRIPEMD160(message, key);\n                                                    */\n    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);\n  })(Math);\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var C_enc = C.enc;\n    var Utf8 = C_enc.Utf8;\n    var C_algo = C.algo;\n\n    /**\n                          * HMAC algorithm.\n                          */\n    var HMAC = C_algo.HMAC = Base.extend({\n      /**\n                                            * Initializes a newly created HMAC.\n                                            *\n                                            * @param {Hasher} hasher The hash algorithm to use.\n                                            * @param {WordArray|string} key The secret key.\n                                            *\n                                            * @example\n                                            *\n                                            *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n                                            */\n      init: function init(hasher, key) {\n        // Init hasher\n        hasher = this._hasher = new hasher.init();\n\n        // Convert string to WordArray, else assume WordArray already\n        if (typeof key == 'string') {\n          key = Utf8.parse(key);\n        }\n\n        // Shortcuts\n        var hasherBlockSize = hasher.blockSize;\n        var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n        // Allow arbitrary length keys\n        if (key.sigBytes > hasherBlockSizeBytes) {\n          key = hasher.finalize(key);\n        }\n\n        // Clamp excess bits\n        key.clamp();\n\n        // Clone key for inner and outer pads\n        var oKey = this._oKey = key.clone();\n        var iKey = this._iKey = key.clone();\n\n        // Shortcuts\n        var oKeyWords = oKey.words;\n        var iKeyWords = iKey.words;\n\n        // XOR keys with pad constants\n        for (var i = 0; i < hasherBlockSize; i++) {\n          oKeyWords[i] ^= 0x5c5c5c5c;\n          iKeyWords[i] ^= 0x36363636;\n        }\n        oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n        // Set initial values\n        this.reset();\n      },\n\n      /**\n          * Resets this HMAC to its initial state.\n          *\n          * @example\n          *\n          *     hmacHasher.reset();\n          */\n      reset: function reset() {\n        // Shortcut\n        var hasher = this._hasher;\n\n        // Reset\n        hasher.reset();\n        hasher.update(this._iKey);\n      },\n\n      /**\n          * Updates this HMAC with a message.\n          *\n          * @param {WordArray|string} messageUpdate The message to append.\n          *\n          * @return {HMAC} This HMAC instance.\n          *\n          * @example\n          *\n          *     hmacHasher.update('message');\n          *     hmacHasher.update(wordArray);\n          */\n      update: function update(messageUpdate) {\n        this._hasher.update(messageUpdate);\n\n        // Chainable\n        return this;\n      },\n\n      /**\n          * Finalizes the HMAC computation.\n          * Note that the finalize operation is effectively a destructive, read-once operation.\n          *\n          * @param {WordArray|string} messageUpdate (Optional) A final message update.\n          *\n          * @return {WordArray} The HMAC.\n          *\n          * @example\n          *\n          *     var hmac = hmacHasher.finalize();\n          *     var hmac = hmacHasher.finalize('message');\n          *     var hmac = hmacHasher.finalize(wordArray);\n          */\n      finalize: function finalize(messageUpdate) {\n        // Shortcut\n        var hasher = this._hasher;\n\n        // Compute HMAC\n        var innerHash = hasher.finalize(messageUpdate);\n        hasher.reset();\n        var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n        return hmac;\n      } });\n\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var WordArray = C_lib.WordArray;\n    var C_algo = C.algo;\n    var SHA1 = C_algo.SHA1;\n    var HMAC = C_algo.HMAC;\n\n    /**\n                             * Password-Based Key Derivation Function 2 algorithm.\n                             */\n    var PBKDF2 = C_algo.PBKDF2 = Base.extend({\n      /**\n                                                * Configuration options.\n                                                *\n                                                * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n                                                * @property {Hasher} hasher The hasher to use. Default: SHA1\n                                                * @property {number} iterations The number of iterations to perform. Default: 1\n                                                */\n      cfg: Base.extend({\n        keySize: 128 / 32,\n        hasher: SHA1,\n        iterations: 1 }),\n\n\n      /**\n                           * Initializes a newly created key derivation function.\n                           *\n                           * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n                           *\n                           * @example\n                           *\n                           *     var kdf = CryptoJS.algo.PBKDF2.create();\n                           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });\n                           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });\n                           */\n      init: function init(cfg) {\n        this.cfg = this.cfg.extend(cfg);\n      },\n\n      /**\n          * Computes the Password-Based Key Derivation Function 2.\n          *\n          * @param {WordArray|string} password The password.\n          * @param {WordArray|string} salt A salt.\n          *\n          * @return {WordArray} The derived key.\n          *\n          * @example\n          *\n          *     var key = kdf.compute(password, salt);\n          */\n      compute: function compute(password, salt) {\n        // Shortcut\n        var cfg = this.cfg;\n\n        // Init HMAC\n        var hmac = HMAC.create(cfg.hasher, password);\n\n        // Initial values\n        var derivedKey = WordArray.create();\n        var blockIndex = WordArray.create([0x00000001]);\n\n        // Shortcuts\n        var derivedKeyWords = derivedKey.words;\n        var blockIndexWords = blockIndex.words;\n        var keySize = cfg.keySize;\n        var iterations = cfg.iterations;\n\n        // Generate key\n        while (derivedKeyWords.length < keySize) {\n          var block = hmac.update(salt).finalize(blockIndex);\n          hmac.reset();\n\n          // Shortcuts\n          var blockWords = block.words;\n          var blockWordsLength = blockWords.length;\n\n          // Iterations\n          var intermediate = block;\n          for (var i = 1; i < iterations; i++) {\n            intermediate = hmac.finalize(intermediate);\n            hmac.reset();\n\n            // Shortcut\n            var intermediateWords = intermediate.words;\n\n            // XOR intermediate with block\n            for (var j = 0; j < blockWordsLength; j++) {\n              blockWords[j] ^= intermediateWords[j];\n            }\n          }\n\n          derivedKey.concat(block);\n          blockIndexWords[0]++;\n        }\n        derivedKey.sigBytes = keySize * 4;\n\n        return derivedKey;\n      } });\n\n\n    /**\n             * Computes the Password-Based Key Derivation Function 2.\n             *\n             * @param {WordArray|string} password The password.\n             * @param {WordArray|string} salt A salt.\n             * @param {Object} cfg (Optional) The configuration options to use for this computation.\n             *\n             * @return {WordArray} The derived key.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var key = CryptoJS.PBKDF2(password, salt);\n             *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });\n             *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });\n             */\n    C.PBKDF2 = function (password, salt, cfg) {\n      return PBKDF2.create(cfg).compute(password, salt);\n    };\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var WordArray = C_lib.WordArray;\n    var C_algo = C.algo;\n    var MD5 = C_algo.MD5;\n\n    /**\n                           * This key derivation function is meant to conform with EVP_BytesToKey.\n                           * www.openssl.org/docs/crypto/EVP_BytesToKey.html\n                           */\n    var EvpKDF = C_algo.EvpKDF = Base.extend({\n      /**\n                                                * Configuration options.\n                                                *\n                                                * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n                                                * @property {Hasher} hasher The hash algorithm to use. Default: MD5\n                                                * @property {number} iterations The number of iterations to perform. Default: 1\n                                                */\n      cfg: Base.extend({\n        keySize: 128 / 32,\n        hasher: MD5,\n        iterations: 1 }),\n\n\n      /**\n                           * Initializes a newly created key derivation function.\n                           *\n                           * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n                           *\n                           * @example\n                           *\n                           *     var kdf = CryptoJS.algo.EvpKDF.create();\n                           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });\n                           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });\n                           */\n      init: function init(cfg) {\n        this.cfg = this.cfg.extend(cfg);\n      },\n\n      /**\n          * Derives a key from a password.\n          *\n          * @param {WordArray|string} password The password.\n          * @param {WordArray|string} salt A salt.\n          *\n          * @return {WordArray} The derived key.\n          *\n          * @example\n          *\n          *     var key = kdf.compute(password, salt);\n          */\n      compute: function compute(password, salt) {\n        // Shortcut\n        var cfg = this.cfg;\n\n        // Init hasher\n        var hasher = cfg.hasher.create();\n\n        // Initial values\n        var derivedKey = WordArray.create();\n\n        // Shortcuts\n        var derivedKeyWords = derivedKey.words;\n        var keySize = cfg.keySize;\n        var iterations = cfg.iterations;\n\n        // Generate key\n        while (derivedKeyWords.length < keySize) {\n          if (block) {\n            hasher.update(block);\n          }\n          var block = hasher.update(password).finalize(salt);\n          hasher.reset();\n\n          // Iterations\n          for (var i = 1; i < iterations; i++) {\n            block = hasher.finalize(block);\n            hasher.reset();\n          }\n\n          derivedKey.concat(block);\n        }\n        derivedKey.sigBytes = keySize * 4;\n\n        return derivedKey;\n      } });\n\n\n    /**\n             * Derives a key from a password.\n             *\n             * @param {WordArray|string} password The password.\n             * @param {WordArray|string} salt A salt.\n             * @param {Object} cfg (Optional) The configuration options to use for this computation.\n             *\n             * @return {WordArray} The derived key.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var key = CryptoJS.EvpKDF(password, salt);\n             *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\n             *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });\n             */\n    C.EvpKDF = function (password, salt, cfg) {\n      return EvpKDF.create(cfg).compute(password, salt);\n    };\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var C_algo = C.algo;\n    var SHA256 = C_algo.SHA256;\n\n    /**\n                                 * SHA-224 hash algorithm.\n                                 */\n    var SHA224 = C_algo.SHA224 = SHA256.extend({\n      _doReset: function _doReset() {\n        this._hash = new WordArray.init([\n        0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n        0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4]);\n\n      },\n\n      _doFinalize: function _doFinalize() {\n        var hash = SHA256._doFinalize.call(this);\n\n        hash.sigBytes -= 4;\n\n        return hash;\n      } });\n\n\n    /**\n             * Shortcut function to the hasher's object interface.\n             *\n             * @param {WordArray|string} message The message to hash.\n             *\n             * @return {WordArray} The hash.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var hash = CryptoJS.SHA224('message');\n             *     var hash = CryptoJS.SHA224(wordArray);\n             */\n    C.SHA224 = SHA256._createHelper(SHA224);\n\n    /**\n                                              * Shortcut function to the HMAC's object interface.\n                                              *\n                                              * @param {WordArray|string} message The message to hash.\n                                              * @param {WordArray|string} key The secret key.\n                                              *\n                                              * @return {WordArray} The HMAC.\n                                              *\n                                              * @static\n                                              *\n                                              * @example\n                                              *\n                                              *     var hmac = CryptoJS.HmacSHA224(message, key);\n                                              */\n    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);\n  })();\n\n\n  (function (undefined) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var X32WordArray = C_lib.WordArray;\n\n    /**\n                                         * x64 namespace.\n                                         */\n    var C_x64 = C.x64 = {};\n\n    /**\n                             * A 64-bit word.\n                             */\n    var X64Word = C_x64.Word = Base.extend({\n      /**\n                                              * Initializes a newly created 64-bit word.\n                                              *\n                                              * @param {number} high The high 32 bits.\n                                              * @param {number} low The low 32 bits.\n                                              *\n                                              * @example\n                                              *\n                                              *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);\n                                              */\n      init: function init(high, low) {\n        this.high = high;\n        this.low = low;\n      }\n\n      /**\n         * Bitwise NOTs this word.\n         *\n         * @return {X64Word} A new x64-Word object after negating.\n         *\n         * @example\n         *\n         *     var negated = x64Word.not();\n         */\n      // not: function () {\n      // var high = ~this.high;\n      // var low = ~this.low;\n\n      // return X64Word.create(high, low);\n      // },\n\n      /**\n       * Bitwise ANDs this word with the passed word.\n       *\n       * @param {X64Word} word The x64-Word to AND with this word.\n       *\n       * @return {X64Word} A new x64-Word object after ANDing.\n       *\n       * @example\n       *\n       *     var anded = x64Word.and(anotherX64Word);\n       */\n      // and: function (word) {\n      // var high = this.high & word.high;\n      // var low = this.low & word.low;\n\n      // return X64Word.create(high, low);\n      // },\n\n      /**\n       * Bitwise ORs this word with the passed word.\n       *\n       * @param {X64Word} word The x64-Word to OR with this word.\n       *\n       * @return {X64Word} A new x64-Word object after ORing.\n       *\n       * @example\n       *\n       *     var ored = x64Word.or(anotherX64Word);\n       */\n      // or: function (word) {\n      // var high = this.high | word.high;\n      // var low = this.low | word.low;\n\n      // return X64Word.create(high, low);\n      // },\n\n      /**\n       * Bitwise XORs this word with the passed word.\n       *\n       * @param {X64Word} word The x64-Word to XOR with this word.\n       *\n       * @return {X64Word} A new x64-Word object after XORing.\n       *\n       * @example\n       *\n       *     var xored = x64Word.xor(anotherX64Word);\n       */\n      // xor: function (word) {\n      // var high = this.high ^ word.high;\n      // var low = this.low ^ word.low;\n\n      // return X64Word.create(high, low);\n      // },\n\n      /**\n       * Shifts this word n bits to the left.\n       *\n       * @param {number} n The number of bits to shift.\n       *\n       * @return {X64Word} A new x64-Word object after shifting.\n       *\n       * @example\n       *\n       *     var shifted = x64Word.shiftL(25);\n       */\n      // shiftL: function (n) {\n      // if (n < 32) {\n      // var high = (this.high << n) | (this.low >>> (32 - n));\n      // var low = this.low << n;\n      // } else {\n      // var high = this.low << (n - 32);\n      // var low = 0;\n      // }\n\n      // return X64Word.create(high, low);\n      // },\n\n      /**\n       * Shifts this word n bits to the right.\n       *\n       * @param {number} n The number of bits to shift.\n       *\n       * @return {X64Word} A new x64-Word object after shifting.\n       *\n       * @example\n       *\n       *     var shifted = x64Word.shiftR(7);\n       */\n      // shiftR: function (n) {\n      // if (n < 32) {\n      // var low = (this.low >>> n) | (this.high << (32 - n));\n      // var high = this.high >>> n;\n      // } else {\n      // var low = this.high >>> (n - 32);\n      // var high = 0;\n      // }\n\n      // return X64Word.create(high, low);\n      // },\n\n      /**\n       * Rotates this word n bits to the left.\n       *\n       * @param {number} n The number of bits to rotate.\n       *\n       * @return {X64Word} A new x64-Word object after rotating.\n       *\n       * @example\n       *\n       *     var rotated = x64Word.rotL(25);\n       */\n      // rotL: function (n) {\n      // return this.shiftL(n).or(this.shiftR(64 - n));\n      // },\n\n      /**\n       * Rotates this word n bits to the right.\n       *\n       * @param {number} n The number of bits to rotate.\n       *\n       * @return {X64Word} A new x64-Word object after rotating.\n       *\n       * @example\n       *\n       *     var rotated = x64Word.rotR(7);\n       */\n      // rotR: function (n) {\n      // return this.shiftR(n).or(this.shiftL(64 - n));\n      // },\n\n      /**\n       * Adds this word with the passed word.\n       *\n       * @param {X64Word} word The x64-Word to add with this word.\n       *\n       * @return {X64Word} A new x64-Word object after adding.\n       *\n       * @example\n       *\n       *     var added = x64Word.add(anotherX64Word);\n       */\n      // add: function (word) {\n      // var low = (this.low + word.low) | 0;\n      // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;\n      // var high = (this.high + word.high + carry) | 0;\n\n      // return X64Word.create(high, low);\n      // }\n    });\n\n    /**\n         * An array of 64-bit words.\n         *\n         * @property {Array} words The array of CryptoJS.x64.Word objects.\n         * @property {number} sigBytes The number of significant bytes in this word array.\n         */\n    var X64WordArray = C_x64.WordArray = Base.extend({\n      /**\n                                                        * Initializes a newly created word array.\n                                                        *\n                                                        * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.\n                                                        * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n                                                        *\n                                                        * @example\n                                                        *\n                                                        *     var wordArray = CryptoJS.x64.WordArray.create();\n                                                        *\n                                                        *     var wordArray = CryptoJS.x64.WordArray.create([\n                                                        *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n                                                        *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n                                                        *     ]);\n                                                        *\n                                                        *     var wordArray = CryptoJS.x64.WordArray.create([\n                                                        *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n                                                        *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n                                                        *     ], 10);\n                                                        */\n      init: function init(words, sigBytes) {\n        words = this.words = words || [];\n\n        if (sigBytes != undefined) {\n          this.sigBytes = sigBytes;\n        } else {\n          this.sigBytes = words.length * 8;\n        }\n      },\n\n      /**\n          * Converts this 64-bit word array to a 32-bit word array.\n          *\n          * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.\n          *\n          * @example\n          *\n          *     var x32WordArray = x64WordArray.toX32();\n          */\n      toX32: function toX32() {\n        // Shortcuts\n        var x64Words = this.words;\n        var x64WordsLength = x64Words.length;\n\n        // Convert\n        var x32Words = [];\n        for (var i = 0; i < x64WordsLength; i++) {\n          var x64Word = x64Words[i];\n          x32Words.push(x64Word.high);\n          x32Words.push(x64Word.low);\n        }\n\n        return X32WordArray.create(x32Words, this.sigBytes);\n      },\n\n      /**\n          * Creates a copy of this word array.\n          *\n          * @return {X64WordArray} The clone.\n          *\n          * @example\n          *\n          *     var clone = x64WordArray.clone();\n          */\n      clone: function clone() {\n        var clone = Base.clone.call(this);\n\n        // Clone \"words\" array\n        var words = clone.words = this.words.slice(0);\n\n        // Clone each X64Word object\n        var wordsLength = words.length;\n        for (var i = 0; i < wordsLength; i++) {\n          words[i] = words[i].clone();\n        }\n\n        return clone;\n      } });\n\n  })();\n\n\n  (function (Math) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var Hasher = C_lib.Hasher;\n    var C_x64 = C.x64;\n    var X64Word = C_x64.Word;\n    var C_algo = C.algo;\n\n    // Constants tables\n    var RHO_OFFSETS = [];\n    var PI_INDEXES = [];\n    var ROUND_CONSTANTS = [];\n\n    // Compute Constants\n    (function () {\n      // Compute rho offset constants\n      var x = 1,y = 0;\n      for (var t = 0; t < 24; t++) {\n        RHO_OFFSETS[x + 5 * y] = (t + 1) * (t + 2) / 2 % 64;\n\n        var newX = y % 5;\n        var newY = (2 * x + 3 * y) % 5;\n        x = newX;\n        y = newY;\n      }\n\n      // Compute pi index constants\n      for (var x = 0; x < 5; x++) {\n        for (var y = 0; y < 5; y++) {\n          PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5;\n        }\n      }\n\n      // Compute round constants\n      var LFSR = 0x01;\n      for (var i = 0; i < 24; i++) {\n        var roundConstantMsw = 0;\n        var roundConstantLsw = 0;\n\n        for (var j = 0; j < 7; j++) {\n          if (LFSR & 0x01) {\n            var bitPosition = (1 << j) - 1;\n            if (bitPosition < 32) {\n              roundConstantLsw ^= 1 << bitPosition;\n            } else /* if (bitPosition >= 32) */{\n                roundConstantMsw ^= 1 << bitPosition - 32;\n              }\n          }\n\n          // Compute next LFSR\n          if (LFSR & 0x80) {\n            // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1\n            LFSR = LFSR << 1 ^ 0x71;\n          } else {\n            LFSR <<= 1;\n          }\n        }\n\n        ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);\n      }\n    })();\n\n    // Reusable objects for temporary values\n    var T = [];\n    (function () {\n      for (var i = 0; i < 25; i++) {\n        T[i] = X64Word.create();\n      }\n    })();\n\n    /**\n           * SHA-3 hash algorithm.\n           */\n    var SHA3 = C_algo.SHA3 = Hasher.extend({\n      /**\n                                              * Configuration options.\n                                              *\n                                              * @property {number} outputLength\n                                              *   The desired number of bits in the output hash.\n                                              *   Only values permitted are: 224, 256, 384, 512.\n                                              *   Default: 512\n                                              */\n      cfg: Hasher.cfg.extend({\n        outputLength: 512 }),\n\n\n      _doReset: function _doReset() {\n        var state = this._state = [];\n        for (var i = 0; i < 25; i++) {\n          state[i] = new X64Word.init();\n        }\n\n        this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        // Shortcuts\n        var state = this._state;\n        var nBlockSizeLanes = this.blockSize / 2;\n\n        // Absorb\n        for (var i = 0; i < nBlockSizeLanes; i++) {\n          // Shortcuts\n          var M2i = M[offset + 2 * i];\n          var M2i1 = M[offset + 2 * i + 1];\n\n          // Swap endian\n          M2i =\n          (M2i << 8 | M2i >>> 24) & 0x00ff00ff |\n          (M2i << 24 | M2i >>> 8) & 0xff00ff00;\n\n          M2i1 =\n          (M2i1 << 8 | M2i1 >>> 24) & 0x00ff00ff |\n          (M2i1 << 24 | M2i1 >>> 8) & 0xff00ff00;\n\n\n          // Absorb message into state\n          var lane = state[i];\n          lane.high ^= M2i1;\n          lane.low ^= M2i;\n        }\n\n        // Rounds\n        for (var round = 0; round < 24; round++) {\n          // Theta\n          for (var x = 0; x < 5; x++) {\n            // Mix column lanes\n            var tMsw = 0,tLsw = 0;\n            for (var y = 0; y < 5; y++) {\n              var lane = state[x + 5 * y];\n              tMsw ^= lane.high;\n              tLsw ^= lane.low;\n            }\n\n            // Temporary values\n            var Tx = T[x];\n            Tx.high = tMsw;\n            Tx.low = tLsw;\n          }\n          for (var x = 0; x < 5; x++) {\n            // Shortcuts\n            var Tx4 = T[(x + 4) % 5];\n            var Tx1 = T[(x + 1) % 5];\n            var Tx1Msw = Tx1.high;\n            var Tx1Lsw = Tx1.low;\n\n            // Mix surrounding columns\n            var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);\n            var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);\n            for (var y = 0; y < 5; y++) {\n              var lane = state[x + 5 * y];\n              lane.high ^= tMsw;\n              lane.low ^= tLsw;\n            }\n          }\n\n          // Rho Pi\n          for (var laneIndex = 1; laneIndex < 25; laneIndex++) {\n            // Shortcuts\n            var lane = state[laneIndex];\n            var laneMsw = lane.high;\n            var laneLsw = lane.low;\n            var rhoOffset = RHO_OFFSETS[laneIndex];\n\n            // Rotate lanes\n            if (rhoOffset < 32) {\n              var tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;\n              var tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;\n            } else /* if (rhoOffset >= 32) */{\n                var tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;\n                var tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;\n              }\n\n            // Transpose lanes\n            var TPiLane = T[PI_INDEXES[laneIndex]];\n            TPiLane.high = tMsw;\n            TPiLane.low = tLsw;\n          }\n\n          // Rho pi at x = y = 0\n          var T0 = T[0];\n          var state0 = state[0];\n          T0.high = state0.high;\n          T0.low = state0.low;\n\n          // Chi\n          for (var x = 0; x < 5; x++) {\n            for (var y = 0; y < 5; y++) {\n              // Shortcuts\n              var laneIndex = x + 5 * y;\n              var lane = state[laneIndex];\n              var TLane = T[laneIndex];\n              var Tx1Lane = T[(x + 1) % 5 + 5 * y];\n              var Tx2Lane = T[(x + 2) % 5 + 5 * y];\n\n              // Mix rows\n              lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;\n              lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;\n            }\n          }\n\n          // Iota\n          var lane = state[0];\n          var roundConstant = ROUND_CONSTANTS[round];\n          lane.high ^= roundConstant.high;\n          lane.low ^= roundConstant.low;;\n        }\n      },\n\n      _doFinalize: function _doFinalize() {\n        // Shortcuts\n        var data = this._data;\n        var dataWords = data.words;\n        var nBitsTotal = this._nDataBytes * 8;\n        var nBitsLeft = data.sigBytes * 8;\n        var blockSizeBits = this.blockSize * 32;\n\n        // Add padding\n        dataWords[nBitsLeft >>> 5] |= 0x1 << 24 - nBitsLeft % 32;\n        dataWords[(Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 0x80;\n        data.sigBytes = dataWords.length * 4;\n\n        // Hash final blocks\n        this._process();\n\n        // Shortcuts\n        var state = this._state;\n        var outputLengthBytes = this.cfg.outputLength / 8;\n        var outputLengthLanes = outputLengthBytes / 8;\n\n        // Squeeze\n        var hashWords = [];\n        for (var i = 0; i < outputLengthLanes; i++) {\n          // Shortcuts\n          var lane = state[i];\n          var laneMsw = lane.high;\n          var laneLsw = lane.low;\n\n          // Swap endian\n          laneMsw =\n          (laneMsw << 8 | laneMsw >>> 24) & 0x00ff00ff |\n          (laneMsw << 24 | laneMsw >>> 8) & 0xff00ff00;\n\n          laneLsw =\n          (laneLsw << 8 | laneLsw >>> 24) & 0x00ff00ff |\n          (laneLsw << 24 | laneLsw >>> 8) & 0xff00ff00;\n\n\n          // Squeeze state to retrieve hash\n          hashWords.push(laneLsw);\n          hashWords.push(laneMsw);\n        }\n\n        // Return final computed hash\n        return new WordArray.init(hashWords, outputLengthBytes);\n      },\n\n      clone: function clone() {\n        var clone = Hasher.clone.call(this);\n\n        var state = clone._state = this._state.slice(0);\n        for (var i = 0; i < 25; i++) {\n          state[i] = state[i].clone();\n        }\n\n        return clone;\n      } });\n\n\n    /**\n             * Shortcut function to the hasher's object interface.\n             *\n             * @param {WordArray|string} message The message to hash.\n             *\n             * @return {WordArray} The hash.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var hash = CryptoJS.SHA3('message');\n             *     var hash = CryptoJS.SHA3(wordArray);\n             */\n    C.SHA3 = Hasher._createHelper(SHA3);\n\n    /**\n                                          * Shortcut function to the HMAC's object interface.\n                                          *\n                                          * @param {WordArray|string} message The message to hash.\n                                          * @param {WordArray|string} key The secret key.\n                                          *\n                                          * @return {WordArray} The HMAC.\n                                          *\n                                          * @static\n                                          *\n                                          * @example\n                                          *\n                                          *     var hmac = CryptoJS.HmacSHA3(message, key);\n                                          */\n    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);\n  })(Math);\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Hasher = C_lib.Hasher;\n    var C_x64 = C.x64;\n    var X64Word = C_x64.Word;\n    var X64WordArray = C_x64.WordArray;\n    var C_algo = C.algo;\n\n    function X64Word_create() {\n      return X64Word.create.apply(X64Word, arguments);\n    }\n\n    // Constants\n    var K = [\n    X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),\n    X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),\n    X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),\n    X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),\n    X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),\n    X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),\n    X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),\n    X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),\n    X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),\n    X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),\n    X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),\n    X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),\n    X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),\n    X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),\n    X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),\n    X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),\n    X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),\n    X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),\n    X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),\n    X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),\n    X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),\n    X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),\n    X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),\n    X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),\n    X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),\n    X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),\n    X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),\n    X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),\n    X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),\n    X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),\n    X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),\n    X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),\n    X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),\n    X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),\n    X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),\n    X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),\n    X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),\n    X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),\n    X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),\n    X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)];\n\n\n    // Reusable objects\n    var W = [];\n    (function () {\n      for (var i = 0; i < 80; i++) {\n        W[i] = X64Word_create();\n      }\n    })();\n\n    /**\n           * SHA-512 hash algorithm.\n           */\n    var SHA512 = C_algo.SHA512 = Hasher.extend({\n      _doReset: function _doReset() {\n        this._hash = new X64WordArray.init([\n        new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),\n        new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),\n        new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),\n        new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)]);\n\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        // Shortcuts\n        var H = this._hash.words;\n\n        var H0 = H[0];\n        var H1 = H[1];\n        var H2 = H[2];\n        var H3 = H[3];\n        var H4 = H[4];\n        var H5 = H[5];\n        var H6 = H[6];\n        var H7 = H[7];\n\n        var H0h = H0.high;\n        var H0l = H0.low;\n        var H1h = H1.high;\n        var H1l = H1.low;\n        var H2h = H2.high;\n        var H2l = H2.low;\n        var H3h = H3.high;\n        var H3l = H3.low;\n        var H4h = H4.high;\n        var H4l = H4.low;\n        var H5h = H5.high;\n        var H5l = H5.low;\n        var H6h = H6.high;\n        var H6l = H6.low;\n        var H7h = H7.high;\n        var H7l = H7.low;\n\n        // Working variables\n        var ah = H0h;\n        var al = H0l;\n        var bh = H1h;\n        var bl = H1l;\n        var ch = H2h;\n        var cl = H2l;\n        var dh = H3h;\n        var dl = H3l;\n        var eh = H4h;\n        var el = H4l;\n        var fh = H5h;\n        var fl = H5l;\n        var gh = H6h;\n        var gl = H6l;\n        var hh = H7h;\n        var hl = H7l;\n\n        // Rounds\n        for (var i = 0; i < 80; i++) {\n          // Shortcut\n          var Wi = W[i];\n\n          // Extend message\n          if (i < 16) {\n            var Wih = Wi.high = M[offset + i * 2] | 0;\n            var Wil = Wi.low = M[offset + i * 2 + 1] | 0;\n          } else {\n            // Gamma0\n            var gamma0x = W[i - 15];\n            var gamma0xh = gamma0x.high;\n            var gamma0xl = gamma0x.low;\n            var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;\n            var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25);\n\n            // Gamma1\n            var gamma1x = W[i - 2];\n            var gamma1xh = gamma1x.high;\n            var gamma1xl = gamma1x.low;\n            var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;\n            var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26);\n\n            // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]\n            var Wi7 = W[i - 7];\n            var Wi7h = Wi7.high;\n            var Wi7l = Wi7.low;\n\n            var Wi16 = W[i - 16];\n            var Wi16h = Wi16.high;\n            var Wi16l = Wi16.low;\n\n            var Wil = gamma0l + Wi7l;\n            var Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);\n            var Wil = Wil + gamma1l;\n            var Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);\n            var Wil = Wil + Wi16l;\n            var Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);\n\n            Wi.high = Wih;\n            Wi.low = Wil;\n          }\n\n          var chh = eh & fh ^ ~eh & gh;\n          var chl = el & fl ^ ~el & gl;\n          var majh = ah & bh ^ ah & ch ^ bh & ch;\n          var majl = al & bl ^ al & cl ^ bl & cl;\n\n          var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);\n          var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);\n          var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);\n          var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9);\n\n          // t1 = h + sigma1 + ch + K[i] + W[i]\n          var Ki = K[i];\n          var Kih = Ki.high;\n          var Kil = Ki.low;\n\n          var t1l = hl + sigma1l;\n          var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);\n          var t1l = t1l + chl;\n          var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);\n          var t1l = t1l + Kil;\n          var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);\n          var t1l = t1l + Wil;\n          var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);\n\n          // t2 = sigma0 + maj\n          var t2l = sigma0l + majl;\n          var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);\n\n          // Update working variables\n          hh = gh;\n          hl = gl;\n          gh = fh;\n          gl = fl;\n          fh = eh;\n          fl = el;\n          el = dl + t1l | 0;\n          eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;\n          dh = ch;\n          dl = cl;\n          ch = bh;\n          cl = bl;\n          bh = ah;\n          bl = al;\n          al = t1l + t2l | 0;\n          ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;\n        }\n\n        // Intermediate hash value\n        H0l = H0.low = H0l + al;\n        H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);\n        H1l = H1.low = H1l + bl;\n        H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);\n        H2l = H2.low = H2l + cl;\n        H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);\n        H3l = H3.low = H3l + dl;\n        H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);\n        H4l = H4.low = H4l + el;\n        H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);\n        H5l = H5.low = H5l + fl;\n        H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);\n        H6l = H6.low = H6l + gl;\n        H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);\n        H7l = H7.low = H7l + hl;\n        H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);\n      },\n\n      _doFinalize: function _doFinalize() {\n        // Shortcuts\n        var data = this._data;\n        var dataWords = data.words;\n\n        var nBitsTotal = this._nDataBytes * 8;\n        var nBitsLeft = data.sigBytes * 8;\n\n        // Add padding\n        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n        dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);\n        dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;\n        data.sigBytes = dataWords.length * 4;\n\n        // Hash final blocks\n        this._process();\n\n        // Convert hash to 32-bit word array before returning\n        var hash = this._hash.toX32();\n\n        // Return final computed hash\n        return hash;\n      },\n\n      clone: function clone() {\n        var clone = Hasher.clone.call(this);\n        clone._hash = this._hash.clone();\n\n        return clone;\n      },\n\n      blockSize: 1024 / 32 });\n\n\n    /**\n                                * Shortcut function to the hasher's object interface.\n                                *\n                                * @param {WordArray|string} message The message to hash.\n                                *\n                                * @return {WordArray} The hash.\n                                *\n                                * @static\n                                *\n                                * @example\n                                *\n                                *     var hash = CryptoJS.SHA512('message');\n                                *     var hash = CryptoJS.SHA512(wordArray);\n                                */\n    C.SHA512 = Hasher._createHelper(SHA512);\n\n    /**\n                                              * Shortcut function to the HMAC's object interface.\n                                              *\n                                              * @param {WordArray|string} message The message to hash.\n                                              * @param {WordArray|string} key The secret key.\n                                              *\n                                              * @return {WordArray} The HMAC.\n                                              *\n                                              * @static\n                                              *\n                                              * @example\n                                              *\n                                              *     var hmac = CryptoJS.HmacSHA512(message, key);\n                                              */\n    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_x64 = C.x64;\n    var X64Word = C_x64.Word;\n    var X64WordArray = C_x64.WordArray;\n    var C_algo = C.algo;\n    var SHA512 = C_algo.SHA512;\n\n    /**\n                                 * SHA-384 hash algorithm.\n                                 */\n    var SHA384 = C_algo.SHA384 = SHA512.extend({\n      _doReset: function _doReset() {\n        this._hash = new X64WordArray.init([\n        new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),\n        new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),\n        new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),\n        new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)]);\n\n      },\n\n      _doFinalize: function _doFinalize() {\n        var hash = SHA512._doFinalize.call(this);\n\n        hash.sigBytes -= 16;\n\n        return hash;\n      } });\n\n\n    /**\n             * Shortcut function to the hasher's object interface.\n             *\n             * @param {WordArray|string} message The message to hash.\n             *\n             * @return {WordArray} The hash.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var hash = CryptoJS.SHA384('message');\n             *     var hash = CryptoJS.SHA384(wordArray);\n             */\n    C.SHA384 = SHA512._createHelper(SHA384);\n\n    /**\n                                              * Shortcut function to the HMAC's object interface.\n                                              *\n                                              * @param {WordArray|string} message The message to hash.\n                                              * @param {WordArray|string} key The secret key.\n                                              *\n                                              * @return {WordArray} The HMAC.\n                                              *\n                                              * @static\n                                              *\n                                              * @example\n                                              *\n                                              *     var hmac = CryptoJS.HmacSHA384(message, key);\n                                              */\n    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);\n  })();\n\n\n  /**\n         * Cipher core components.\n         */\n  CryptoJS.lib.Cipher || function (undefined) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var WordArray = C_lib.WordArray;\n    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;\n    var C_enc = C.enc;\n    var Utf8 = C_enc.Utf8;\n    var Base64 = C_enc.Base64;\n    var C_algo = C.algo;\n    var EvpKDF = C_algo.EvpKDF;\n\n    /**\n                                 * Abstract base cipher template.\n                                 *\n                                 * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\n                                 * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\n                                 * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\n                                 * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\n                                 */\n    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({\n      /**\n                                                                 * Configuration options.\n                                                                 *\n                                                                 * @property {WordArray} iv The IV to use for this operation.\n                                                                 */\n      cfg: Base.extend(),\n\n      /**\n                           * Creates this cipher in encryption mode.\n                           *\n                           * @param {WordArray} key The key.\n                           * @param {Object} cfg (Optional) The configuration options to use for this operation.\n                           *\n                           * @return {Cipher} A cipher instance.\n                           *\n                           * @static\n                           *\n                           * @example\n                           *\n                           *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n                           */\n      createEncryptor: function createEncryptor(key, cfg) {\n        return this.create(this._ENC_XFORM_MODE, key, cfg);\n      },\n\n      /**\n          * Creates this cipher in decryption mode.\n          *\n          * @param {WordArray} key The key.\n          * @param {Object} cfg (Optional) The configuration options to use for this operation.\n          *\n          * @return {Cipher} A cipher instance.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n          */\n      createDecryptor: function createDecryptor(key, cfg) {\n        return this.create(this._DEC_XFORM_MODE, key, cfg);\n      },\n\n      /**\n          * Initializes a newly created cipher.\n          *\n          * @param {number} xformMode Either the encryption or decryption transormation mode constant.\n          * @param {WordArray} key The key.\n          * @param {Object} cfg (Optional) The configuration options to use for this operation.\n          *\n          * @example\n          *\n          *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\n          */\n      init: function init(xformMode, key, cfg) {\n        // Apply config defaults\n        this.cfg = this.cfg.extend(cfg);\n\n        // Store transform mode and key\n        this._xformMode = xformMode;\n        this._key = key;\n\n        // Set initial values\n        this.reset();\n      },\n\n      /**\n          * Resets this cipher to its initial state.\n          *\n          * @example\n          *\n          *     cipher.reset();\n          */\n      reset: function reset() {\n        // Reset data buffer\n        BufferedBlockAlgorithm.reset.call(this);\n\n        // Perform concrete-cipher logic\n        this._doReset();\n      },\n\n      /**\n          * Adds data to be encrypted or decrypted.\n          *\n          * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\n          *\n          * @return {WordArray} The data after processing.\n          *\n          * @example\n          *\n          *     var encrypted = cipher.process('data');\n          *     var encrypted = cipher.process(wordArray);\n          */\n      process: function process(dataUpdate) {\n        // Append\n        this._append(dataUpdate);\n\n        // Process available blocks\n        return this._process();\n      },\n\n      /**\n          * Finalizes the encryption or decryption process.\n          * Note that the finalize operation is effectively a destructive, read-once operation.\n          *\n          * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\n          *\n          * @return {WordArray} The data after final processing.\n          *\n          * @example\n          *\n          *     var encrypted = cipher.finalize();\n          *     var encrypted = cipher.finalize('data');\n          *     var encrypted = cipher.finalize(wordArray);\n          */\n      finalize: function finalize(dataUpdate) {\n        // Final data update\n        if (dataUpdate) {\n          this._append(dataUpdate);\n        }\n\n        // Perform concrete-cipher logic\n        var finalProcessedData = this._doFinalize();\n\n        return finalProcessedData;\n      },\n\n      keySize: 128 / 32,\n\n      ivSize: 128 / 32,\n\n      _ENC_XFORM_MODE: 1,\n\n      _DEC_XFORM_MODE: 2,\n\n      /**\n                           * Creates shortcut functions to a cipher's object interface.\n                           *\n                           * @param {Cipher} cipher The cipher to create a helper for.\n                           *\n                           * @return {Object} An object with encrypt and decrypt shortcut functions.\n                           *\n                           * @static\n                           *\n                           * @example\n                           *\n                           *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\n                           */\n      _createHelper: function () {\n        function selectCipherStrategy(key) {\n          if (typeof key == 'string') {\n            return PasswordBasedCipher;\n          } else {\n            return SerializableCipher;\n          }\n        }\n\n        return function (cipher) {\n          return {\n            encrypt: function encrypt(message, key, cfg) {\n              return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);\n            },\n\n            decrypt: function decrypt(ciphertext, key, cfg) {\n              return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);\n            } };\n\n        };\n      }() });\n\n\n    /**\n               * Abstract base stream cipher template.\n               *\n               * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\n               */\n    var StreamCipher = C_lib.StreamCipher = Cipher.extend({\n      _doFinalize: function _doFinalize() {\n        // Process partial blocks\n        var finalProcessedBlocks = this._process(!!'flush');\n\n        return finalProcessedBlocks;\n      },\n\n      blockSize: 1 });\n\n\n    /**\n                        * Mode namespace.\n                        */\n    var C_mode = C.mode = {};\n\n    /**\n                               * Abstract base block cipher mode template.\n                               */\n    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({\n      /**\n                                                                 * Creates this mode for encryption.\n                                                                 *\n                                                                 * @param {Cipher} cipher A block cipher instance.\n                                                                 * @param {Array} iv The IV words.\n                                                                 *\n                                                                 * @static\n                                                                 *\n                                                                 * @example\n                                                                 *\n                                                                 *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\n                                                                 */\n      createEncryptor: function createEncryptor(cipher, iv) {\n        return this.Encryptor.create(cipher, iv);\n      },\n\n      /**\n          * Creates this mode for decryption.\n          *\n          * @param {Cipher} cipher A block cipher instance.\n          * @param {Array} iv The IV words.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\n          */\n      createDecryptor: function createDecryptor(cipher, iv) {\n        return this.Decryptor.create(cipher, iv);\n      },\n\n      /**\n          * Initializes a newly created mode.\n          *\n          * @param {Cipher} cipher A block cipher instance.\n          * @param {Array} iv The IV words.\n          *\n          * @example\n          *\n          *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\n          */\n      init: function init(cipher, iv) {\n        this._cipher = cipher;\n        this._iv = iv;\n      } });\n\n\n    /**\n             * Cipher Block Chaining mode.\n             */\n    var CBC = C_mode.CBC = function () {\n      /**\n                                         * Abstract base CBC mode.\n                                         */\n      var CBC = BlockCipherMode.extend();\n\n      /**\n                                           * CBC encryptor.\n                                           */\n      CBC.Encryptor = CBC.extend({\n        /**\n                                    * Processes the data block at offset.\n                                    *\n                                    * @param {Array} words The data words to operate on.\n                                    * @param {number} offset The offset where the block starts.\n                                    *\n                                    * @example\n                                    *\n                                    *     mode.processBlock(data.words, offset);\n                                    */\n        processBlock: function processBlock(words, offset) {\n          // Shortcuts\n          var cipher = this._cipher;\n          var blockSize = cipher.blockSize;\n\n          // XOR and encrypt\n          xorBlock.call(this, words, offset, blockSize);\n          cipher.encryptBlock(words, offset);\n\n          // Remember this block to use with next block\n          this._prevBlock = words.slice(offset, offset + blockSize);\n        } });\n\n\n      /**\n               * CBC decryptor.\n               */\n      CBC.Decryptor = CBC.extend({\n        /**\n                                    * Processes the data block at offset.\n                                    *\n                                    * @param {Array} words The data words to operate on.\n                                    * @param {number} offset The offset where the block starts.\n                                    *\n                                    * @example\n                                    *\n                                    *     mode.processBlock(data.words, offset);\n                                    */\n        processBlock: function processBlock(words, offset) {\n          // Shortcuts\n          var cipher = this._cipher;\n          var blockSize = cipher.blockSize;\n\n          // Remember this block to use with next block\n          var thisBlock = words.slice(offset, offset + blockSize);\n\n          // Decrypt and XOR\n          cipher.decryptBlock(words, offset);\n          xorBlock.call(this, words, offset, blockSize);\n\n          // This block becomes the previous block\n          this._prevBlock = thisBlock;\n        } });\n\n\n      function xorBlock(words, offset, blockSize) {\n        // Shortcut\n        var iv = this._iv;\n\n        // Choose mixing block\n        if (iv) {\n          var block = iv;\n\n          // Remove IV for subsequent blocks\n          this._iv = undefined;\n        } else {\n          var block = this._prevBlock;\n        }\n\n        // XOR blocks\n        for (var i = 0; i < blockSize; i++) {\n          words[offset + i] ^= block[i];\n        }\n      }\n\n      return CBC;\n    }();\n\n    /**\n          * Padding namespace.\n          */\n    var C_pad = C.pad = {};\n\n    /**\n                             * PKCS #5/7 padding strategy.\n                             */\n    var Pkcs7 = C_pad.Pkcs7 = {\n      /**\n                                 * Pads data using the algorithm defined in PKCS #5/7.\n                                 *\n                                 * @param {WordArray} data The data to pad.\n                                 * @param {number} blockSize The multiple that the data should be padded to.\n                                 *\n                                 * @static\n                                 *\n                                 * @example\n                                 *\n                                 *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\n                                 */\n      pad: function pad(data, blockSize) {\n        // Shortcut\n        var blockSizeBytes = blockSize * 4;\n\n        // Count padding bytes\n        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n        // Create padding word\n        var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;\n\n        // Create padding\n        var paddingWords = [];\n        for (var i = 0; i < nPaddingBytes; i += 4) {\n          paddingWords.push(paddingWord);\n        }\n        var padding = WordArray.create(paddingWords, nPaddingBytes);\n\n        // Add padding\n        data.concat(padding);\n      },\n\n      /**\n          * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\n          *\n          * @param {WordArray} data The data to unpad.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     CryptoJS.pad.Pkcs7.unpad(wordArray);\n          */\n      unpad: function unpad(data) {\n        // Get number of padding bytes from last byte\n        var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;\n\n        // Remove padding\n        data.sigBytes -= nPaddingBytes;\n      } };\n\n\n    /**\n            * Abstract base block cipher template.\n            *\n            * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\n            */\n    var BlockCipher = C_lib.BlockCipher = Cipher.extend({\n      /**\n                                                           * Configuration options.\n                                                           *\n                                                           * @property {Mode} mode The block mode to use. Default: CBC\n                                                           * @property {Padding} padding The padding strategy to use. Default: Pkcs7\n                                                           */\n      cfg: Cipher.cfg.extend({\n        mode: CBC,\n        padding: Pkcs7 }),\n\n\n      reset: function reset() {\n        // Reset cipher\n        Cipher.reset.call(this);\n\n        // Shortcuts\n        var cfg = this.cfg;\n        var iv = cfg.iv;\n        var mode = cfg.mode;\n\n        // Reset block mode\n        if (this._xformMode == this._ENC_XFORM_MODE) {\n          var modeCreator = mode.createEncryptor;\n        } else /* if (this._xformMode == this._DEC_XFORM_MODE) */{\n            var modeCreator = mode.createDecryptor;\n            // Keep at least one block in the buffer for unpadding\n            this._minBufferSize = 1;\n          }\n\n        if (this._mode && this._mode.__creator == modeCreator) {\n          this._mode.init(this, iv && iv.words);\n        } else {\n          this._mode = modeCreator.call(mode, this, iv && iv.words);\n          this._mode.__creator = modeCreator;\n        }\n      },\n\n      _doProcessBlock: function _doProcessBlock(words, offset) {\n        this._mode.processBlock(words, offset);\n      },\n\n      _doFinalize: function _doFinalize() {\n        // Shortcut\n        var padding = this.cfg.padding;\n\n        // Finalize\n        if (this._xformMode == this._ENC_XFORM_MODE) {\n          // Pad data\n          padding.pad(this._data, this.blockSize);\n\n          // Process final blocks\n          var finalProcessedBlocks = this._process(!!'flush');\n        } else /* if (this._xformMode == this._DEC_XFORM_MODE) */{\n            // Process final blocks\n            var finalProcessedBlocks = this._process(!!'flush');\n\n            // Unpad data\n            padding.unpad(finalProcessedBlocks);\n          }\n\n        return finalProcessedBlocks;\n      },\n\n      blockSize: 128 / 32 });\n\n\n    /**\n                               * A collection of cipher parameters.\n                               *\n                               * @property {WordArray} ciphertext The raw ciphertext.\n                               * @property {WordArray} key The key to this ciphertext.\n                               * @property {WordArray} iv The IV used in the ciphering operation.\n                               * @property {WordArray} salt The salt used with a key derivation function.\n                               * @property {Cipher} algorithm The cipher algorithm.\n                               * @property {Mode} mode The block mode used in the ciphering operation.\n                               * @property {Padding} padding The padding scheme used in the ciphering operation.\n                               * @property {number} blockSize The block size of the cipher.\n                               * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\n                               */\n    var CipherParams = C_lib.CipherParams = Base.extend({\n      /**\n                                                           * Initializes a newly created cipher params object.\n                                                           *\n                                                           * @param {Object} cipherParams An object with any of the possible cipher parameters.\n                                                           *\n                                                           * @example\n                                                           *\n                                                           *     var cipherParams = CryptoJS.lib.CipherParams.create({\n                                                           *         ciphertext: ciphertextWordArray,\n                                                           *         key: keyWordArray,\n                                                           *         iv: ivWordArray,\n                                                           *         salt: saltWordArray,\n                                                           *         algorithm: CryptoJS.algo.AES,\n                                                           *         mode: CryptoJS.mode.CBC,\n                                                           *         padding: CryptoJS.pad.PKCS7,\n                                                           *         blockSize: 4,\n                                                           *         formatter: CryptoJS.format.OpenSSL\n                                                           *     });\n                                                           */\n      init: function init(cipherParams) {\n        this.mixIn(cipherParams);\n      },\n\n      /**\n          * Converts this cipher params object to a string.\n          *\n          * @param {Format} formatter (Optional) The formatting strategy to use.\n          *\n          * @return {string} The stringified cipher params.\n          *\n          * @throws Error If neither the formatter nor the default formatter is set.\n          *\n          * @example\n          *\n          *     var string = cipherParams + '';\n          *     var string = cipherParams.toString();\n          *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\n          */\n      toString: function toString(formatter) {\n        return (formatter || this.formatter).stringify(this);\n      } });\n\n\n    /**\n             * Format namespace.\n             */\n    var C_format = C.format = {};\n\n    /**\n                                   * OpenSSL formatting strategy.\n                                   */\n    var OpenSSLFormatter = C_format.OpenSSL = {\n      /**\n                                                 * Converts a cipher params object to an OpenSSL-compatible string.\n                                                 *\n                                                 * @param {CipherParams} cipherParams The cipher params object.\n                                                 *\n                                                 * @return {string} The OpenSSL-compatible string.\n                                                 *\n                                                 * @static\n                                                 *\n                                                 * @example\n                                                 *\n                                                 *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\n                                                 */\n      stringify: function stringify(cipherParams) {\n        // Shortcuts\n        var ciphertext = cipherParams.ciphertext;\n        var salt = cipherParams.salt;\n\n        // Format\n        if (salt) {\n          var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);\n        } else {\n          var wordArray = ciphertext;\n        }\n\n        return wordArray.toString(Base64);\n      },\n\n      /**\n          * Converts an OpenSSL-compatible string to a cipher params object.\n          *\n          * @param {string} openSSLStr The OpenSSL-compatible string.\n          *\n          * @return {CipherParams} The cipher params object.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\n          */\n      parse: function parse(openSSLStr) {\n        // Parse base64\n        var ciphertext = Base64.parse(openSSLStr);\n\n        // Shortcut\n        var ciphertextWords = ciphertext.words;\n\n        // Test for salt\n        if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {\n          // Extract salt\n          var salt = WordArray.create(ciphertextWords.slice(2, 4));\n\n          // Remove salt from ciphertext\n          ciphertextWords.splice(0, 4);\n          ciphertext.sigBytes -= 16;\n        }\n\n        return CipherParams.create({ ciphertext: ciphertext, salt: salt });\n      } };\n\n\n    /**\n            * A cipher wrapper that returns ciphertext as a serializable cipher params object.\n            */\n    var SerializableCipher = C_lib.SerializableCipher = Base.extend({\n      /**\n                                                                       * Configuration options.\n                                                                       *\n                                                                       * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\n                                                                       */\n      cfg: Base.extend({\n        format: OpenSSLFormatter }),\n\n\n      /**\n                                      * Encrypts a message.\n                                      *\n                                      * @param {Cipher} cipher The cipher algorithm to use.\n                                      * @param {WordArray|string} message The message to encrypt.\n                                      * @param {WordArray} key The key.\n                                      * @param {Object} cfg (Optional) The configuration options to use for this operation.\n                                      *\n                                      * @return {CipherParams} A cipher params object.\n                                      *\n                                      * @static\n                                      *\n                                      * @example\n                                      *\n                                      *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\n                                      *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\n                                      *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n                                      */\n      encrypt: function encrypt(cipher, message, key, cfg) {\n        // Apply config defaults\n        cfg = this.cfg.extend(cfg);\n\n        // Encrypt\n        var encryptor = cipher.createEncryptor(key, cfg);\n        var ciphertext = encryptor.finalize(message);\n\n        // Shortcut\n        var cipherCfg = encryptor.cfg;\n\n        // Create and return serializable cipher params\n        return CipherParams.create({\n          ciphertext: ciphertext,\n          key: key,\n          iv: cipherCfg.iv,\n          algorithm: cipher,\n          mode: cipherCfg.mode,\n          padding: cipherCfg.padding,\n          blockSize: cipher.blockSize,\n          formatter: cfg.format });\n\n      },\n\n      /**\n          * Decrypts serialized ciphertext.\n          *\n          * @param {Cipher} cipher The cipher algorithm to use.\n          * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n          * @param {WordArray} key The key.\n          * @param {Object} cfg (Optional) The configuration options to use for this operation.\n          *\n          * @return {WordArray} The plaintext.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n          *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n          */\n      decrypt: function decrypt(cipher, ciphertext, key, cfg) {\n        // Apply config defaults\n        cfg = this.cfg.extend(cfg);\n\n        // Convert string to CipherParams\n        ciphertext = this._parse(ciphertext, cfg.format);\n\n        // Decrypt\n        var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);\n\n        return plaintext;\n      },\n\n      /**\n          * Converts serialized ciphertext to CipherParams,\n          * else assumed CipherParams already and returns ciphertext unchanged.\n          *\n          * @param {CipherParams|string} ciphertext The ciphertext.\n          * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\n          *\n          * @return {CipherParams} The unserialized ciphertext.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\n          */\n      _parse: function _parse(ciphertext, format) {\n        if (typeof ciphertext == 'string') {\n          return format.parse(ciphertext, this);\n        } else {\n          return ciphertext;\n        }\n      } });\n\n\n    /**\n             * Key derivation function namespace.\n             */\n    var C_kdf = C.kdf = {};\n\n    /**\n                             * OpenSSL key derivation function.\n                             */\n    var OpenSSLKdf = C_kdf.OpenSSL = {\n      /**\n                                        * Derives a key and IV from a password.\n                                        *\n                                        * @param {string} password The password to derive from.\n                                        * @param {number} keySize The size in words of the key to generate.\n                                        * @param {number} ivSize The size in words of the IV to generate.\n                                        * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\n                                        *\n                                        * @return {CipherParams} A cipher params object with the key, IV, and salt.\n                                        *\n                                        * @static\n                                        *\n                                        * @example\n                                        *\n                                        *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\n                                        *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\n                                        */\n      execute: function execute(password, keySize, ivSize, salt) {\n        // Generate random salt\n        if (!salt) {\n          salt = WordArray.random(64 / 8);\n        }\n\n        // Derive key and IV\n        var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);\n\n        // Separate key and IV\n        var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\n        key.sigBytes = keySize * 4;\n\n        // Return params\n        return CipherParams.create({ key: key, iv: iv, salt: salt });\n      } };\n\n\n    /**\n            * A serializable cipher wrapper that derives the key from a password,\n            * and returns ciphertext as a serializable cipher params object.\n            */\n    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({\n      /**\n                                                                                       * Configuration options.\n                                                                                       *\n                                                                                       * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\n                                                                                       */\n      cfg: SerializableCipher.cfg.extend({\n        kdf: OpenSSLKdf }),\n\n\n      /**\n                             * Encrypts a message using a password.\n                             *\n                             * @param {Cipher} cipher The cipher algorithm to use.\n                             * @param {WordArray|string} message The message to encrypt.\n                             * @param {string} password The password.\n                             * @param {Object} cfg (Optional) The configuration options to use for this operation.\n                             *\n                             * @return {CipherParams} A cipher params object.\n                             *\n                             * @static\n                             *\n                             * @example\n                             *\n                             *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\n                             *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\n                             */\n      encrypt: function encrypt(cipher, message, password, cfg) {\n        // Apply config defaults\n        cfg = this.cfg.extend(cfg);\n\n        // Derive key and other params\n        var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);\n\n        // Add IV to config\n        cfg.iv = derivedParams.iv;\n\n        // Encrypt\n        var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);\n\n        // Mix in derived params\n        ciphertext.mixIn(derivedParams);\n\n        return ciphertext;\n      },\n\n      /**\n          * Decrypts serialized ciphertext using a password.\n          *\n          * @param {Cipher} cipher The cipher algorithm to use.\n          * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n          * @param {string} password The password.\n          * @param {Object} cfg (Optional) The configuration options to use for this operation.\n          *\n          * @return {WordArray} The plaintext.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\n          *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\n          */\n      decrypt: function decrypt(cipher, ciphertext, password, cfg) {\n        // Apply config defaults\n        cfg = this.cfg.extend(cfg);\n\n        // Convert string to CipherParams\n        ciphertext = this._parse(ciphertext, cfg.format);\n\n        // Derive key and other params\n        var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);\n\n        // Add IV to config\n        cfg.iv = derivedParams.iv;\n\n        // Decrypt\n        var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);\n\n        return plaintext;\n      } });\n\n  }();\n\n\n  /**\n        * Cipher Feedback block mode.\n        */\n  CryptoJS.mode.CFB = function () {\n    var CFB = CryptoJS.lib.BlockCipherMode.extend();\n\n    CFB.Encryptor = CFB.extend({\n      processBlock: function processBlock(words, offset) {\n        // Shortcuts\n        var cipher = this._cipher;\n        var blockSize = cipher.blockSize;\n\n        generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n        // Remember this block to use with next block\n        this._prevBlock = words.slice(offset, offset + blockSize);\n      } });\n\n\n    CFB.Decryptor = CFB.extend({\n      processBlock: function processBlock(words, offset) {\n        // Shortcuts\n        var cipher = this._cipher;\n        var blockSize = cipher.blockSize;\n\n        // Remember this block to use with next block\n        var thisBlock = words.slice(offset, offset + blockSize);\n\n        generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n        // This block becomes the previous block\n        this._prevBlock = thisBlock;\n      } });\n\n\n    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {\n      // Shortcut\n      var iv = this._iv;\n\n      // Generate keystream\n      if (iv) {\n        var keystream = iv.slice(0);\n\n        // Remove IV for subsequent blocks\n        this._iv = undefined;\n      } else {\n        var keystream = this._prevBlock;\n      }\n      cipher.encryptBlock(keystream, 0);\n\n      // Encrypt\n      for (var i = 0; i < blockSize; i++) {\n        words[offset + i] ^= keystream[i];\n      }\n    }\n\n    return CFB;\n  }();\n\n\n  /**\n        * Electronic Codebook block mode.\n        */\n  CryptoJS.mode.ECB = function () {\n    var ECB = CryptoJS.lib.BlockCipherMode.extend();\n\n    ECB.Encryptor = ECB.extend({\n      processBlock: function processBlock(words, offset) {\n        this._cipher.encryptBlock(words, offset);\n      } });\n\n\n    ECB.Decryptor = ECB.extend({\n      processBlock: function processBlock(words, offset) {\n        this._cipher.decryptBlock(words, offset);\n      } });\n\n\n    return ECB;\n  }();\n\n\n  /**\n        * ANSI X.923 padding strategy.\n        */\n  CryptoJS.pad.AnsiX923 = {\n    pad: function pad(data, blockSize) {\n      // Shortcuts\n      var dataSigBytes = data.sigBytes;\n      var blockSizeBytes = blockSize * 4;\n\n      // Count padding bytes\n      var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;\n\n      // Compute last byte position\n      var lastBytePos = dataSigBytes + nPaddingBytes - 1;\n\n      // Pad\n      data.clamp();\n      data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;\n      data.sigBytes += nPaddingBytes;\n    },\n\n    unpad: function unpad(data) {\n      // Get number of padding bytes from last byte\n      var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;\n\n      // Remove padding\n      data.sigBytes -= nPaddingBytes;\n    } };\n\n\n\n  /**\n          * ISO 10126 padding strategy.\n          */\n  CryptoJS.pad.Iso10126 = {\n    pad: function pad(data, blockSize) {\n      // Shortcut\n      var blockSizeBytes = blockSize * 4;\n\n      // Count padding bytes\n      var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n      // Pad\n      data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).\n      concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));\n    },\n\n    unpad: function unpad(data) {\n      // Get number of padding bytes from last byte\n      var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;\n\n      // Remove padding\n      data.sigBytes -= nPaddingBytes;\n    } };\n\n\n\n  /**\n          * ISO/IEC 9797-1 Padding Method 2.\n          */\n  CryptoJS.pad.Iso97971 = {\n    pad: function pad(data, blockSize) {\n      // Add 0x80 byte\n      data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));\n\n      // Zero pad the rest\n      CryptoJS.pad.ZeroPadding.pad(data, blockSize);\n    },\n\n    unpad: function unpad(data) {\n      // Remove zero padding\n      CryptoJS.pad.ZeroPadding.unpad(data);\n\n      // Remove one more byte -- the 0x80 byte\n      data.sigBytes--;\n    } };\n\n\n\n  /**\n          * Output Feedback block mode.\n          */\n  CryptoJS.mode.OFB = function () {\n    var OFB = CryptoJS.lib.BlockCipherMode.extend();\n\n    var Encryptor = OFB.Encryptor = OFB.extend({\n      processBlock: function processBlock(words, offset) {\n        // Shortcuts\n        var cipher = this._cipher;\n        var blockSize = cipher.blockSize;\n        var iv = this._iv;\n        var keystream = this._keystream;\n\n        // Generate keystream\n        if (iv) {\n          keystream = this._keystream = iv.slice(0);\n\n          // Remove IV for subsequent blocks\n          this._iv = undefined;\n        }\n        cipher.encryptBlock(keystream, 0);\n\n        // Encrypt\n        for (var i = 0; i < blockSize; i++) {\n          words[offset + i] ^= keystream[i];\n        }\n      } });\n\n\n    OFB.Decryptor = Encryptor;\n\n    return OFB;\n  }();\n\n\n  /**\n        * A noop padding strategy.\n        */\n  CryptoJS.pad.NoPadding = {\n    pad: function pad() {\n    },\n\n    unpad: function unpad() {\n    } };\n\n\n\n  (function (undefined) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var CipherParams = C_lib.CipherParams;\n    var C_enc = C.enc;\n    var Hex = C_enc.Hex;\n    var C_format = C.format;\n\n    var HexFormatter = C_format.Hex = {\n      /**\n                                         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.\n                                         *\n                                         * @param {CipherParams} cipherParams The cipher params object.\n                                         *\n                                         * @return {string} The hexadecimally encoded string.\n                                         *\n                                         * @static\n                                         *\n                                         * @example\n                                         *\n                                         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);\n                                         */\n      stringify: function stringify(cipherParams) {\n        return cipherParams.ciphertext.toString(Hex);\n      },\n\n      /**\n          * Converts a hexadecimally encoded ciphertext string to a cipher params object.\n          *\n          * @param {string} input The hexadecimally encoded string.\n          *\n          * @return {CipherParams} The cipher params object.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var cipherParams = CryptoJS.format.Hex.parse(hexString);\n          */\n      parse: function parse(input) {\n        var ciphertext = Hex.parse(input);\n        return CipherParams.create({ ciphertext: ciphertext });\n      } };\n\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var BlockCipher = C_lib.BlockCipher;\n    var C_algo = C.algo;\n\n    // Lookup tables\n    var SBOX = [];\n    var INV_SBOX = [];\n    var SUB_MIX_0 = [];\n    var SUB_MIX_1 = [];\n    var SUB_MIX_2 = [];\n    var SUB_MIX_3 = [];\n    var INV_SUB_MIX_0 = [];\n    var INV_SUB_MIX_1 = [];\n    var INV_SUB_MIX_2 = [];\n    var INV_SUB_MIX_3 = [];\n\n    // Compute lookup tables\n    (function () {\n      // Compute double table\n      var d = [];\n      for (var i = 0; i < 256; i++) {\n        if (i < 128) {\n          d[i] = i << 1;\n        } else {\n          d[i] = i << 1 ^ 0x11b;\n        }\n      }\n\n      // Walk GF(2^8)\n      var x = 0;\n      var xi = 0;\n      for (var i = 0; i < 256; i++) {\n        // Compute sbox\n        var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;\n        sx = sx >>> 8 ^ sx & 0xff ^ 0x63;\n        SBOX[x] = sx;\n        INV_SBOX[sx] = x;\n\n        // Compute multiplication\n        var x2 = d[x];\n        var x4 = d[x2];\n        var x8 = d[x4];\n\n        // Compute sub bytes, mix columns tables\n        var t = d[sx] * 0x101 ^ sx * 0x1010100;\n        SUB_MIX_0[x] = t << 24 | t >>> 8;\n        SUB_MIX_1[x] = t << 16 | t >>> 16;\n        SUB_MIX_2[x] = t << 8 | t >>> 24;\n        SUB_MIX_3[x] = t;\n\n        // Compute inv sub bytes, inv mix columns tables\n        var t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n        INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;\n        INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;\n        INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;\n        INV_SUB_MIX_3[sx] = t;\n\n        // Compute next counter\n        if (!x) {\n          x = xi = 1;\n        } else {\n          x = x2 ^ d[d[d[x8 ^ x2]]];\n          xi ^= d[d[xi]];\n        }\n      }\n    })();\n\n    // Precomputed Rcon lookup\n    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n\n    /**\n                                                                                    * AES block cipher algorithm.\n                                                                                    */\n    var AES = C_algo.AES = BlockCipher.extend({\n      _doReset: function _doReset() {\n        // Skip reset of nRounds has been set before and key did not change\n        if (this._nRounds && this._keyPriorReset === this._key) {\n          return;\n        }\n\n        // Shortcuts\n        var key = this._keyPriorReset = this._key;\n        var keyWords = key.words;\n        var keySize = key.sigBytes / 4;\n\n        // Compute number of rounds\n        var nRounds = this._nRounds = keySize + 6;\n\n        // Compute number of key schedule rows\n        var ksRows = (nRounds + 1) * 4;\n\n        // Compute key schedule\n        var keySchedule = this._keySchedule = [];\n        for (var ksRow = 0; ksRow < ksRows; ksRow++) {\n          if (ksRow < keySize) {\n            keySchedule[ksRow] = keyWords[ksRow];\n          } else {\n            var t = keySchedule[ksRow - 1];\n\n            if (!(ksRow % keySize)) {\n              // Rot word\n              t = t << 8 | t >>> 24;\n\n              // Sub word\n              t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 0xff] << 16 | SBOX[t >>> 8 & 0xff] << 8 | SBOX[t & 0xff];\n\n              // Mix Rcon\n              t ^= RCON[ksRow / keySize | 0] << 24;\n            } else if (keySize > 6 && ksRow % keySize == 4) {\n              // Sub word\n              t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 0xff] << 16 | SBOX[t >>> 8 & 0xff] << 8 | SBOX[t & 0xff];\n            }\n\n            keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;\n          }\n        }\n\n        // Compute inv key schedule\n        var invKeySchedule = this._invKeySchedule = [];\n        for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {\n          var ksRow = ksRows - invKsRow;\n\n          if (invKsRow % 4) {\n            var t = keySchedule[ksRow];\n          } else {\n            var t = keySchedule[ksRow - 4];\n          }\n\n          if (invKsRow < 4 || ksRow <= 4) {\n            invKeySchedule[invKsRow] = t;\n          } else {\n            invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 0xff]] ^\n            INV_SUB_MIX_2[SBOX[t >>> 8 & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];\n          }\n        }\n      },\n\n      encryptBlock: function encryptBlock(M, offset) {\n        this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);\n      },\n\n      decryptBlock: function decryptBlock(M, offset) {\n        // Swap 2nd and 4th rows\n        var t = M[offset + 1];\n        M[offset + 1] = M[offset + 3];\n        M[offset + 3] = t;\n\n        this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);\n\n        // Inv swap 2nd and 4th rows\n        var t = M[offset + 1];\n        M[offset + 1] = M[offset + 3];\n        M[offset + 3] = t;\n      },\n\n      _doCryptBlock: function _doCryptBlock(M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {\n        // Shortcut\n        var nRounds = this._nRounds;\n\n        // Get input, add round key\n        var s0 = M[offset] ^ keySchedule[0];\n        var s1 = M[offset + 1] ^ keySchedule[1];\n        var s2 = M[offset + 2] ^ keySchedule[2];\n        var s3 = M[offset + 3] ^ keySchedule[3];\n\n        // Key schedule row counter\n        var ksRow = 4;\n\n        // Rounds\n        for (var round = 1; round < nRounds; round++) {\n          // Shift rows, sub bytes, mix columns, add round key\n          var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[s1 >>> 16 & 0xff] ^ SUB_MIX_2[s2 >>> 8 & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];\n          var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[s2 >>> 16 & 0xff] ^ SUB_MIX_2[s3 >>> 8 & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];\n          var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[s3 >>> 16 & 0xff] ^ SUB_MIX_2[s0 >>> 8 & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];\n          var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[s0 >>> 16 & 0xff] ^ SUB_MIX_2[s1 >>> 8 & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];\n\n          // Update state\n          s0 = t0;\n          s1 = t1;\n          s2 = t2;\n          s3 = t3;\n        }\n\n        // Shift rows, sub bytes, add round key\n        var t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];\n        var t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];\n        var t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];\n        var t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];\n\n        // Set output\n        M[offset] = t0;\n        M[offset + 1] = t1;\n        M[offset + 2] = t2;\n        M[offset + 3] = t3;\n      },\n\n      keySize: 256 / 32 });\n\n\n    /**\n                             * Shortcut functions to the cipher's object interface.\n                             *\n                             * @example\n                             *\n                             *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);\n                             *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);\n                             */\n    C.AES = BlockCipher._createHelper(AES);\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var BlockCipher = C_lib.BlockCipher;\n    var C_algo = C.algo;\n\n    // Permuted Choice 1 constants\n    var PC1 = [\n    57, 49, 41, 33, 25, 17, 9, 1,\n    58, 50, 42, 34, 26, 18, 10, 2,\n    59, 51, 43, 35, 27, 19, 11, 3,\n    60, 52, 44, 36, 63, 55, 47, 39,\n    31, 23, 15, 7, 62, 54, 46, 38,\n    30, 22, 14, 6, 61, 53, 45, 37,\n    29, 21, 13, 5, 28, 20, 12, 4];\n\n\n    // Permuted Choice 2 constants\n    var PC2 = [\n    14, 17, 11, 24, 1, 5,\n    3, 28, 15, 6, 21, 10,\n    23, 19, 12, 4, 26, 8,\n    16, 7, 27, 20, 13, 2,\n    41, 52, 31, 37, 47, 55,\n    30, 40, 51, 45, 33, 48,\n    44, 49, 39, 56, 34, 53,\n    46, 42, 50, 36, 29, 32];\n\n\n    // Cumulative bit shift constants\n    var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];\n\n    // SBOXes and round permutation constants\n    var SBOX_P = [\n    {\n      0x0: 0x808200,\n      0x10000000: 0x8000,\n      0x20000000: 0x808002,\n      0x30000000: 0x2,\n      0x40000000: 0x200,\n      0x50000000: 0x808202,\n      0x60000000: 0x800202,\n      0x70000000: 0x800000,\n      0x80000000: 0x202,\n      0x90000000: 0x800200,\n      0xa0000000: 0x8200,\n      0xb0000000: 0x808000,\n      0xc0000000: 0x8002,\n      0xd0000000: 0x800002,\n      0xe0000000: 0x0,\n      0xf0000000: 0x8202,\n      0x8000000: 0x0,\n      0x18000000: 0x808202,\n      0x28000000: 0x8202,\n      0x38000000: 0x8000,\n      0x48000000: 0x808200,\n      0x58000000: 0x200,\n      0x68000000: 0x808002,\n      0x78000000: 0x2,\n      0x88000000: 0x800200,\n      0x98000000: 0x8200,\n      0xa8000000: 0x808000,\n      0xb8000000: 0x800202,\n      0xc8000000: 0x800002,\n      0xd8000000: 0x8002,\n      0xe8000000: 0x202,\n      0xf8000000: 0x800000,\n      0x1: 0x8000,\n      0x10000001: 0x2,\n      0x20000001: 0x808200,\n      0x30000001: 0x800000,\n      0x40000001: 0x808002,\n      0x50000001: 0x8200,\n      0x60000001: 0x200,\n      0x70000001: 0x800202,\n      0x80000001: 0x808202,\n      0x90000001: 0x808000,\n      0xa0000001: 0x800002,\n      0xb0000001: 0x8202,\n      0xc0000001: 0x202,\n      0xd0000001: 0x800200,\n      0xe0000001: 0x8002,\n      0xf0000001: 0x0,\n      0x8000001: 0x808202,\n      0x18000001: 0x808000,\n      0x28000001: 0x800000,\n      0x38000001: 0x200,\n      0x48000001: 0x8000,\n      0x58000001: 0x800002,\n      0x68000001: 0x2,\n      0x78000001: 0x8202,\n      0x88000001: 0x8002,\n      0x98000001: 0x800202,\n      0xa8000001: 0x202,\n      0xb8000001: 0x808200,\n      0xc8000001: 0x800200,\n      0xd8000001: 0x0,\n      0xe8000001: 0x8200,\n      0xf8000001: 0x808002 },\n\n    {\n      0x0: 0x40084010,\n      0x1000000: 0x4000,\n      0x2000000: 0x80000,\n      0x3000000: 0x40080010,\n      0x4000000: 0x40000010,\n      0x5000000: 0x40084000,\n      0x6000000: 0x40004000,\n      0x7000000: 0x10,\n      0x8000000: 0x84000,\n      0x9000000: 0x40004010,\n      0xa000000: 0x40000000,\n      0xb000000: 0x84010,\n      0xc000000: 0x80010,\n      0xd000000: 0x0,\n      0xe000000: 0x4010,\n      0xf000000: 0x40080000,\n      0x800000: 0x40004000,\n      0x1800000: 0x84010,\n      0x2800000: 0x10,\n      0x3800000: 0x40004010,\n      0x4800000: 0x40084010,\n      0x5800000: 0x40000000,\n      0x6800000: 0x80000,\n      0x7800000: 0x40080010,\n      0x8800000: 0x80010,\n      0x9800000: 0x0,\n      0xa800000: 0x4000,\n      0xb800000: 0x40080000,\n      0xc800000: 0x40000010,\n      0xd800000: 0x84000,\n      0xe800000: 0x40084000,\n      0xf800000: 0x4010,\n      0x10000000: 0x0,\n      0x11000000: 0x40080010,\n      0x12000000: 0x40004010,\n      0x13000000: 0x40084000,\n      0x14000000: 0x40080000,\n      0x15000000: 0x10,\n      0x16000000: 0x84010,\n      0x17000000: 0x4000,\n      0x18000000: 0x4010,\n      0x19000000: 0x80000,\n      0x1a000000: 0x80010,\n      0x1b000000: 0x40000010,\n      0x1c000000: 0x84000,\n      0x1d000000: 0x40004000,\n      0x1e000000: 0x40000000,\n      0x1f000000: 0x40084010,\n      0x10800000: 0x84010,\n      0x11800000: 0x80000,\n      0x12800000: 0x40080000,\n      0x13800000: 0x4000,\n      0x14800000: 0x40004000,\n      0x15800000: 0x40084010,\n      0x16800000: 0x10,\n      0x17800000: 0x40000000,\n      0x18800000: 0x40084000,\n      0x19800000: 0x40000010,\n      0x1a800000: 0x40004010,\n      0x1b800000: 0x80010,\n      0x1c800000: 0x0,\n      0x1d800000: 0x4010,\n      0x1e800000: 0x40080010,\n      0x1f800000: 0x84000 },\n\n    {\n      0x0: 0x104,\n      0x100000: 0x0,\n      0x200000: 0x4000100,\n      0x300000: 0x10104,\n      0x400000: 0x10004,\n      0x500000: 0x4000004,\n      0x600000: 0x4010104,\n      0x700000: 0x4010000,\n      0x800000: 0x4000000,\n      0x900000: 0x4010100,\n      0xa00000: 0x10100,\n      0xb00000: 0x4010004,\n      0xc00000: 0x4000104,\n      0xd00000: 0x10000,\n      0xe00000: 0x4,\n      0xf00000: 0x100,\n      0x80000: 0x4010100,\n      0x180000: 0x4010004,\n      0x280000: 0x0,\n      0x380000: 0x4000100,\n      0x480000: 0x4000004,\n      0x580000: 0x10000,\n      0x680000: 0x10004,\n      0x780000: 0x104,\n      0x880000: 0x4,\n      0x980000: 0x100,\n      0xa80000: 0x4010000,\n      0xb80000: 0x10104,\n      0xc80000: 0x10100,\n      0xd80000: 0x4000104,\n      0xe80000: 0x4010104,\n      0xf80000: 0x4000000,\n      0x1000000: 0x4010100,\n      0x1100000: 0x10004,\n      0x1200000: 0x10000,\n      0x1300000: 0x4000100,\n      0x1400000: 0x100,\n      0x1500000: 0x4010104,\n      0x1600000: 0x4000004,\n      0x1700000: 0x0,\n      0x1800000: 0x4000104,\n      0x1900000: 0x4000000,\n      0x1a00000: 0x4,\n      0x1b00000: 0x10100,\n      0x1c00000: 0x4010000,\n      0x1d00000: 0x104,\n      0x1e00000: 0x10104,\n      0x1f00000: 0x4010004,\n      0x1080000: 0x4000000,\n      0x1180000: 0x104,\n      0x1280000: 0x4010100,\n      0x1380000: 0x0,\n      0x1480000: 0x10004,\n      0x1580000: 0x4000100,\n      0x1680000: 0x100,\n      0x1780000: 0x4010004,\n      0x1880000: 0x10000,\n      0x1980000: 0x4010104,\n      0x1a80000: 0x10104,\n      0x1b80000: 0x4000004,\n      0x1c80000: 0x4000104,\n      0x1d80000: 0x4010000,\n      0x1e80000: 0x4,\n      0x1f80000: 0x10100 },\n\n    {\n      0x0: 0x80401000,\n      0x10000: 0x80001040,\n      0x20000: 0x401040,\n      0x30000: 0x80400000,\n      0x40000: 0x0,\n      0x50000: 0x401000,\n      0x60000: 0x80000040,\n      0x70000: 0x400040,\n      0x80000: 0x80000000,\n      0x90000: 0x400000,\n      0xa0000: 0x40,\n      0xb0000: 0x80001000,\n      0xc0000: 0x80400040,\n      0xd0000: 0x1040,\n      0xe0000: 0x1000,\n      0xf0000: 0x80401040,\n      0x8000: 0x80001040,\n      0x18000: 0x40,\n      0x28000: 0x80400040,\n      0x38000: 0x80001000,\n      0x48000: 0x401000,\n      0x58000: 0x80401040,\n      0x68000: 0x0,\n      0x78000: 0x80400000,\n      0x88000: 0x1000,\n      0x98000: 0x80401000,\n      0xa8000: 0x400000,\n      0xb8000: 0x1040,\n      0xc8000: 0x80000000,\n      0xd8000: 0x400040,\n      0xe8000: 0x401040,\n      0xf8000: 0x80000040,\n      0x100000: 0x400040,\n      0x110000: 0x401000,\n      0x120000: 0x80000040,\n      0x130000: 0x0,\n      0x140000: 0x1040,\n      0x150000: 0x80400040,\n      0x160000: 0x80401000,\n      0x170000: 0x80001040,\n      0x180000: 0x80401040,\n      0x190000: 0x80000000,\n      0x1a0000: 0x80400000,\n      0x1b0000: 0x401040,\n      0x1c0000: 0x80001000,\n      0x1d0000: 0x400000,\n      0x1e0000: 0x40,\n      0x1f0000: 0x1000,\n      0x108000: 0x80400000,\n      0x118000: 0x80401040,\n      0x128000: 0x0,\n      0x138000: 0x401000,\n      0x148000: 0x400040,\n      0x158000: 0x80000000,\n      0x168000: 0x80001040,\n      0x178000: 0x40,\n      0x188000: 0x80000040,\n      0x198000: 0x1000,\n      0x1a8000: 0x80001000,\n      0x1b8000: 0x80400040,\n      0x1c8000: 0x1040,\n      0x1d8000: 0x80401000,\n      0x1e8000: 0x400000,\n      0x1f8000: 0x401040 },\n\n    {\n      0x0: 0x80,\n      0x1000: 0x1040000,\n      0x2000: 0x40000,\n      0x3000: 0x20000000,\n      0x4000: 0x20040080,\n      0x5000: 0x1000080,\n      0x6000: 0x21000080,\n      0x7000: 0x40080,\n      0x8000: 0x1000000,\n      0x9000: 0x20040000,\n      0xa000: 0x20000080,\n      0xb000: 0x21040080,\n      0xc000: 0x21040000,\n      0xd000: 0x0,\n      0xe000: 0x1040080,\n      0xf000: 0x21000000,\n      0x800: 0x1040080,\n      0x1800: 0x21000080,\n      0x2800: 0x80,\n      0x3800: 0x1040000,\n      0x4800: 0x40000,\n      0x5800: 0x20040080,\n      0x6800: 0x21040000,\n      0x7800: 0x20000000,\n      0x8800: 0x20040000,\n      0x9800: 0x0,\n      0xa800: 0x21040080,\n      0xb800: 0x1000080,\n      0xc800: 0x20000080,\n      0xd800: 0x21000000,\n      0xe800: 0x1000000,\n      0xf800: 0x40080,\n      0x10000: 0x40000,\n      0x11000: 0x80,\n      0x12000: 0x20000000,\n      0x13000: 0x21000080,\n      0x14000: 0x1000080,\n      0x15000: 0x21040000,\n      0x16000: 0x20040080,\n      0x17000: 0x1000000,\n      0x18000: 0x21040080,\n      0x19000: 0x21000000,\n      0x1a000: 0x1040000,\n      0x1b000: 0x20040000,\n      0x1c000: 0x40080,\n      0x1d000: 0x20000080,\n      0x1e000: 0x0,\n      0x1f000: 0x1040080,\n      0x10800: 0x21000080,\n      0x11800: 0x1000000,\n      0x12800: 0x1040000,\n      0x13800: 0x20040080,\n      0x14800: 0x20000000,\n      0x15800: 0x1040080,\n      0x16800: 0x80,\n      0x17800: 0x21040000,\n      0x18800: 0x40080,\n      0x19800: 0x21040080,\n      0x1a800: 0x0,\n      0x1b800: 0x21000000,\n      0x1c800: 0x1000080,\n      0x1d800: 0x40000,\n      0x1e800: 0x20040000,\n      0x1f800: 0x20000080 },\n\n    {\n      0x0: 0x10000008,\n      0x100: 0x2000,\n      0x200: 0x10200000,\n      0x300: 0x10202008,\n      0x400: 0x10002000,\n      0x500: 0x200000,\n      0x600: 0x200008,\n      0x700: 0x10000000,\n      0x800: 0x0,\n      0x900: 0x10002008,\n      0xa00: 0x202000,\n      0xb00: 0x8,\n      0xc00: 0x10200008,\n      0xd00: 0x202008,\n      0xe00: 0x2008,\n      0xf00: 0x10202000,\n      0x80: 0x10200000,\n      0x180: 0x10202008,\n      0x280: 0x8,\n      0x380: 0x200000,\n      0x480: 0x202008,\n      0x580: 0x10000008,\n      0x680: 0x10002000,\n      0x780: 0x2008,\n      0x880: 0x200008,\n      0x980: 0x2000,\n      0xa80: 0x10002008,\n      0xb80: 0x10200008,\n      0xc80: 0x0,\n      0xd80: 0x10202000,\n      0xe80: 0x202000,\n      0xf80: 0x10000000,\n      0x1000: 0x10002000,\n      0x1100: 0x10200008,\n      0x1200: 0x10202008,\n      0x1300: 0x2008,\n      0x1400: 0x200000,\n      0x1500: 0x10000000,\n      0x1600: 0x10000008,\n      0x1700: 0x202000,\n      0x1800: 0x202008,\n      0x1900: 0x0,\n      0x1a00: 0x8,\n      0x1b00: 0x10200000,\n      0x1c00: 0x2000,\n      0x1d00: 0x10002008,\n      0x1e00: 0x10202000,\n      0x1f00: 0x200008,\n      0x1080: 0x8,\n      0x1180: 0x202000,\n      0x1280: 0x200000,\n      0x1380: 0x10000008,\n      0x1480: 0x10002000,\n      0x1580: 0x2008,\n      0x1680: 0x10202008,\n      0x1780: 0x10200000,\n      0x1880: 0x10202000,\n      0x1980: 0x10200008,\n      0x1a80: 0x2000,\n      0x1b80: 0x202008,\n      0x1c80: 0x200008,\n      0x1d80: 0x0,\n      0x1e80: 0x10000000,\n      0x1f80: 0x10002008 },\n\n    {\n      0x0: 0x100000,\n      0x10: 0x2000401,\n      0x20: 0x400,\n      0x30: 0x100401,\n      0x40: 0x2100401,\n      0x50: 0x0,\n      0x60: 0x1,\n      0x70: 0x2100001,\n      0x80: 0x2000400,\n      0x90: 0x100001,\n      0xa0: 0x2000001,\n      0xb0: 0x2100400,\n      0xc0: 0x2100000,\n      0xd0: 0x401,\n      0xe0: 0x100400,\n      0xf0: 0x2000000,\n      0x8: 0x2100001,\n      0x18: 0x0,\n      0x28: 0x2000401,\n      0x38: 0x2100400,\n      0x48: 0x100000,\n      0x58: 0x2000001,\n      0x68: 0x2000000,\n      0x78: 0x401,\n      0x88: 0x100401,\n      0x98: 0x2000400,\n      0xa8: 0x2100000,\n      0xb8: 0x100001,\n      0xc8: 0x400,\n      0xd8: 0x2100401,\n      0xe8: 0x1,\n      0xf8: 0x100400,\n      0x100: 0x2000000,\n      0x110: 0x100000,\n      0x120: 0x2000401,\n      0x130: 0x2100001,\n      0x140: 0x100001,\n      0x150: 0x2000400,\n      0x160: 0x2100400,\n      0x170: 0x100401,\n      0x180: 0x401,\n      0x190: 0x2100401,\n      0x1a0: 0x100400,\n      0x1b0: 0x1,\n      0x1c0: 0x0,\n      0x1d0: 0x2100000,\n      0x1e0: 0x2000001,\n      0x1f0: 0x400,\n      0x108: 0x100400,\n      0x118: 0x2000401,\n      0x128: 0x2100001,\n      0x138: 0x1,\n      0x148: 0x2000000,\n      0x158: 0x100000,\n      0x168: 0x401,\n      0x178: 0x2100400,\n      0x188: 0x2000001,\n      0x198: 0x2100000,\n      0x1a8: 0x0,\n      0x1b8: 0x2100401,\n      0x1c8: 0x100401,\n      0x1d8: 0x400,\n      0x1e8: 0x2000400,\n      0x1f8: 0x100001 },\n\n    {\n      0x0: 0x8000820,\n      0x1: 0x20000,\n      0x2: 0x8000000,\n      0x3: 0x20,\n      0x4: 0x20020,\n      0x5: 0x8020820,\n      0x6: 0x8020800,\n      0x7: 0x800,\n      0x8: 0x8020000,\n      0x9: 0x8000800,\n      0xa: 0x20800,\n      0xb: 0x8020020,\n      0xc: 0x820,\n      0xd: 0x0,\n      0xe: 0x8000020,\n      0xf: 0x20820,\n      0x80000000: 0x800,\n      0x80000001: 0x8020820,\n      0x80000002: 0x8000820,\n      0x80000003: 0x8000000,\n      0x80000004: 0x8020000,\n      0x80000005: 0x20800,\n      0x80000006: 0x20820,\n      0x80000007: 0x20,\n      0x80000008: 0x8000020,\n      0x80000009: 0x820,\n      0x8000000a: 0x20020,\n      0x8000000b: 0x8020800,\n      0x8000000c: 0x0,\n      0x8000000d: 0x8020020,\n      0x8000000e: 0x8000800,\n      0x8000000f: 0x20000,\n      0x10: 0x20820,\n      0x11: 0x8020800,\n      0x12: 0x20,\n      0x13: 0x800,\n      0x14: 0x8000800,\n      0x15: 0x8000020,\n      0x16: 0x8020020,\n      0x17: 0x20000,\n      0x18: 0x0,\n      0x19: 0x20020,\n      0x1a: 0x8020000,\n      0x1b: 0x8000820,\n      0x1c: 0x8020820,\n      0x1d: 0x20800,\n      0x1e: 0x820,\n      0x1f: 0x8000000,\n      0x80000010: 0x20000,\n      0x80000011: 0x800,\n      0x80000012: 0x8020020,\n      0x80000013: 0x20820,\n      0x80000014: 0x20,\n      0x80000015: 0x8020000,\n      0x80000016: 0x8000000,\n      0x80000017: 0x8000820,\n      0x80000018: 0x8020820,\n      0x80000019: 0x8000020,\n      0x8000001a: 0x8000800,\n      0x8000001b: 0x0,\n      0x8000001c: 0x20800,\n      0x8000001d: 0x820,\n      0x8000001e: 0x20020,\n      0x8000001f: 0x8020800 }];\n\n\n\n    // Masks that select the SBOX input\n    var SBOX_MASK = [\n    0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,\n    0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f];\n\n\n    /**\n                                                      * DES block cipher algorithm.\n                                                      */\n    var DES = C_algo.DES = BlockCipher.extend({\n      _doReset: function _doReset() {\n        // Shortcuts\n        var key = this._key;\n        var keyWords = key.words;\n\n        // Select 56 bits according to PC1\n        var keyBits = [];\n        for (var i = 0; i < 56; i++) {\n          var keyBitPos = PC1[i] - 1;\n          keyBits[i] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;\n        }\n\n        // Assemble 16 subkeys\n        var subKeys = this._subKeys = [];\n        for (var nSubKey = 0; nSubKey < 16; nSubKey++) {\n          // Create subkey\n          var subKey = subKeys[nSubKey] = [];\n\n          // Shortcut\n          var bitShift = BIT_SHIFTS[nSubKey];\n\n          // Select 48 bits according to PC2\n          for (var i = 0; i < 24; i++) {\n            // Select from the left 28 key bits\n            subKey[i / 6 | 0] |= keyBits[(PC2[i] - 1 + bitShift) % 28] << 31 - i % 6;\n\n            // Select from the right 28 key bits\n            subKey[4 + (i / 6 | 0)] |= keyBits[28 + (PC2[i + 24] - 1 + bitShift) % 28] << 31 - i % 6;\n          }\n\n          // Since each subkey is applied to an expanded 32-bit input,\n          // the subkey can be broken into 8 values scaled to 32-bits,\n          // which allows the key to be used without expansion\n          subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;\n          for (var i = 1; i < 7; i++) {\n            subKey[i] = subKey[i] >>> (i - 1) * 4 + 3;\n          }\n          subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;\n        }\n\n        // Compute inverse subkeys\n        var invSubKeys = this._invSubKeys = [];\n        for (var i = 0; i < 16; i++) {\n          invSubKeys[i] = subKeys[15 - i];\n        }\n      },\n\n      encryptBlock: function encryptBlock(M, offset) {\n        this._doCryptBlock(M, offset, this._subKeys);\n      },\n\n      decryptBlock: function decryptBlock(M, offset) {\n        this._doCryptBlock(M, offset, this._invSubKeys);\n      },\n\n      _doCryptBlock: function _doCryptBlock(M, offset, subKeys) {\n        // Get input\n        this._lBlock = M[offset];\n        this._rBlock = M[offset + 1];\n\n        // Initial permutation\n        exchangeLR.call(this, 4, 0x0f0f0f0f);\n        exchangeLR.call(this, 16, 0x0000ffff);\n        exchangeRL.call(this, 2, 0x33333333);\n        exchangeRL.call(this, 8, 0x00ff00ff);\n        exchangeLR.call(this, 1, 0x55555555);\n\n        // Rounds\n        for (var round = 0; round < 16; round++) {\n          // Shortcuts\n          var subKey = subKeys[round];\n          var lBlock = this._lBlock;\n          var rBlock = this._rBlock;\n\n          // Feistel function\n          var f = 0;\n          for (var i = 0; i < 8; i++) {\n            f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];\n          }\n          this._lBlock = rBlock;\n          this._rBlock = lBlock ^ f;\n        }\n\n        // Undo swap from last round\n        var t = this._lBlock;\n        this._lBlock = this._rBlock;\n        this._rBlock = t;\n\n        // Final permutation\n        exchangeLR.call(this, 1, 0x55555555);\n        exchangeRL.call(this, 8, 0x00ff00ff);\n        exchangeRL.call(this, 2, 0x33333333);\n        exchangeLR.call(this, 16, 0x0000ffff);\n        exchangeLR.call(this, 4, 0x0f0f0f0f);\n\n        // Set output\n        M[offset] = this._lBlock;\n        M[offset + 1] = this._rBlock;\n      },\n\n      keySize: 64 / 32,\n\n      ivSize: 64 / 32,\n\n      blockSize: 64 / 32 });\n\n\n    // Swap bits across the left and right words\n    function exchangeLR(offset, mask) {\n      var t = (this._lBlock >>> offset ^ this._rBlock) & mask;\n      this._rBlock ^= t;\n      this._lBlock ^= t << offset;\n    }\n\n    function exchangeRL(offset, mask) {\n      var t = (this._rBlock >>> offset ^ this._lBlock) & mask;\n      this._lBlock ^= t;\n      this._rBlock ^= t << offset;\n    }\n\n    /**\n       * Shortcut functions to the cipher's object interface.\n       *\n       * @example\n       *\n       *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);\n       *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);\n       */\n    C.DES = BlockCipher._createHelper(DES);\n\n    /**\n                                             * Triple-DES block cipher algorithm.\n                                             */\n    var TripleDES = C_algo.TripleDES = BlockCipher.extend({\n      _doReset: function _doReset() {\n        // Shortcuts\n        var key = this._key;\n        var keyWords = key.words;\n\n        // Create DES instances\n        this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));\n        this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));\n        this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));\n      },\n\n      encryptBlock: function encryptBlock(M, offset) {\n        this._des1.encryptBlock(M, offset);\n        this._des2.decryptBlock(M, offset);\n        this._des3.encryptBlock(M, offset);\n      },\n\n      decryptBlock: function decryptBlock(M, offset) {\n        this._des3.decryptBlock(M, offset);\n        this._des2.encryptBlock(M, offset);\n        this._des1.decryptBlock(M, offset);\n      },\n\n      keySize: 192 / 32,\n\n      ivSize: 64 / 32,\n\n      blockSize: 64 / 32 });\n\n\n    /**\n                              * Shortcut functions to the cipher's object interface.\n                              *\n                              * @example\n                              *\n                              *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);\n                              *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);\n                              */\n    C.TripleDES = BlockCipher._createHelper(TripleDES);\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var StreamCipher = C_lib.StreamCipher;\n    var C_algo = C.algo;\n\n    /**\n                          * RC4 stream cipher algorithm.\n                          */\n    var RC4 = C_algo.RC4 = StreamCipher.extend({\n      _doReset: function _doReset() {\n        // Shortcuts\n        var key = this._key;\n        var keyWords = key.words;\n        var keySigBytes = key.sigBytes;\n\n        // Init sbox\n        var S = this._S = [];\n        for (var i = 0; i < 256; i++) {\n          S[i] = i;\n        }\n\n        // Key setup\n        for (var i = 0, j = 0; i < 256; i++) {\n          var keyByteIndex = i % keySigBytes;\n          var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 0xff;\n\n          j = (j + S[i] + keyByte) % 256;\n\n          // Swap\n          var t = S[i];\n          S[i] = S[j];\n          S[j] = t;\n        }\n\n        // Counters\n        this._i = this._j = 0;\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        M[offset] ^= generateKeystreamWord.call(this);\n      },\n\n      keySize: 256 / 32,\n\n      ivSize: 0 });\n\n\n    function generateKeystreamWord() {\n      // Shortcuts\n      var S = this._S;\n      var i = this._i;\n      var j = this._j;\n\n      // Generate keystream word\n      var keystreamWord = 0;\n      for (var n = 0; n < 4; n++) {\n        i = (i + 1) % 256;\n        j = (j + S[i]) % 256;\n\n        // Swap\n        var t = S[i];\n        S[i] = S[j];\n        S[j] = t;\n\n        keystreamWord |= S[(S[i] + S[j]) % 256] << 24 - n * 8;\n      }\n\n      // Update counters\n      this._i = i;\n      this._j = j;\n\n      return keystreamWord;\n    }\n\n    /**\n       * Shortcut functions to the cipher's object interface.\n       *\n       * @example\n       *\n       *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);\n       *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);\n       */\n    C.RC4 = StreamCipher._createHelper(RC4);\n\n    /**\n                                              * Modified RC4 stream cipher algorithm.\n                                              */\n    var RC4Drop = C_algo.RC4Drop = RC4.extend({\n      /**\n                                                 * Configuration options.\n                                                 *\n                                                 * @property {number} drop The number of keystream words to drop. Default 192\n                                                 */\n      cfg: RC4.cfg.extend({\n        drop: 192 }),\n\n\n      _doReset: function _doReset() {\n        RC4._doReset.call(this);\n\n        // Drop\n        for (var i = this.cfg.drop; i > 0; i--) {\n          generateKeystreamWord.call(this);\n        }\n      } });\n\n\n    /**\n             * Shortcut functions to the cipher's object interface.\n             *\n             * @example\n             *\n             *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);\n             *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);\n             */\n    C.RC4Drop = StreamCipher._createHelper(RC4Drop);\n  })();\n\n\n  /** @preserve\n         * Counter block mode compatible with  Dr Brian Gladman fileenc.c\n         * derived from CryptoJS.mode.CTR\n         * Jan Hruby jhruby.web@gmail.com\n         */\n  CryptoJS.mode.CTRGladman = function () {\n    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();\n\n    function incWord(word)\n    {\n      if ((word >> 24 & 0xff) === 0xff) {//overflow\n        var b1 = word >> 16 & 0xff;\n        var b2 = word >> 8 & 0xff;\n        var b3 = word & 0xff;\n\n        if (b1 === 0xff) // overflow b1\n          {\n            b1 = 0;\n            if (b2 === 0xff)\n            {\n              b2 = 0;\n              if (b3 === 0xff)\n              {\n                b3 = 0;\n              } else\n\n              {\n                ++b3;\n              }\n            } else\n\n            {\n              ++b2;\n            }\n          } else\n\n        {\n          ++b1;\n        }\n\n        word = 0;\n        word += b1 << 16;\n        word += b2 << 8;\n        word += b3;\n      } else\n\n      {\n        word += 0x01 << 24;\n      }\n      return word;\n    }\n\n    function incCounter(counter)\n    {\n      if ((counter[0] = incWord(counter[0])) === 0)\n      {\n        // encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8\n        counter[1] = incWord(counter[1]);\n      }\n      return counter;\n    }\n\n    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({\n      processBlock: function processBlock(words, offset) {\n        // Shortcuts\n        var cipher = this._cipher;\n        var blockSize = cipher.blockSize;\n        var iv = this._iv;\n        var counter = this._counter;\n\n        // Generate keystream\n        if (iv) {\n          counter = this._counter = iv.slice(0);\n\n          // Remove IV for subsequent blocks\n          this._iv = undefined;\n        }\n\n        incCounter(counter);\n\n        var keystream = counter.slice(0);\n        cipher.encryptBlock(keystream, 0);\n\n        // Encrypt\n        for (var i = 0; i < blockSize; i++) {\n          words[offset + i] ^= keystream[i];\n        }\n      } });\n\n\n    CTRGladman.Decryptor = Encryptor;\n\n    return CTRGladman;\n  }();\n\n\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var StreamCipher = C_lib.StreamCipher;\n    var C_algo = C.algo;\n\n    // Reusable objects\n    var S = [];\n    var C_ = [];\n    var G = [];\n\n    /**\n                 * Rabbit stream cipher algorithm\n                 */\n    var Rabbit = C_algo.Rabbit = StreamCipher.extend({\n      _doReset: function _doReset() {\n        // Shortcuts\n        var K = this._key.words;\n        var iv = this.cfg.iv;\n\n        // Swap endian\n        for (var i = 0; i < 4; i++) {\n          K[i] = (K[i] << 8 | K[i] >>> 24) & 0x00ff00ff |\n          (K[i] << 24 | K[i] >>> 8) & 0xff00ff00;\n        }\n\n        // Generate initial state values\n        var X = this._X = [\n        K[0], K[3] << 16 | K[2] >>> 16,\n        K[1], K[0] << 16 | K[3] >>> 16,\n        K[2], K[1] << 16 | K[0] >>> 16,\n        K[3], K[2] << 16 | K[1] >>> 16];\n\n\n        // Generate initial counter values\n        var C = this._C = [\n        K[2] << 16 | K[2] >>> 16, K[0] & 0xffff0000 | K[1] & 0x0000ffff,\n        K[3] << 16 | K[3] >>> 16, K[1] & 0xffff0000 | K[2] & 0x0000ffff,\n        K[0] << 16 | K[0] >>> 16, K[2] & 0xffff0000 | K[3] & 0x0000ffff,\n        K[1] << 16 | K[1] >>> 16, K[3] & 0xffff0000 | K[0] & 0x0000ffff];\n\n\n        // Carry bit\n        this._b = 0;\n\n        // Iterate the system four times\n        for (var i = 0; i < 4; i++) {\n          nextState.call(this);\n        }\n\n        // Modify the counters\n        for (var i = 0; i < 8; i++) {\n          C[i] ^= X[i + 4 & 7];\n        }\n\n        // IV setup\n        if (iv) {\n          // Shortcuts\n          var IV = iv.words;\n          var IV_0 = IV[0];\n          var IV_1 = IV[1];\n\n          // Generate four subvectors\n          var i0 = (IV_0 << 8 | IV_0 >>> 24) & 0x00ff00ff | (IV_0 << 24 | IV_0 >>> 8) & 0xff00ff00;\n          var i2 = (IV_1 << 8 | IV_1 >>> 24) & 0x00ff00ff | (IV_1 << 24 | IV_1 >>> 8) & 0xff00ff00;\n          var i1 = i0 >>> 16 | i2 & 0xffff0000;\n          var i3 = i2 << 16 | i0 & 0x0000ffff;\n\n          // Modify counter values\n          C[0] ^= i0;\n          C[1] ^= i1;\n          C[2] ^= i2;\n          C[3] ^= i3;\n          C[4] ^= i0;\n          C[5] ^= i1;\n          C[6] ^= i2;\n          C[7] ^= i3;\n\n          // Iterate the system four times\n          for (var i = 0; i < 4; i++) {\n            nextState.call(this);\n          }\n        }\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        // Shortcut\n        var X = this._X;\n\n        // Iterate the system\n        nextState.call(this);\n\n        // Generate four keystream words\n        S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;\n        S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;\n        S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;\n        S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;\n\n        for (var i = 0; i < 4; i++) {\n          // Swap endian\n          S[i] = (S[i] << 8 | S[i] >>> 24) & 0x00ff00ff |\n          (S[i] << 24 | S[i] >>> 8) & 0xff00ff00;\n\n          // Encrypt\n          M[offset + i] ^= S[i];\n        }\n      },\n\n      blockSize: 128 / 32,\n\n      ivSize: 64 / 32 });\n\n\n    function nextState() {\n      // Shortcuts\n      var X = this._X;\n      var C = this._C;\n\n      // Save old counter values\n      for (var i = 0; i < 8; i++) {\n        C_[i] = C[i];\n      }\n\n      // Calculate new counter values\n      C[0] = C[0] + 0x4d34d34d + this._b | 0;\n      C[1] = C[1] + 0xd34d34d3 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;\n      C[2] = C[2] + 0x34d34d34 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;\n      C[3] = C[3] + 0x4d34d34d + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;\n      C[4] = C[4] + 0xd34d34d3 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;\n      C[5] = C[5] + 0x34d34d34 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;\n      C[6] = C[6] + 0x4d34d34d + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;\n      C[7] = C[7] + 0xd34d34d3 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;\n      this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;\n\n      // Calculate the g-values\n      for (var i = 0; i < 8; i++) {\n        var gx = X[i] + C[i];\n\n        // Construct high and low argument for squaring\n        var ga = gx & 0xffff;\n        var gb = gx >>> 16;\n\n        // Calculate high and low result of squaring\n        var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;\n        var gl = ((gx & 0xffff0000) * gx | 0) + ((gx & 0x0000ffff) * gx | 0);\n\n        // High XOR low\n        G[i] = gh ^ gl;\n      }\n\n      // Calculate new state values\n      X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;\n      X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;\n      X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;\n      X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;\n      X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;\n      X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;\n      X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;\n      X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;\n    }\n\n    /**\n       * Shortcut functions to the cipher's object interface.\n       *\n       * @example\n       *\n       *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);\n       *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);\n       */\n    C.Rabbit = StreamCipher._createHelper(Rabbit);\n  })();\n\n\n  /**\n         * Counter block mode.\n         */\n  CryptoJS.mode.CTR = function () {\n    var CTR = CryptoJS.lib.BlockCipherMode.extend();\n\n    var Encryptor = CTR.Encryptor = CTR.extend({\n      processBlock: function processBlock(words, offset) {\n        // Shortcuts\n        var cipher = this._cipher;\n        var blockSize = cipher.blockSize;\n        var iv = this._iv;\n        var counter = this._counter;\n\n        // Generate keystream\n        if (iv) {\n          counter = this._counter = iv.slice(0);\n\n          // Remove IV for subsequent blocks\n          this._iv = undefined;\n        }\n        var keystream = counter.slice(0);\n        cipher.encryptBlock(keystream, 0);\n\n        // Increment counter\n        counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;\n\n        // Encrypt\n        for (var i = 0; i < blockSize; i++) {\n          words[offset + i] ^= keystream[i];\n        }\n      } });\n\n\n    CTR.Decryptor = Encryptor;\n\n    return CTR;\n  }();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var StreamCipher = C_lib.StreamCipher;\n    var C_algo = C.algo;\n\n    // Reusable objects\n    var S = [];\n    var C_ = [];\n    var G = [];\n\n    /**\n                 * Rabbit stream cipher algorithm.\n                 *\n                 * This is a legacy version that neglected to convert the key to little-endian.\n                 * This error doesn't affect the cipher's security,\n                 * but it does affect its compatibility with other implementations.\n                 */\n    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({\n      _doReset: function _doReset() {\n        // Shortcuts\n        var K = this._key.words;\n        var iv = this.cfg.iv;\n\n        // Generate initial state values\n        var X = this._X = [\n        K[0], K[3] << 16 | K[2] >>> 16,\n        K[1], K[0] << 16 | K[3] >>> 16,\n        K[2], K[1] << 16 | K[0] >>> 16,\n        K[3], K[2] << 16 | K[1] >>> 16];\n\n\n        // Generate initial counter values\n        var C = this._C = [\n        K[2] << 16 | K[2] >>> 16, K[0] & 0xffff0000 | K[1] & 0x0000ffff,\n        K[3] << 16 | K[3] >>> 16, K[1] & 0xffff0000 | K[2] & 0x0000ffff,\n        K[0] << 16 | K[0] >>> 16, K[2] & 0xffff0000 | K[3] & 0x0000ffff,\n        K[1] << 16 | K[1] >>> 16, K[3] & 0xffff0000 | K[0] & 0x0000ffff];\n\n\n        // Carry bit\n        this._b = 0;\n\n        // Iterate the system four times\n        for (var i = 0; i < 4; i++) {\n          nextState.call(this);\n        }\n\n        // Modify the counters\n        for (var i = 0; i < 8; i++) {\n          C[i] ^= X[i + 4 & 7];\n        }\n\n        // IV setup\n        if (iv) {\n          // Shortcuts\n          var IV = iv.words;\n          var IV_0 = IV[0];\n          var IV_1 = IV[1];\n\n          // Generate four subvectors\n          var i0 = (IV_0 << 8 | IV_0 >>> 24) & 0x00ff00ff | (IV_0 << 24 | IV_0 >>> 8) & 0xff00ff00;\n          var i2 = (IV_1 << 8 | IV_1 >>> 24) & 0x00ff00ff | (IV_1 << 24 | IV_1 >>> 8) & 0xff00ff00;\n          var i1 = i0 >>> 16 | i2 & 0xffff0000;\n          var i3 = i2 << 16 | i0 & 0x0000ffff;\n\n          // Modify counter values\n          C[0] ^= i0;\n          C[1] ^= i1;\n          C[2] ^= i2;\n          C[3] ^= i3;\n          C[4] ^= i0;\n          C[5] ^= i1;\n          C[6] ^= i2;\n          C[7] ^= i3;\n\n          // Iterate the system four times\n          for (var i = 0; i < 4; i++) {\n            nextState.call(this);\n          }\n        }\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        // Shortcut\n        var X = this._X;\n\n        // Iterate the system\n        nextState.call(this);\n\n        // Generate four keystream words\n        S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;\n        S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;\n        S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;\n        S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;\n\n        for (var i = 0; i < 4; i++) {\n          // Swap endian\n          S[i] = (S[i] << 8 | S[i] >>> 24) & 0x00ff00ff |\n          (S[i] << 24 | S[i] >>> 8) & 0xff00ff00;\n\n          // Encrypt\n          M[offset + i] ^= S[i];\n        }\n      },\n\n      blockSize: 128 / 32,\n\n      ivSize: 64 / 32 });\n\n\n    function nextState() {\n      // Shortcuts\n      var X = this._X;\n      var C = this._C;\n\n      // Save old counter values\n      for (var i = 0; i < 8; i++) {\n        C_[i] = C[i];\n      }\n\n      // Calculate new counter values\n      C[0] = C[0] + 0x4d34d34d + this._b | 0;\n      C[1] = C[1] + 0xd34d34d3 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;\n      C[2] = C[2] + 0x34d34d34 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;\n      C[3] = C[3] + 0x4d34d34d + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;\n      C[4] = C[4] + 0xd34d34d3 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;\n      C[5] = C[5] + 0x34d34d34 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;\n      C[6] = C[6] + 0x4d34d34d + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;\n      C[7] = C[7] + 0xd34d34d3 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;\n      this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;\n\n      // Calculate the g-values\n      for (var i = 0; i < 8; i++) {\n        var gx = X[i] + C[i];\n\n        // Construct high and low argument for squaring\n        var ga = gx & 0xffff;\n        var gb = gx >>> 16;\n\n        // Calculate high and low result of squaring\n        var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;\n        var gl = ((gx & 0xffff0000) * gx | 0) + ((gx & 0x0000ffff) * gx | 0);\n\n        // High XOR low\n        G[i] = gh ^ gl;\n      }\n\n      // Calculate new state values\n      X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;\n      X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;\n      X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;\n      X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;\n      X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;\n      X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;\n      X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;\n      X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;\n    }\n\n    /**\n       * Shortcut functions to the cipher's object interface.\n       *\n       * @example\n       *\n       *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);\n       *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);\n       */\n    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);\n  })();\n\n\n  /**\n         * Zero padding strategy.\n         */\n  CryptoJS.pad.ZeroPadding = {\n    pad: function pad(data, blockSize) {\n      // Shortcut\n      var blockSizeBytes = blockSize * 4;\n\n      // Pad\n      data.clamp();\n      data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);\n    },\n\n    unpad: function unpad(data) {\n      // Shortcut\n      var dataWords = data.words;\n\n      // Unpad\n      var i = data.sigBytes - 1;\n      while (!(dataWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff)) {\n        i--;\n      }\n      data.sigBytes = i + 1;\n    } };\n\n\n\n  return CryptoJS;\n\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///24\n");

/***/ }),
/* 25 */
/*!**************************************************************************************!*\
  !*** C:/Users/TG/Documents/HBuilderProjects/livePusherT_android/lib/socket/index.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {var _index = _interopRequireDefault(__webpack_require__(/*! ../../store/index.js */ 14));\n\n\nvar _GlobalFunction = __webpack_require__(/*! ../js/GlobalFunction.js */ 22);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}__f__(\"log\", '开始连接', \" at lib/socket/index.js:2\"); // console.log(store)\n// uni.connectSocket({\n//     url: 'wss://server.mycat1314.com:17400',\n// });\n// uni.onSocketOpen(function (res) {\n//   console.log('WebSocket连接已打开！');\n// });\n// uni.onSocketError(function (res) {\n//   console.log('WebSocket连接打开失败，请检查！');\n// });\n// 发送消息\nvar socketOpen = false;\nvar socketMsgQueue = [66];\n\nuni.connectSocket({\n  url: 'wss://server.mycat1314.com:17400' //ws://60.191.222.11:17400 wss://server.mycat1314.com:17400 servertest.mycat1314.com\n});\n\n// uni.onSocketOpen(function (res) {\n//   socketOpen = true;\n//   for (var i = 0; i < socketMsgQueue.length; i++) {\n//     sendSocketMessage(socketMsgQueue[i]);\n//   }\n//   socketMsgQueue = [];\n// });\n\nuni.onSocketOpen(function (res) {\n  __f__(\"log\", 'WebSocket连接已打开！', \" at lib/socket/index.js:31\");\n  setInterval(function () {\n    __f__(\"log\", 111 + '心跳正常', \" at lib/socket/index.js:33\");\n    var msg = JSON.stringify({ \"counter\": 66 });\n    var arr = (0, _GlobalFunction.sendD110)(msg);\n    uni.sendSocketMessage({\n      data: arr,\n      success: function success(res) {\n        // console.log(res)\n      },\n      fail: function fail(err) {\n        // console.log(err)\n      },\n      complete: function complete(com) {\n        __f__(\"log\", com, \" at lib/socket/index.js:45\");\n      } });\n\n  }, 15000);\n});\n\n\n// 接受消息\nuni.onSocketMessage(function (res) {\n  __f__(\"log\", res, \" at lib/socket/index.js:54\");\n  // console.log(res.data)\n  // var result = doBlob(res.data)\n  // console.log(result)\n  // let base64 =  doBlob(res.data);\n  // console.log(base64)\n\n  (0, _GlobalFunction.Do)(res.data);\n  // let base64 = Do(res);\n  // console.log(base64)\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 2)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbGliL3NvY2tldC9pbmRleC5qcyJdLCJuYW1lcyI6WyJzb2NrZXRPcGVuIiwic29ja2V0TXNnUXVldWUiLCJ1bmkiLCJjb25uZWN0U29ja2V0IiwidXJsIiwib25Tb2NrZXRPcGVuIiwicmVzIiwic2V0SW50ZXJ2YWwiLCJtc2ciLCJKU09OIiwic3RyaW5naWZ5IiwiYXJyIiwic2VuZFNvY2tldE1lc3NhZ2UiLCJkYXRhIiwic3VjY2VzcyIsImZhaWwiLCJlcnIiLCJjb21wbGV0ZSIsImNvbSIsIm9uU29ja2V0TWVzc2FnZSJdLCJtYXBwaW5ncyI6IjZDQUFBOzs7QUFHQSw2RSw2RkFGQSxhQUFZLE1BQVosK0IsQ0FDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSUEsVUFBVSxHQUFHLEtBQWpCO0FBQ0EsSUFBSUMsY0FBYyxHQUFHLENBQUMsRUFBRCxDQUFyQjs7QUFFQUMsR0FBRyxDQUFDQyxhQUFKLENBQWtCO0FBQ2hCQyxLQUFHLEVBQUUsa0NBRFcsQ0FDdUI7QUFEdkIsQ0FBbEI7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUFGLEdBQUcsQ0FBQ0csWUFBSixDQUFpQixVQUFVQyxHQUFWLEVBQWU7QUFDOUIsZUFBWSxpQkFBWjtBQUNBQyxhQUFXLENBQUMsWUFBVTtBQUNyQixpQkFBWSxNQUFJLE1BQWhCO0FBQ0EsUUFBSUMsR0FBRyxHQUFHQyxJQUFJLENBQUNDLFNBQUwsQ0FBZSxFQUFDLFdBQVcsRUFBWixFQUFmLENBQVY7QUFDQSxRQUFJQyxHQUFHLEdBQUcsOEJBQVNILEdBQVQsQ0FBVjtBQUNBTixPQUFHLENBQUNVLGlCQUFKLENBQXNCO0FBQ3BCQyxVQUFJLEVBQUVGLEdBRGM7QUFFcEJHLGFBRm9CLG1CQUVaUixHQUZZLEVBRVA7QUFDWjtBQUNBLE9BSm1CO0FBS3BCUyxVQUxvQixnQkFLZkMsR0FMZSxFQUtWO0FBQ1Q7QUFDQSxPQVBtQjtBQVFwQkMsY0FSb0Isb0JBUVhDLEdBUlcsRUFRTjtBQUNiLHFCQUFZQSxHQUFaO0FBQ0EsT0FWbUIsRUFBdEI7O0FBWUEsR0FoQlUsRUFnQlQsS0FoQlMsQ0FBWDtBQWlCRCxDQW5CRDs7O0FBc0JBO0FBQ0FoQixHQUFHLENBQUNpQixlQUFKLENBQW9CLFVBQVViLEdBQVYsRUFBZTtBQUNsQyxlQUFZQSxHQUFaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwQkFBR0EsR0FBRyxDQUFDTyxJQUFQO0FBQ0Q7QUFDQTtBQUNDLENBWEQsRSIsImZpbGUiOiIyNS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdG9yZSBmcm9tICcuLi8uLi9zdG9yZS9pbmRleC5qcydcclxuY29uc29sZS5sb2coJ+W8gOWni+i/nuaOpScpXHJcbi8vIGNvbnNvbGUubG9nKHN0b3JlKVxyXG5pbXBvcnQge3NlbmREMTEwLGRvQmxvYixEbyx3ZWJ9IGZyb20gXCIuLi9qcy9HbG9iYWxGdW5jdGlvbi5qc1wiXHJcbi8vIHVuaS5jb25uZWN0U29ja2V0KHtcclxuLy8gICAgIHVybDogJ3dzczovL3NlcnZlci5teWNhdDEzMTQuY29tOjE3NDAwJyxcclxuLy8gfSk7XHJcbi8vIHVuaS5vblNvY2tldE9wZW4oZnVuY3Rpb24gKHJlcykge1xyXG4vLyAgIGNvbnNvbGUubG9nKCdXZWJTb2NrZXTov57mjqXlt7LmiZPlvIDvvIEnKTtcclxuLy8gfSk7XHJcbi8vIHVuaS5vblNvY2tldEVycm9yKGZ1bmN0aW9uIChyZXMpIHtcclxuLy8gICBjb25zb2xlLmxvZygnV2ViU29ja2V06L+e5o6l5omT5byA5aSx6LSl77yM6K+35qOA5p+l77yBJyk7XHJcbi8vIH0pO1xyXG4vLyDlj5HpgIHmtojmga9cclxudmFyIHNvY2tldE9wZW4gPSBmYWxzZTtcclxudmFyIHNvY2tldE1zZ1F1ZXVlID0gWzY2XTtcclxuXHJcbnVuaS5jb25uZWN0U29ja2V0KHtcclxuICB1cmw6ICd3c3M6Ly9zZXJ2ZXIubXljYXQxMzE0LmNvbToxNzQwMCcvL3dzOi8vNjAuMTkxLjIyMi4xMToxNzQwMCB3c3M6Ly9zZXJ2ZXIubXljYXQxMzE0LmNvbToxNzQwMCBzZXJ2ZXJ0ZXN0Lm15Y2F0MTMxNC5jb21cclxufSk7XHJcblxyXG4vLyB1bmkub25Tb2NrZXRPcGVuKGZ1bmN0aW9uIChyZXMpIHtcclxuLy8gICBzb2NrZXRPcGVuID0gdHJ1ZTtcclxuLy8gICBmb3IgKHZhciBpID0gMDsgaSA8IHNvY2tldE1zZ1F1ZXVlLmxlbmd0aDsgaSsrKSB7XHJcbi8vICAgICBzZW5kU29ja2V0TWVzc2FnZShzb2NrZXRNc2dRdWV1ZVtpXSk7XHJcbi8vICAgfVxyXG4vLyAgIHNvY2tldE1zZ1F1ZXVlID0gW107XHJcbi8vIH0pO1xyXG5cclxudW5pLm9uU29ja2V0T3BlbihmdW5jdGlvbiAocmVzKSB7XHJcbiAgY29uc29sZS5sb2coJ1dlYlNvY2tldOi/nuaOpeW3suaJk+W8gO+8gScpO1xyXG4gIHNldEludGVydmFsKGZ1bmN0aW9uKCl7XHJcblx0ICBjb25zb2xlLmxvZygxMTErJ+W/g+i3s+ato+W4uCcpXHJcblx0ICB2YXIgbXNnID0gSlNPTi5zdHJpbmdpZnkoe1wiY291bnRlclwiOiA2Nn0pXHJcblx0ICB2YXIgYXJyID0gc2VuZEQxMTAobXNnKVxyXG5cdCAgdW5pLnNlbmRTb2NrZXRNZXNzYWdlKHtcclxuXHQgICAgZGF0YTogYXJyLFxyXG5cdCAgICBzdWNjZXNzKHJlcykge1xyXG5cdCAgICBcdC8vIGNvbnNvbGUubG9nKHJlcylcclxuXHQgICAgfSxcclxuXHQgICAgZmFpbChlcnIpIHtcclxuXHQgICAgXHQvLyBjb25zb2xlLmxvZyhlcnIpXHJcblx0ICAgIH0sXHJcblx0ICAgIGNvbXBsZXRlKGNvbSkge1xyXG5cdCAgICBcdGNvbnNvbGUubG9nKGNvbSlcclxuXHQgICAgfVxyXG5cdCAgfSk7XHJcbiAgfSwxNTAwMClcclxufSk7XHJcblxyXG5cclxuLy8g5o6l5Y+X5raI5oGvXHJcbnVuaS5vblNvY2tldE1lc3NhZ2UoZnVuY3Rpb24gKHJlcykge1xyXG5cdGNvbnNvbGUubG9nKHJlcylcclxuXHQvLyBjb25zb2xlLmxvZyhyZXMuZGF0YSlcclxuXHQvLyB2YXIgcmVzdWx0ID0gZG9CbG9iKHJlcy5kYXRhKVxyXG5cdC8vIGNvbnNvbGUubG9nKHJlc3VsdClcclxuXHQvLyBsZXQgYmFzZTY0ID0gIGRvQmxvYihyZXMuZGF0YSk7XHJcblx0Ly8gY29uc29sZS5sb2coYmFzZTY0KVxyXG5cdFxyXG5cdERvKHJlcy5kYXRhKVxyXG4vLyBsZXQgYmFzZTY0ID0gRG8ocmVzKTtcclxuLy8gY29uc29sZS5sb2coYmFzZTY0KVxyXG59KTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///25\n");

/***/ }),
/* 26 */
/*!**************************************************************************************!*\
  !*** C:/Users/TG/Documents/HBuilderProjects/livePusherT_android/lib/js/GlobalObj.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var tagArry = [];\n// let urlPoint ='http://60.191.222.11:8022';\nvar urlPoint = 'https://live.mycat1314.com';\nvar urlSocketPoint = 'ws://192.168.1.100:17400';var _default =\n\n{\n  tagArry: tagArry, //tag数组 test\n  urlPoint: urlPoint, //url前缀\n  urlSocketPoint: urlSocketPoint //socket前缀\n};\n// // // console.log(this.$store.state.login.userInfo)\n// console.log(this.$store.getters['login/get_userInfo'])\n// this.$store.commit('login/set_userInfo',4444)\n// this.$store.dispatch('login/SET_userInfo',333)\n// console.log(this.$store.state.login.userInfo)\n// getApp().globalData.url1 \n// 1244813168059535361\n\n// import {InitaddList} from \"../../lib/js/http.js\"\n// InitaddList(params,113,url).then(//地址列表aid 113\n// \t  \t(res) => {\n// \t\t\tconsole.log(res.data)\n// \t  \t\tif(res.data.code==200){\n// \t  \t\t\tthis.address=res.data.data.memberAddrVoList;\n// \t\t\t\tconsole.log(this.address.length)\n// \t  \t\t}else{\n// \t  \t\t\tuni.showToast({\n// \t  \t\t\t\ticon:'none',\n// \t  \t\t\t\ttitle: res.data.message,\n// \t  \t\t\t\tduration: 1000,\n// \t  \t\t\t});\n// \t  \t\t}\n// \t  \t},\n// \t  \t(err) => {\n// \t  \tconsole.log('get err', err)\n// \t  \t}\n// \t  )\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbGliL2pzL0dsb2JhbE9iai5qcyJdLCJuYW1lcyI6WyJ0YWdBcnJ5IiwidXJsUG9pbnQiLCJ1cmxTb2NrZXRQb2ludCJdLCJtYXBwaW5ncyI6InVGQUFBLElBQUlBLE9BQU8sR0FBRSxFQUFiO0FBQ0E7QUFDQSxJQUFJQyxRQUFRLEdBQUUsNEJBQWQ7QUFDQSxJQUFJQyxjQUFjLEdBQUUsMEJBQXBCLEM7O0FBRUE7QUFDRUYsU0FBTyxFQUFQQSxPQURGLEVBQ1U7QUFDUkMsVUFBUSxFQUFSQSxRQUZGLEVBRVc7QUFDVEMsZ0JBQWMsRUFBZEEsY0FIRixDQUdpQjtBQUhqQixDO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdGFnQXJyeSA9W107XHJcbi8vIGxldCB1cmxQb2ludCA9J2h0dHA6Ly82MC4xOTEuMjIyLjExOjgwMjInO1xyXG52YXIgdXJsUG9pbnQgPSdodHRwczovL2xpdmUubXljYXQxMzE0LmNvbSc7XHJcbnZhciB1cmxTb2NrZXRQb2ludCA9J3dzOi8vMTkyLjE2OC4xLjEwMDoxNzQwMCc7XHJcbmV4cG9ydCBkZWZhdWx0XHJcbntcclxuICB0YWdBcnJ5LC8vdGFn5pWw57uEIHRlc3RcclxuICB1cmxQb2ludCwvL3VybOWJjee8gFxyXG4gIHVybFNvY2tldFBvaW50LC8vc29ja2V05YmN57yAXHJcbn1cclxuLy8gLy8gLy8gY29uc29sZS5sb2codGhpcy4kc3RvcmUuc3RhdGUubG9naW4udXNlckluZm8pXHJcbi8vIGNvbnNvbGUubG9nKHRoaXMuJHN0b3JlLmdldHRlcnNbJ2xvZ2luL2dldF91c2VySW5mbyddKVxyXG4vLyB0aGlzLiRzdG9yZS5jb21taXQoJ2xvZ2luL3NldF91c2VySW5mbycsNDQ0NClcclxuLy8gdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2xvZ2luL1NFVF91c2VySW5mbycsMzMzKVxyXG4vLyBjb25zb2xlLmxvZyh0aGlzLiRzdG9yZS5zdGF0ZS5sb2dpbi51c2VySW5mbylcclxuLy8gZ2V0QXBwKCkuZ2xvYmFsRGF0YS51cmwxIFxyXG4vLyAxMjQ0ODEzMTY4MDU5NTM1MzYxXHJcblxyXG4gIC8vIGltcG9ydCB7SW5pdGFkZExpc3R9IGZyb20gXCIuLi8uLi9saWIvanMvaHR0cC5qc1wiXHJcbi8vIEluaXRhZGRMaXN0KHBhcmFtcywxMTMsdXJsKS50aGVuKC8v5Zyw5Z2A5YiX6KGoYWlkIDExM1xyXG4vLyBcdCAgXHQocmVzKSA9PiB7XHJcbi8vIFx0XHRcdGNvbnNvbGUubG9nKHJlcy5kYXRhKVxyXG4vLyBcdCAgXHRcdGlmKHJlcy5kYXRhLmNvZGU9PTIwMCl7XHJcbi8vIFx0ICBcdFx0XHR0aGlzLmFkZHJlc3M9cmVzLmRhdGEuZGF0YS5tZW1iZXJBZGRyVm9MaXN0O1xyXG4vLyBcdFx0XHRcdGNvbnNvbGUubG9nKHRoaXMuYWRkcmVzcy5sZW5ndGgpXHJcbi8vIFx0ICBcdFx0fWVsc2V7XHJcbi8vIFx0ICBcdFx0XHR1bmkuc2hvd1RvYXN0KHtcclxuLy8gXHQgIFx0XHRcdFx0aWNvbjonbm9uZScsXHJcbi8vIFx0ICBcdFx0XHRcdHRpdGxlOiByZXMuZGF0YS5tZXNzYWdlLFxyXG4vLyBcdCAgXHRcdFx0XHRkdXJhdGlvbjogMTAwMCxcclxuLy8gXHQgIFx0XHRcdH0pO1xyXG4vLyBcdCAgXHRcdH1cclxuLy8gXHQgIFx0fSxcclxuLy8gXHQgIFx0KGVycikgPT4ge1xyXG4vLyBcdCAgXHRjb25zb2xlLmxvZygnZ2V0IGVycicsIGVycilcclxuLy8gXHQgIFx0fVxyXG4vLyBcdCAgKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///26\n");

/***/ })
/******/ ]);